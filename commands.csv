question_id,question_name,question_command_id,question_folder_location,question_tmp_folder_location,question_content,question_test_cases
60a6150e07fc4b8cb99aa0bd0fa950c0,nxtWatch,RJSCPYQN94,/home/workspace/reactjs/coding-practices/nxtWatchApp,/home/workspace/.tmp/reactjs/coding-practices/nxtWatchApp/src,"In this assignment let's build an **Nxt Watch** by applying the concepts we have learned till now.

### Refer to videos below:

**Success View** <br/>

<div style=""text-align: center;"">
     <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/nxt-watch-output.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

**Failure View** <br/>

<div style=""text-align: center;"">
    <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/nxt-watch-failure-output.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Login Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Login - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Login - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-dark-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Login Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-failure-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Login Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-failure-dark-theme-sm-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-failure-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-login-failure-dark-theme-lg-output-v0.png)

</details>

<details>
<summary>Home Route</summary>

- [Extra Small (Size < 576px) - Home - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-success-light-theme-xs-output.png)
- [Extra Small (Size < 576px) - Home - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-success-dark-theme-xs-output.png)

- [Small (Size >= 576px) - Home - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-success-light-theme-sm-output.png)
- [Small (Size >= 576px) - Home - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-success-dark-theme-sm-output.png)

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home - No search results - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-no-videos-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home - No search results - Dark theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-no-videos-dark-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-failure-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-failure-dark-theme-sm-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-success-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-success-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home - No search results - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-no-videos-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home - No search results - Dark theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-no-videos-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-failure-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-failure-dark-theme-lg-output.png)

</details>

<details>
<summary>Trending Route</summary>

- [Extra Small (Size < 576px) - Trending - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-success-light-theme-xs-output.png)
- [Extra Small (Size < 576px) - Trending - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-success-dark-theme-xs-output.png)

- [Small (Size >= 576px) - Trending - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-success-light-theme-sm-output.png)
- [Small (Size >= 576px) - Trending - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-success-dark-theme-sm-output.png)

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Trending Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-failure-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Trending Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-failure-dark-theme-sm-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Trending - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-success-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Trending - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-success-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Trending Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-failure-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Trending Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-failure-dark-theme-lg-output.png)

</details>

<details>
<summary>Gaming Route</summary>

- [Extra Small (Size < 576px) - Gaming - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-success-light-theme-xs-output.png)
- [Extra Small (Size < 576px) - Gaming - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-success-dark-theme-xs-output.png)

- [Small (Size >= 576px) - Gaming - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-success-light-theme-sm-output.png)
- [Small (Size >= 576px) - Gaming - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-success-dark-theme-sm-output.png)

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Gaming Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-failure-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Gaming Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-failure-dark-theme-sm-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Gaming - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-success-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Gaming - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-success-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Gaming Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-failure-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Gaming Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-failure-dark-theme-lg-output.png)

</details>

<details>
<summary>Video Item Details Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - VideoItemDetails - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-success-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - VideoItemDetails - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-success-dark-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - VideoItemDetails Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-failure-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - VideoItemDetails Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-failure-dark-theme-sm-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - VideoItemDetails - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-success-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - VideoItemDetails - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-success-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - VideoItemDetails Failure - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-failure-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - VideoItemDetails Failure - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-failure-dark-theme-lg-output.png)

</details>

<details>
<summary>SavedVideos Route</summary>

- [Extra Small (Size < 576px) - No SavedVideos - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-no-saved-videos-light-theme-sm-output.png)
- [Extra Small (Size < 576px) - No SavedVideos - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-no-saved-videos-dark-theme-sm-output.png)

- [Small (Size >= 576px) - SavedVideos - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-saved-videos-light-theme-sm-output.png)
- [Small (Size >= 576px) - SavedVideos - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-saved-videos-dark-theme-sm-output.png)

- [Extra Small (Size < 576px) - SavedVideos - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-saved-videos-light-theme-xs-output.png)
- [Extra Small (Size < 576px) - SavedVideos - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-saved-videos-dark-theme-xs-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No SavedVideos - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-no-saved-videos-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No SavedVideos - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-no-saved-videos-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - SavedVideos - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-saved-videos-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - SavedVideos - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-saved-videos-dark-theme-lg-output.png)

</details>

<details>
<summary>Popup Design Files</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Logout Popup - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-logout-popup-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Logout Popup - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-logout-popup-dark-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Menu - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-menu-popup-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Menu - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-menu-popup-dark-theme-sm-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Logout Popup - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-logout-popup-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Logout Popup - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-logout-popup-dark-theme-lg-output.png)

</details>

<details>
<summary>Not Found Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Not Found - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-page-not-found-light-theme-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Not Found - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-page-not-found-dark-theme-sm-output.png)

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Not Found - Light Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-page-not-found-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Not Found - Dark Theme](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-page-not-found-dark-theme-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the app should be in **Light** theme

- **Login Route**

  - When a invalid username and password are provided and the Login button is clicked, then the respective error message received from the response should be displayed
  - When a valid username and password are provided and the Login button is clicked, then the page should be navigated to the **Home** route
  - When an _unauthenticated_ user, tries to access the `HomeRoute`, `TrendingRoute`, `GamingRoute`, `SavedVideosRoute`, `VideoDetailsRoute`, then the page should be navigated to **Login** route
  - When an _authenticated_ user, tries to access the `HomeRoute`, `TrendingRoute`, `GamingRoute`, `SavedVideosRoute`, `VideoDetailsRoute`, then the page should be navigated to the respective route
  - When an authenticated user tries to access the `LoginRoute`, then the page should be navigated to the **Home** route
  - When show password checkbox is checked, then the password should be shown
  - When show password checkbox is unchecked, then the password should be masked

- **Home Route**

  - When an authenticated user opens the **Home** Route,
    - An HTTP GET request should be made to **homeVideosApiUrl** with query parameter as `search` and its initial value as empty string
      - **_Loader_** should be displayed while the HTTP request is fetching the data
      - After the data is fetched successfully, display the list of videos received in the response
      - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-failure-light-theme-lg-output.png) should be displayed
        - When the **Retry** button is clicked, an HTTP GET request should be made to **homeVideosApiUrl**
    - When a non-empty value is provided in the Search Input and button with search icon is clicked
      - Make an HTTP GET request to the **homeVideosApiUrl** with `jwt_token` in the Cookies and query parameter `search` with value as the text provided in the Search Input
      - **_Loader_** should be displayed while the HTTP request is fetching the data
      - After the data is fetched successfully, display the list of videos received in the response
    - When the HTTP GET request made to the **homeVideosApiUrl** returns an empty list for videos then [No Videos View](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-home-no-videos-light-theme-lg-output.png) should be displayed
  - When the **website logo** image is clicked, the page should be navigated to the **Home** route
  - When a **Video** is clicked, the page should be navigated to the **Video Item Details** route
  - Clicks on the **Trending** link in the Sidebar is clicked, then the page should be navigated to the **Trending** route
  - Clicks on the **Gaming** link in the Sidebar is clicked, then the page should be navigated to the **Gaming** route
  - Clicks on the **Saved Videos** link in the Sidebar is clicked, then the page should be navigated to the **SavedVideos** route

- **Trending Route**

  - When an authenticated user opens the **Trending** Route,
    - An HTTP GET request should be made to **trendingVideosApiUrl**
      - **_Loader_** should be displayed while the HTTP request is fetching the data
      - After the data is fetched successfully, display the list of videos received in the response
      - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-trending-failure-light-theme-lg-output.png) should be displayed
        - When the **Retry** button is clicked, an HTTP GET request should be made to **trendingVideosApiUrl**
  - When the **website logo** image is clicked, the page should be navigated to the **Home** route
  - When a **Video** is clicked, the page should be navigated to the **Video Item Details** route
  - Clicks on the **Home** link in the Sidebar is clicked, then the page should be navigated to the **Home** route
  - Clicks on the **Gaming** link in the Sidebar is clicked, then the page should be navigated to the **Gaming** route
  - Clicks on the **Saved Videos** link in the Sidebar is clicked, then the page should be navigated to the **SavedVideos** route

- **Gaming Route**

  - When an authenticated user opens the **Gaming** Route,
    - An HTTP GET request should be made to **gamingVideosApiUrl**
      - **_Loader_** should be displayed while the HTTP request is fetching the data
      - After the data is fetched successfully, display the list of videos received in the response
      - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-gaming-failure-light-theme-lg-output.png) should be displayed
        - When the **Retry** button is clicked, an HTTP GET request should be made to **gamingVideosApiUrl**
  - When the **website logo** image is clicked, the page should be navigated to the **Home** route
  - When a **Video** is clicked, the page should be navigated to the **Video Item Details** route
  - Clicks on the **Home** link in the Sidebar is clicked, then the page should be navigated to the **Home** route
  - Clicks on the **Trending** link in the Sidebar is clicked, then the page should be navigated to the **Trending** route
  - Clicks on the **Saved Videos** link in the Sidebar is clicked, then the page should be navigated to the **SavedVideos** route

- **Video Item Details Route**

  - When an authenticated user opens the **Video Item Details** route
    - An HTTP GET request should be made to **videoItemDetailsApiUrl** with `jwt_token` in the Cookies and `video_id` as path parameter
      - **_loader_** should be displayed while the HTTP request is fetching the data
      - After the HTTP request is successful, the response received should be displayed
      - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-video-item-details-failure-light-theme-lg-output.png) should be displayed
        - When the **Retry** button is clicked, an HTTP GET request should be made to **videoItemDetailsApiUrl**
  - Corresponding video should be displayed using `react-player` package
  - Initially, all the three buttons (Like, Dislike, Save) will be inactive
  - When the **Like** button is clicked,
    - It will change to an active state
    - If the **Dislike** button is already in the active state, then the **Dislike** button needs to be changed to the inactive state
  - When the **Dislike** button is clicked,

    - It will change to an active state
    - If the **Like** button is already in the active state, then the **Like** button needs to be changed to the inactive state

  - When the **Save** button is clicked
    - The button will change to an active state and the respective video details should be added to the list of saved videos
    - **Save** button text will be changed to **Saved**
  - When the **Saved** button is clicked
    - The button will change to an inactive state and the respective video details will be removed from the list of saved videos
    - **Saved** button text will be changed to **Save**

- **SavedVideos Route**

  - When an authenticated user opens the **SavedVideos** Route,
    - If the list of saved videos is empty, then [No Saved Videos Found View](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-no-saved-videos-light-theme-lg-output.png) should be displayed
    - The **Videos** in the list of saved videos should be displayed as a list of videos
  - When the **website logo** image is clicked, the page should be navigated to the **Home** route
  - When a **Video** is clicked, the page should be navigated to the **Video Item Details** route
  - Clicks on the **Home** link in the Sidebar is clicked, then the page should be navigated to the **Home** route
  - Clicks on the **Trending** link in the Sidebar is clicked, then the page should be navigated to the **Trending** route
  - Clicks on the **Gaming** link in the Sidebar is clicked, then the page should be navigated to the **Gaming** route

- **Not Found Route**

  - When a random path is provided in the URL then the page should navigate to the **Not Found** route

- When the **theme** button in the header is clicked, then the theme should be changed accordingly

- **Logout**
  - When the **Logout** button in the header is clicked, then the [Logout Popup](https://assets.ccbp.in/frontend/content/react-js/nxt-watch-logout-popup-light-theme-lg-output.png) should be displayed
    - When **Cancel** button is clicked, then the popup should be closed and the page should not be navigated
    - When **Confirm** button is clicked, then the page should be navigated to the **Login** route

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**loginApiUrl**

#### API: `https://apis.ccbp.in/login`

#### Method: `POST`

#### Description:

Returns a response containing the jwt_token

#### Success Response

```json
{
  ""jwt_token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MTk2Mjg2MTN9. nZDlFsnSWArLKKeF0QbmdVfLgzUbx1BGJsqa2kc_21Y""
}
```

#### Failure Response

```json
{
  ""status_code"": 404,
  ""error_msg"": ""Username is not found""
}
```

**homeVideosApiUrl**

#### API: `https://apis.ccbp.in/videos/all?search=`

#### Method: `GET`

#### Description:

Returns a response containing the list of all videos

#### Response

```json
{
  ""total"": 60,
  ""videos"": [
    {
      ""id"": ""30b642bd-7591-49f4-ac30-5c538f975b15"",
      ""title"": ""Sehwag shares his batting experience in iB Cricket | iB Cricket Super Over League"",
      ""thumbnail_url"": ""https://assets.ccbp.in/frontend/react-js/nxt-watch/ibc-sol-1-img.png"",
      ""channel"": {
        ""name"": ""iB Cricket"",
        ""profile_image_url"": ""https://assets.ccbp.in/frontend/react-js/nxt-watch/ib-cricket-img.png""
      },
      ""view_count"": ""1.4K"",
      ""published_at"": ""Apr 19, 2019""
    },
    ...
  ],
}
```

**trendingVideosApiUrl**

#### API: `https://apis.ccbp.in/videos/trending`

#### Method: `GET`

#### Description:

Returns a response containing the list of trending videos

#### Response

```json
{
  ""total"": 30,
  ""videos"": [
    {
      ""id"": ""ad9822d2-5763-41d9-adaf-baf9da3fd490"",
      ""title"": ""iB Hubs Announcement Event"",
      ""thumbnail_url"": ""https://assets.ccbp.in/frontend/react-js/nxt-watch/ibhubs-img.png"",
      ""channel"": {
        ""name"": ""iB Hubs"",
        ""profile_image_url"": ""https://assets.ccbp.in/frontend/react-js/nxt-watch/ib-hubs-img.png""
      },
      ""view_count"": ""26K"",
      ""published_at"": ""Nov 29, 2016""
    },
    ...
  ]
}
```

**gamingVideosApiUrl**

#### API: `https://apis.ccbp.in/videos/gaming`

#### Method: `GET`

#### Description:

Returns a response containing the list of gaming videos

#### Response

```json
{
  ""total"": 30,
  ""videos"": [
    {
      ""id"": ""b214dc8a-b126-4d15-8523-d37404318347"",
      ""title"": ""Drop Stack Ball"",
      ""thumbnail_url"": ""https://assets.ccbp.in/frontend/react-js/nxt-watch/drop-stack-ball-img.png"",
      ""view_count"": ""44K""
    },
    ...
  ]
}
```

**videoItemDetailsApiUrl**

#### API: `https://apis.ccbp.in/videos/:id`

#### Example: `https://apis.ccbp.in/videos/802fcd20-1490-43c5-9e66-ce6dfefb40d1`

#### Method: `GET`

#### Description:

Returns a response containing the list of gaming videos

#### Response

```json
{
  ""video_details"": {
    ""id"": ""ad9822d2-5763-41d9-adaf-baf9da3fd490"",
    ""title"": ""iB Hubs Announcement Event"",
    ""video_url"": ""https://www.youtube.com/watch?v=pT2ojWWjum8"",
    ""thumbnail_url"": ""https://assets.ccbp.in/frontend/react-js/nxt-watch/ibhubs-img.png"",
    ""channel"": {
      ""name"": ""iB Hubs"",
      ""profile_image_url"": ""https://assets.ccbp.in/frontend/react-js/nxt-watch/ib-hubs-img.png"",
      ""subscriber_count"": ""1M""
    },
    ""view_count"": ""26K"",
    ""published_at"": ""Nov 29, 2016"",
    ""description"": ""iB Hubs grandly celebrated its Announcement Event in November 13, 2016, in the presence of many eminent personalities from the Government, Industry, and Academia with Shri Amitabh Kant, CEO, NITI Aayog as the Chief Guest.""
  }
}
```

</details>

### Quick Tips

<details close>
<summary>Click to view</summary>
<br>

- To build this project, take a look at the <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=b01fca1c-aa5c-4d79-b81e-0220e7649bd0&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Popup</a> and <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=b6392b63-25f6-4215-be09-9f23ad91d789&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Video Player</a> reading materials

- To style popup content use `.popup-content` class

```jsx
<Popup
  modal
  trigger={
    //write code here
  }
  className=""popup-content""
>
  //write code here
</Popup>
```

- Use `formatDistanceToNow` function to find the difference between the given date and now in words.

```jsx
import {formatDistanceToNow} from 'date-fns'
console.log(formatDistanceToNow(new Date(2021, 8, 20)))
// Return the distance between the given date and now in words.
```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` route should consist of `/` in the URL path
- `Login` route should consist of `/login` in the URL path
- `Trending` route should consist of `/trending` in the URL path
- `Gaming` route should consist of `/gaming` in the URL path
- `SavedVideos` route should consist of `/saved-videos` in the URL path
- `VideoItemDetails` route should consist of `/videos/:id` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`

- User credentials

  ```text
   username: rahul
   password: rahul@2021

  ```

- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as `loader` to it

  ```jsx
  <div className=""loader-container"" data-testid=""loader"">
    <Loader type=""ThreeDots"" color=""#ffffff"" height=""50"" width=""50"" />
  </div>
  ```

- The HTML button element in Home Route has the `data-testid` attribute value as `searchButton` to it

- **Styled Components** should be used for styling purposes.
- The theme button should have the `data-testid` as `theme`.
- The Sidebar should consists of
  - Facebook logo
  - Twitter Logo
- Each Route consists of respective banner as shown in the design files and it should have the `data-testid` as `banner`.
- The thumbnail images in the Route should have the alt attribute value as **video thumbnail**.
- The channel logo images in Home Route should have the alt attribute value as **channel logo**.

- **Home Route**

  - The Route should consist of an HTML container element with `data-testid` as `home`.
  - The Route should consist of an HTML image element with attribute value as `nxt watch logo` and src as the value of the given nxt watch logo URL should be displayed in the banner.
  - The Route should consist of a banner and it contains a close button element with `data-testid` as `close`.
  - The HTML container element with `data-testid` as `home` should have the background color.
    - If the Dark theme is applied, then the **#181818** color should be applied as a background-color.
    - If the Light theme is applied, then the **#f9f9f9** color should be applied as a background-color.

- **Trending Route**

  - The Route should consist of an HTML container element with `data-testid` as `trending`.
  - The HTML container element with `data-testid` as `trending` should maintain the background color theme.
    - If the Dark theme is applied, then the **#0f0f0f** color should be applied as a background-color.
    - If the Light theme is applied, then the **#f9f9f9** color should be applied as a background-color.

- **Gaming Route**

  - The Route should consist of an HTML container element with `data-testid` as `gaming`.
  - The HTML container element with `data-testid` as `gaming` should maintain the background color theme.
    - If the Dark theme is applied, then the **#0f0f0f** color should be applied as a background-color.
    - If the Light theme is applied, then the **#f9f9f9** color should be applied as a background-color.

- **SavedVideos Route**

  - The **SavedVideos** Route should consist of an HTML container element with `data-testid` as `savedVideos`.
  - The HTML container element with `data-testid` as `savedVideos` should maintain the background color theme.
    - If the Dark theme is applied, then the **#0f0f0f** color should be applied as a background-color.
    - If the Light theme is applied, then the **#f9f9f9** color should be applied as a background-color.

- **VideoItemDetails Route**

  - The **VideoItemDetails** Route should consist of an HTML container element with `data-testid` as `videoItemDetails`.
  - The HTML container element with `data-testid` as `videoItemDetails` should maintain the background color theme.
    - If the Dark theme is applied, then the **#0f0f0f** color should be applied as a background-color.
    - If the Light theme is applied, then the **#f9f9f9** color should be applied as a background-color.

- The **Website Logo** image for Light theme and Dark theme should have the alt attribute value as `website logo`
- The **Failure** image for Light theme and Dark theme should have the alt attribute value as `failure view`
- The **Not found** image for Light theme and Dark theme should have the alt attribute value as `not found`
- In the **VideoItemDetails** Route, the **#2563eb** color should be applied as `color` for any button i.e (Like, Dislike, Save) if the button is ",
db1e8b6c20914948a0e78a16c6236a48,authenticationFunctionality,RJSCPFGWRF,/home/workspace/reactjs/coding-practices/authenticationFunctionality,/home/workspace/.tmp/reactjs/coding-practices/authenticationFunctionality/src,"In this project, let's build **Authentication Functionality** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/authentication-functionality-output-v2.gif"" alt=""authentication-functionality-desktop-output"" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Login Route](https://assets.ccbp.in/frontend/content/react-js/authentication-functionality-lg-login-output.png)
- [Home Route](https://assets.ccbp.in/frontend/content/react-js/authentication-functionality-lg-home-output-v2.png)
- [About Route](https://assets.ccbp.in/frontend/content/react-js/authentication-functionality-lg-about-output-v2.png)
- [Not Found Route](https://assets.ccbp.in/frontend/content/react-js/authentication-functionality-lg-not-found-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an unauthenticated user tries to access the Home Route or About Route, then the page should be navigated to the Login Route
- When an authenticated user tries to access the Home Route, or About Route, then the page should be navigated to the respective route
- When an authenticated user tries to access the Login Route, then the page should be redirected to Home Route
- When the **Logout** button is clicked then the page should be navigated to the Login Route
- When a random path is provided in the URL then the page should be navigated to the Not Found Route
</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**loginApiUrl**

#### API: `https://apis.ccbp.in/login`

#### Method: `POST`

#### Description:

Returns a response based on the credentials provided

#### Sample Success Response

```json
{
  ""jwt_token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MTk2Mjg2MTN9.nZDlFsnSWArLKKeF0QbmdVfLgzUbx1BGJsqa2kc_21Y""
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/authentication-functionality-login-home-component-structure.png"" alt=""authentication functionality login and home components structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/authentication-functionality-about-not-found-component-structure.png"" alt=""authentication functionality about and not found components structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/Login/index.js`
- `src/components/Login/index.css`
- `src/components/Header/index.js`
- `src/components/Header/index.css`
- `src/components/Home/index.js`
- `src/components/Home/index.css`
- `src/components/About/index.js`
- `src/components/About/index.css`
- `src/components/LogoutButton/index.js`
- `src/components/LogoutButton/index.css`
- `src/components/NotFound/index.js`
- `src/components/NotFound/index.css`
- `src/components/ProtectedRoute/index.js`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` route should consist of `/` in the URL path
- `Login` route should consist of `/login` in the URL path
- `About` route should consist of `/about` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`
- As this project is mainly designed for Authentication Functionality and does not contain any input fields, use the below sample user credentials to login

  - User credentials

    ```text
    username: rahul
    password: rahul@2021
    ```

</details>

### Resources

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_9: HomeRoute should consist of a Link from react-router-dom with ""Home"" as text content,
TEST_10: HomeRoute should consist of a Link from react-router-dom with ""About"" as text content,
TEST_11: HomeRoute should consist of an HTML button element with ""Logout"" as text content,
TEST_12: When an unauthenticated user tries to access the HomeRoute then the page should be redirected to LoginRoute and consist of an HTML heading element with ""Please Login"" as text content,
TEST_13: When an authenticated user tries to access the HomeRoute then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content,
TEST_14: When the About link is clicked in the HomeRoute then the page should be navigated to AboutRoute and consist of an HTML heading element with ""About Route"" as text content,
TEST_15: When the logout button is clicked then the Cookies.remove() method should be called,
TEST_16: When the logout button is clicked then the Cookies.remove() method should be called with the ""jwt_token"" string as an argument,
TEST_17: When the logout button is clicked then the history.replace() method should be called,
TEST_18: When the logout button is clicked then the history.replace() method should be called with the argument ""/login"",
TEST_19: When the logout button is clicked then the page should be navigated to LoginRoute and consist of an HTML button element with ""Login with Sample Creds"" as text content,
TEST_20: AboutRoute should consist of a Link from react-router-dom with ""Home"" as text content,
TEST_21: AboutRoute should consist of a Link from react-router-dom with ""About"" as text content,
TEST_22: AboutRoute should consist of an HTML button element with ""Logout"" as text content,
TEST_23: When an unauthenticated user tries to access the AboutRoute then the page should be redirected to LoginRoute and consist of an HTML heading element with ""Please Login"" as text content,
TEST_24: When an authenticated user tries to access the AboutRoute then the page should be navigated to AboutRoute and consist of an HTML heading element with ""About Route"" as text content,
TEST_25: When the Home link is clicked in the AboutRoute then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content,
TEST_1: LoginRoute should consist of an HTML heading element with ""Please Login"" as text content,
TEST_2: LoginRoute should consist of an HTML button element with ""Login with Sample Creds"" as text content,
TEST_3: When an authenticated user tries to access the LoginRoute then the page should be redirected to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content,
TEST_4: When a user successfully login then the Cookies.set() method should be called,
TEST_5: When a user successfully login then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument and expiry days as the third argument,
TEST_6: When the login button is clicked in the LoginRoute and the user has successfully logged in then the history.replace() method should be called,
TEST_7: When the login button is clicked in the LoginRoute and the user has successfully logged in then the history.replace() method should be called with the argument ""/"",
TEST_8: When the login button is clicked in the LoginRoute then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Home Route"" as text content on a successful login,
TEST_26: When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consist of an HTML heading element with ""Not Found"" as text content
```"
1e62c1b2755b41f5b18153eeb17d835a,nxtTrendzAuthentication,RJSCPRKKSP,/home/workspace/reactjs/coding-practices/nxtTrendzAuthentication,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzAuthentication/src,"In this project, let's build **Nxt Trendz** app with authentication by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-output-v2.gif"" alt=""nxt trendz authentication desktop output"" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), and Medium (Size >= 768px)](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-sm-outputs.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-lg-login-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-lg-home-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When invalid credentials are provided in the login form and **Login** button is clicked, then the respective error message from the response should be displayed
- When the **username** and **password** are provided correctly and **Login** button is clicked, then the page should navigate to Home Route

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**loginApiUrl**

#### API: `https://apis.ccbp.in/login`

#### Method: `POST`

#### Description:

Returns a response based on the credentials provided

#### Sample Success Response

```json
{
  ""jwt_token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MTk2Mjg2MTN9.nZDlFsnSWArLKKeF0QbmdVfLgzUbx1BGJsqa2kc_21Y""
}
```

#### Sample Failure Response

```json
{
  ""status_code"": 404,
  ""error_msg"": ""Username is not found""
}
```

</details>

<details>
<summary>Components Structure</summary>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-login-component-structure-breakdown.png"" alt=""nxt trendz authentication login component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-home-component-structure-breakdown.png"" alt=""nxt trendz authentication home component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/LoginForm/index.js`
- `src/components/LoginForm/index.css`
- `src/components/Home/index.js`
- `src/components/Home/index.css`
- `src/components/Header/index.js`
- `src/components/Header/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` route should consist of `/` in the URL path
- `Login` route should consist of `/login` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`
- User credentials

  ```text
   username: rahul
   password: rahul@2021
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-logo-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-logo-img.png) alt should be **website logo**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-login-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-login-img.png) alt should be **website login**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-home-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-home-img.png) alt should be **clothes that get you noticed**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-log-out-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-log-out-img.png) alt should be **nav logout**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-home-icon.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-home-icon.png) alt should be **nav home**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-products-icon.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-products-icon.png) alt should be **nav products**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-cart-icon.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-cart-icon.png) alt should be **nav cart**

</details>

<details>
<summary>Colors</summary>

<br/>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #e6f6ff; width: 150px; padding: 10px; color: black"">Hex: #e6f6ff</div>
<div style=""background-color: #d7dfe9; width: 150px; padding: 10px; color: black"">Hex: #d7dfe9</div>
<div style=""background-color: #e2e8f0; width: 150px; padding: 10px; color: black"">Hex: #e2e8f0</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>
<div style=""background-color: #0967d2; width: 150px; padding: 10px; color: white"">Hex: #0967d2</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_19: When the ""/"" is provided in the browser tab then the page should be navigated to HomeRoute and consists of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"",
TEST_20: HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"",
TEST_21: HomeRoute should consist of an HTML list item with ""Home"" as text content,
TEST_22: HomeRoute should consist of an HTML list item with ""Products"" as text content,
TEST_23: HomeRoute should consist of an HTML list item with ""Cart"" as text content,
TEST_24: HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content,
TEST_25: HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"",
TEST_26: HomeRoute should consist of an HTML button element with ""Shop Now"" as text content,
TEST_27: When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consists of an HTML image element with the given not found image URL as src and alt text as ""not found"",

TEST_1: When the ""/login"" is provided in the browser tab then the page should be navigated to LoginRoute and consists of an HTML input element with ""Username"" as a placeholder,
TEST_2: LoginRoute should consist of an HTML input element with ""Password"" as a placeholder,
TEST_3: LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"",
TEST_4: LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"",
TEST_5: LoginRoute should consist of an HTML label element with text content as ""USERNAME"",
TEST_6: LoginRoute should consist of an HTML input element with type attribute value as ""text"",
TEST_7: LoginRoute should consist of an HTML label element with text content as ""PASSWORD"",
TEST_8: LoginRoute should consist of an HTML input element with type attribute value as ""password"",
TEST_9: LoginRoute should consist of an HTML button element with ""Login"" as text content,
TEST_10: LoginRoute should consist of a ""Login"" button with type attribute value as ""submit"",
TEST_11: When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed using an HTML paragraph element,
TEST_12: When a valid username is provided and the login button is clicked with an empty password then the respective error message should be displayed and the page should not be navigated,
TEST_13: When a non-empty password is provided and the login button is clicked with an empty username then the respective error message should be displayed and the page should not be navigated,
TEST_14: When an invalid username and password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated,
TEST_15: When a valid username and invalid password are provided and the login button is clicked then the respective error message should be displayed and the page should not be navigated,
TEST_16: When a valid username and password are provided and the login button is clicked then the page should be navigated to HomeRoute and consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content,
TEST_17: When a valid username and password are provided and the login button is clicked then the history.replace() method should be called,
TEST_18: When a valid username and password are provided and the login button is clicked then the history.replace() method should be called with the argument ""/"",
```"
fa54ed27d85c4ec0b01fab507acf49c8,nxtTrendzAuthentication2,RJSCPDJRRD,/home/workspace/reactjs/coding-practices/nxtTrendzAuthentication2,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzAuthentication2/src,"In this project, let's build **Nxt Trendz** app with authentication by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authorisation-output-v2.gif"" alt=""nxt trendz authentication desktop output"" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), and Medium (Size >= 768px) - Login, Login Error, Home](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-sm-outputs.png)
- [Extra Small (Size < 576px), Small (Size >= 576px), and Medium (Size >= 768px) - Products, Cart](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-sm-products-cart-outputs.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-lg-login-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-lg-home-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Products](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authorisation-lg-products-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Cart](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authorisation-lg-cart-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an unauthenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be redirected to the Login Route
- When an authenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be navigated to the respective route
- When an authenticated user tries to access the Login Route, then the page should be redirected to the Home Route
- When the Logout button is clicked, then the page should be navigated to the Login Route

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**loginApiUrl**

#### API: `https://apis.ccbp.in/login`

#### Method: `POST`

#### Description:

Returns a response based on the credentials provided

#### Sample Success Response

```json
{
  ""jwt_token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MTk2Mjg2MTN9.nZDlFsnSWArLKKeF0QbmdVfLgzUbx1BGJsqa2kc_21Y""
}
```

#### Sample Failure Response

```json
{
  ""status_code"": 404,
  ""error_msg"": ""Username is not found""
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-login-home-component-structure-breakdown.png"" alt=""nxt trendz authentication login and home component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-products-cart-component-structure-breakdown.png"" alt=""nxt trendz authentication products and cart component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/LoginForm/index.js`
- `src/components/Header/index.js`
- `src/components/Header/index.css`
- `src/components/Products/index.js`
- `src/components/Products/index.css`
- `src/components/Cart/index.js`
- `src/components/Cart/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` route should consist of `/` in the URL path
- `Login` route should consist of `/login` in the URL path
- `Products` route should consist of `/products` in the URL path
- `Cart` route should consist of `/cart` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`
- User credentials

  ```text
   username: rahul
   password: rahul@2021
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-products-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-products-img.png) alt should be **products**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-cart-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-cart-img.png) alt should be **cart**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #e6f6ff; width: 150px; padding: 10px; color: black"">Hex: #e6f6ff</div>
<div style=""background-color: #d7dfe9; width: 150px; padding: 10px; color: black"">Hex: #d7dfe9</div>
<div style=""background-color: #e2e8f0; width: 150px; padding: 10px; color: black"">Hex: #e2e8f0</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: black"">Hex: #64748b</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>
<div style=""background-color: #0967d2; width: 150px; padding: 10px; color: white"">Hex: #0967d2</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: When a user successfully logs in, the Cookies.set() method should be called.
TEST_2: When a user successfully logs in, the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument.
TEST_3: When the ""/login"" is provided in the browser tab, the page should be navigated to LoginRoute and consist of an HTML input element with ""Username"" as a placeholder.
TEST_4: LoginRoute should consist of an HTML input element with ""Password"" as a placeholder.
TEST_5: LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_6: LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"".
TEST_7: LoginRoute should consist of an HTML label element with text content as ""USERNAME"".
TEST_8: LoginRoute should consist of an HTML input element with type attribute value as ""text"".
TEST_9: LoginRoute should consist of an HTML label element with text content as ""PASSWORD"".
TEST_10: LoginRoute should consist of an HTML input element with type attribute value as ""password"".
TEST_11: LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"".
TEST_12: When an authenticated user tries to access the LoginRoute, the page should be redirected to HomeRoute.
TEST_13: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed using an HTML paragraph element.
TEST_14: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed and the page should not be navigated.
TEST_15: When a non-empty password is provided and the login button is clicked with an empty username, the respective error message should be displayed and the page should not be navigated.
TEST_16: When an invalid username and password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_17: When a valid username and invalid password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_18: When a valid username and password are provided and the login button is clicked, the page should be navigated to HomeRoute and consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content.
TEST_19: When a valid username and password are provided and the login button is clicked, the history.replace() method should be called.
TEST_20: When a valid username and password are provided and the login button is clicked, the history.replace() method should be called with the argument ""/"".
TEST_21: When the ""/"" is provided in the browser tab by an unauthenticated user, the page should be redirected to LoginRoute.
TEST_22: When the ""/"" is provided in the browser tab by an authenticated user, the HomeRoute should be loaded and consist of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"".
TEST_23: When the ""/products"" is provided in the browser tab by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML image element with the given login image URL as src and alt text as ""website login"".
TEST_24: When the ""/cart"" is provided in the browser tab by an unauthenticated user, the page should be redirected to LoginRoute.
TEST_25: When the logout button is clicked, the Cookies.remove() method should be called.
TEST_26: When the logout button is clicked, the Cookies.remove() method should be called with the ""jwt_token"" string as an argument.
TEST_27: When the logout button is clicked, the history.replace() method should be called.
TEST_28: When the logout button is clicked, the history.replace() method should be called with the argument ""/login"".
TEST_29: When the logout button is clicked, the page should be navigated to LoginRoute.
TEST_30: When the Products link is clicked, the page should be navigated to ProductsRoute.
TEST_31: ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"".
TEST_32: When the Cart link is clicked, the page should be navigated to CartRoute.
TEST_33: CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"".
TEST_34: HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"".
TEST_35: HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_36: HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content.
TEST_37: HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content.
TEST_38: HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content.
TEST_39: HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content.
TEST_40: HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"".
TEST_41: HomeRoute should consist of an HTML button element with ""Shop Now"" as text content.
TEST_42: When the ""/bad-path"" is provided in the browser tab, the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt text as ""not found"".
```"
66c8877914a641e6826e0f0c590bd65a,nxtTrendzProtectedRoute,RJSCPGXAYP,/home/workspace/reactjs/coding-practices/nxtTrendzProtectedRoute,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzProtectedRoute/src,"In this project, let's build **Nxt Trendz** app with Protected Route by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-protected-route-output.gif"" alt=""nxt-trendz-protected-route-desktop-output"" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), and Medium (Size >= 768px) - Login, Login Error, Home](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-sm-outputs.png)
- [Extra Small (Size < 576px), Small (Size >= 576px), and Medium (Size >= 768px) - Products, Cart](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-sm-products-cart-outputs.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-lg-login-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-lg-home-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Products](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authorisation-lg-products-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Cart](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authorisation-lg-cart-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an unauthenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be navigated to the Login Route using the protected route
- When an authenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be navigated to the respective route using the protected route

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**loginApiUrl**

#### API: `https://apis.ccbp.in/login`

#### Method: `POST`

#### Description:

Returns a response based on the credentials provided

#### Sample Success Response

```json
{
  ""jwt_token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MTk2Mjg2MTN9.nZDlFsnSWArLKKeF0QbmdVfLgzUbx1BGJsqa2kc_21Y""
}
```

#### Sample Failure Response

```json
{
  ""status_code"": 404,
  ""error_msg"": ""Username is not found""
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-login-home-component-structure-breakdown.png"" alt=""nxt trendz authentication login and home component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authentication-products-cart-component-structure-breakdown.png"" alt=""nxt trendz authentication products and cart component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/ProtectedRoute/index.js`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` route should consist of `/` in the URL path
- `Login` route should consist of `/login` in the URL path
- `Products` route should consist of `/products` in the URL path
- `Cart` route should consist of `/cart` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`
- User credentials

  ```text
   username: rahul
   password: rahul@2021
  ```

</details>

### Resources

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: When a user successfully logs in, the Cookies.set() method should be called.
TEST_2: When a user successfully logs in, the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument.
TEST_3: LoginRoute should consist of an HTML input element with ""Username"" as a placeholder.
TEST_4: LoginRoute should consist of an HTML input element with ""Password"" as a placeholder.
TEST_5: LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_6: LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"".
TEST_7: LoginRoute should consist of an HTML label element with text content as ""USERNAME"".
TEST_8: LoginRoute should consist of the USERNAME input field with type attribute value as ""text"".
TEST_9: LoginRoute should consist of an HTML label element with text content as ""PASSWORD"".
TEST_10: LoginRoute should consist of the PASSWORD input field with type attribute value as ""password"".
TEST_11: LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"".
TEST_12: When an authenticated user tries to access the LoginRoute, the page should be redirected to HomeRoute and consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"".
TEST_13: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed using an HTML paragraph element.
TEST_14: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed and the page should not be navigated.
TEST_15: When a non-empty password is provided and the login button is clicked with an empty username, the respective error message should be displayed and the page should not be navigated.
TEST_16: When an invalid username and password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_17: When a valid username and invalid password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_18: When a valid username and password are provided and the login button is clicked, the page should be navigated to HomeRoute and consist of an HTML image element with alt text as ""clothes that get you noticed"".
TEST_19: When a valid username and password are provided, the login button is clicked, and the user has successfully logged in, the history.replace() method should be called.
TEST_20: When a valid username and password are provided, the login button is clicked, and the user has successfully logged in, the history.replace() method should be called with the argument ""/"".
TEST_21: When the ""/"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML input element with label text as ""USERNAME"".
TEST_22: When the ""/"" is provided in the URL by an authenticated user, the HomeRoute should be loaded and consist of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"".
TEST_23: HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"".
TEST_24: HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_25: HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content.
TEST_26: HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content.
TEST_27: HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content.
TEST_28: HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content.
TEST_29: HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"".
TEST_30: HomeRoute should consist of an HTML button element with ""Shop Now"" as text content.
TEST_31: When the Products link is clicked, the page should be navigated to ProductsRoute and consist of an HTML image element with the given image URL as src and alt text as ""products"".
TEST_32: When the Cart link is clicked, the page should be navigated to CartRoute and consist of an HTML image element with the given image URL as src and alt text as ""cart"".
TEST_33: When the logout button is clicked, the Cookies.remove() method should be called.
TEST_34: When the logout button is clicked, the Cookies.remove() method should be called with the argument as ""jwt_token"".
TEST_35: When the logout button is clicked, the history.replace() method should be called.
TEST_36: When the logout button is clicked, the history.replace() method should be called with the argument ""/login"".
TEST_37: When the logout button is clicked, the page should be navigated to LoginRoute and consist of an HTML button element with ""Login"" as text content.
TEST_38: When the ""/products"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML image element with the given login image URL as src and alt text as ""website login"".
TEST_39: ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"".
TEST_40: When the ""/cart"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML input element with the label text as ""PASSWORD"".
TEST_41: CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"".
TEST_42: When the ""/bad-path"" is provided in the URL, the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt text as ""not found"".
```"
60313a6e2103462498a2fbc0cf6c841d,reusableBanners,RJSCPFTHY7,/home/workspace/reactjs/coding-practices/reusableBannersApp,/home/workspace/.tmp/reactjs/coding-practices/reusableBannersApp/src,"In this project, let's build **Reusable Banners** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/resuable-banners-lg-output.png"" alt=""resuable-banners-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), Medium (Size >= 768px)](https://assets.ccbp.in/frontend/content/react-js/reusable-banners-sm-output-v2.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/resuable-banners-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- The App is provided with `bannerCardsList`. It consists of a list of bannerCardItem objects with the following properties in each bannerCardItem object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |     id      |  Number   |
  | headerText  |  String   |
  | description |  String   |
  |  className  |  String   |

- The value of the key `id` should be used as a key to the `BannerCardItem` component.
- The value of the key `className` should be used as a className for the HTML list item in the `BannerCardItem` component.

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/App.css`
- `src/components/BannerCardItem/index.js`
- `src/components/BannerCardItem/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #cbced2; width: 150px; padding: 10px; color: black"">Hex: #cbced2</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #326a9d; width: 150px; padding: 10px; color: white"">Hex: #326a9d</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the bannerCardsList should be rendered using a unique key as a prop for each banner card item,
TEST_2: Each banner card item on the page should consist of an HTML paragraph element with the given text content,
TEST_3: Each banner card item on the page should consist of at least an HTML button element with the text content as ""Show More"",
TEST_4: Each banner card item should consist of an HTML list item with the given class name,
TEST_5: Page should consist of three HTML main heading elements with the given text content,
TEST_6: Page should consist of at least three HTML button elements with text content as ""Show More"",
TEST_7: Page should consist of three HTML paragraph elements with the given text content,
TEST_8: Page should consist of HTML list items with the given class names in bannerCardsList
```"
633855c6827345d5ab9787c5b9990622,technologyCards,RJSCPUPP7H,/home/workspace/reactjs/coding-practices/technologyCards,/home/workspace/.tmp/reactjs/coding-practices/technologyCards/src,"In this project, let's build **Technology Cards** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/technology-cards-lg-output.png"" alt=""simple-cards-app-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), and Medium (Size >= 768px)](https://assets.ccbp.in/frontend/content/react-js/technology-cards-sm-output.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/technology-cards-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- The App is provided with `cardsList`. It consists of a list of cardItem objects with the following properties in each cardItem object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |     id      |  Number   |
  |    title    |  String   |
  | description |  String   |
  |   imgUrl    |  String   |
  |  className  |  String   |

- The value of the key `id` should be used as a key to the `CardItem` component.
- The value of the key `className` should be used for the HTML list item in the `CardItem` component.

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/App.css`
- `src/components/CardItem/index.js`
- `src/components/CardItem/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Each `CardItem` should have an HTML image element with `alt` attribute value as the value of the key **title** in `cardsList`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #f4faff; width: 150px; padding: 10px; color: black"">Hex: #f4faff</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #ff4f64; width: 150px; padding: 10px; color: white"">Hex: #ff4f64</div>
<div style=""background-color: #00a8e7; width: 150px; padding: 10px; color: white"">Hex: #00a8e7</div>
<div style=""background-color: #44c4a1; width: 150px; padding: 10px; color: white"">Hex: #44c4a1</div>
<div style=""background-color: #fcc200; width: 150px; padding: 10px; color: white"">Hex: #fcc200</div>
<div style=""background-color: #171f46; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop to display card items from the cardsList.
TEST_2: Each card should be enclosed within an HTML list item with a class name equal to the value of the key ""className"" in cardsList.
TEST_3: Each card should consist of an HTML main heading element with text content equal to the value of the key ""title"" in cardsList.
TEST_4: Each card should consist of an HTML paragraph element with text content equal to the value of the key ""description"" in cardsList.
TEST_5: Each card should consist of an HTML image element with alt attribute equal to the value of the key ""title"" and src attribute equal to the value of the key ""imgUrl"" in cardsList.
TEST_6: Page should consist of an HTML paragraph element with text content starting with ""Get trained by alumni of IITs and top companies"".
TEST_7: Page should consist of HTML main heading elements with text content equal to the values of the key ""title"" in cardsList.
TEST_8: Page should consist of HTML paragraph elements with text content equal to the values of the key ""description"" in cardsList.
TEST_9: Page should consist of HTML image elements with alt attribute equal to the values of the key ""title"" and src attribute equal to the values of the key ""imgUrl"" in cardsList.
TEST_10: Page should consist of HTML list items with class names equal to the values of the key ""className"" in cardsList.
```"
760ee794edc5478cb2abc14c182c35ba,blogList,RJSCP4WKCF,/home/workspace/reactjs/coding-practices/blogList,/home/workspace/.tmp/reactjs/coding-practices/blogList/src,"In this project, let's build a **Blog List** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/routing-practice-blog-list-desktop-output.gif"" alt=""routing-practice-blog-list-desktop-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), Medium (Size >= 768px)](https://assets.ccbp.in/frontend/content/react-js/routing-practice-blog-list-sm-output-v2.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/routing-practice-blog-list-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- In the Home Route, user info and blog list should be displayed
- The `Home` component is provided with `blogsList`. It consists of a list of blog details objects with the following properties in each object

  |      Key      | Data Type |
  | :-----------: | :-------: |
  |      id       |  Number   |
  |     title     |  String   |
  |  description  |  String   |
  | publishedDate |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/routing-practice-blog-list-component-breakdown-structure.png"" alt=""blog list component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Home/index.js`
- `src/components/BlogList/index.js`
- `src/components/BlogList/index.css`
- `src/components/BlogItem/index.js`
- `src/components/BlogItem/index.css`
- `src/components/UserInfo/index.js`
- `src/components/UserInfo/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` route should consist of `/` in the URL path
- `About` route should consist of `/about` in the URL path
- `Contact` route should consist of `/contact` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js` file

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/profile-img.png](https://assets.ccbp.in/frontend/react-js/profile-img.png) alt should be **profile**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #9aa5b1; width: 150px; padding: 10px; color: white"">Hex: #9aa5b1</div>
<div style=""background-color: #616e7c; width: 150px; padding: 10px; color: white"">Hex: #616e7c</div>
<div style=""background-color: #12022f; width: 150px; padding: 10px; color: white"">Hex: #12022f</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the blogsList should be rendered using a unique key as a prop for each blog item,
TEST_2: Page should consist of a Link from react-router-dom in the header with ""Home"" as text content,
TEST_3: Page should consist of a Link from react-router-dom in the header with ""About"" as text content,
TEST_4: Page should consist of a Link from react-router-dom in the header with ""Contact"" as text content,
TEST_5: When the ""/about"" is provided in the browser tab then the page should be navigated to AboutRoute and consists of an HTML heading element with ""About"" as text content,
TEST_6: When the ""/contact"" is provided in the browser tab then the page should be navigated to ContactRoute and consists of an HTML heading element with ""Contact"" as text content,
TEST_7: When the ""/bad-path"" is provided in the browser tab then the page should be navigated to NotFoundRoute and consists of an HTML heading element with ""Not Found"" as text content,
TEST_8: When the About link in the header is clicked then the page should be navigated to AboutRoute with ""/about"" in URL path,
TEST_9: When the Contact link in the header is clicked then the page should be navigated to ContactRoute with ""/contact"" in URL path,
TEST_10: When the Home link in the header is clicked then the page should be navigated to HomeRoute with ""/"" in URL path,
TEST_11: Page should consist of an HTML heading element with ""Wade Warren"" as text content when rendering HomeRoute initially,
TEST_12: Page should consist of an HTML image element with alt text as ""profile"",
TEST_13: Page should consist of an HTML image element in the header with the given logo URL as src and alt text as ""wave"",
TEST_14: Home Route should consist of HTML heading elements with text content equal to the ""title"" in blogsList provided,
TEST_15: Home Route should consist of at least five HTML paragraph elements with text content equal to the ""description"" in blogsList provided
```"
11164ecf20c04aee9aade716e329330d,boxes,RJSCPHB1SE,/home/workspace/reactjs/coding-practices/boxesApp,/home/workspace/.tmp/reactjs/coding-practices/boxesApp/src,"In this project, let's build a **Boxes** page by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/boxes-lg-output.png"" alt=""boxes-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/boxes-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/boxes-lg-output.png)

</details>

### Completion Instructions

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `index.js`
- `index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #fbbf24; width: 150px; padding: 10px; color: white"">Hex: #fbbf24</div>
<div style=""background-color: #38bdf8; width: 150px; padding: 10px; color: white"">Hex: #38bdf8</div>
<div style=""background-color: #ec4899; width: 150px; padding: 10px; color: white"">Hex: #ec4899</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto
- Bree Serif

</details>

> ### _Things to Keep in Mind_
>
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: JSX code implementation should consist of JSX syntax for HTML main heading element at least once,
TEST_2: JSX code implementation should consist of JSX syntax <Box /> to render Boxes at least thrice"
9a69b39349484ea8bd5cf45d87651099,browserHistory,RJSCPK3BCW,/home/workspace/reactjs/coding-practices/browserHistory,/home/workspace/.tmp/reactjs/coding-practices/browserHistory/src,"In this project, let's build a **Browser History** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/browser-history-output.gif"" alt=""browser history output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/browser-history-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Browser History](https://assets.ccbp.in/frontend/content/react-js/browser-history-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Empty History View](https://assets.ccbp.in/frontend/content/react-js/browser-history-empty-view-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of given history items should be displayed with a delete button for each history item.
- When a non-empty value is provided in the search input, then display the history items which includes the search input irrespective of case
- When the delete button of a history item is clicked, then the respective history item should be deleted from the list of history items
- When a non-empty value is provided in the search input element, and no history item includes the value given in the search input, then [Empty History View](https://assets.ccbp.in/frontend/content/react-js/browser-history-empty-view-lg-output.png) should be displayed
- When all the history items are deleted, then [Empty History View](https://assets.ccbp.in/frontend/content/react-js/browser-history-empty-view-lg-output.png) should be displayed

- The App is provided with `historyList`. It consists of a list of historyItem objects with the following properties in each historyItem object

  |     Key      | Data Type |
  | :----------: | :-------: |
  |      id      |  Number   |
  | timeAccessed |  String   |
  |   logoUrl    |  String   |
  |    title     |  String   |
  |  domainUrl   |  String   |

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The `logoUrl` in the each history item have alt as **domain logo**
- The delete button in the history item should have the `data-testid` as **delete**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/history-website-logo-img.png](https://assets.ccbp.in/frontend/react-js/history-website-logo-img.png) alt should be **app logo**
- [https://assets.ccbp.in/frontend/react-js/search-img.png](https://assets.ccbp.in/frontend/react-js/search-img.png) alt should be **search**
- [https://assets.ccbp.in/frontend/react-js/delete-img.png](https://assets.ccbp.in/frontend/react-js/delete-img.png) alt should be **delete**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #3367d6; width: 150px; padding: 10px; color: white"">Hex: #3367d6</div>
<div style=""background-color: #2850a7; width: 150px; padding: 10px; color: white"">Hex: #2850a7</div>
<div style=""background-color: #ececec; width: 150px; padding: 10px; color: black"">Hex: #ececec</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #6697ff; width: 150px; padding: 10px; color: black"">Hex: #6697ff</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<br/>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop to display historyItem from the initialHistoryList,
TEST_2: Page should consist of an HTML image element with alt attribute value as ""app logo"" and src as the given logo URL,
TEST_3: Page should consist of an HTML image element with alt attribute value as ""search"" and src as the given search image URL,
TEST_4: Page should consist of an HTML input element with type attribute value as ""search"",
TEST_5: Page should consist of an HTML unordered list element to display the list of historyItems,
TEST_6: Page should consist of at least ten HTML list elements to display the list of historyItems,
TEST_7: Page should consist of an HTML paragraph elements with text content as the values of the key ""timeAccessed"" in each historyItem of given initialHistoryList,
TEST_8: Page should consist of an HTML image elements with alt attribute value as ""domain logo"" and src as the value of key ""logoUrl"" in each historyItem of given initialHistoryList,
TEST_9: Page should consist of an HTML paragraph elements with text content as the values of the key ""title"" in each historyItem of given initialHistoryList,
TEST_10: Page should consist of an HTML paragraph elements with text content as the values of the key ""domainUrl"" in each historyItem of given initialHistoryList,
TEST_11: Page should consist of at least ten HTML button elements with data-testid as ""delete"",
TEST_12: Page should consist of at least ten HTML image elements with alt attribute value as ""delete"" and src as the given delete image URL,
TEST_13: When a non-empty value is provided in the search input element, then the text provided should be displayed in the search input element,
TEST_14: When a non-empty value is provided in the search input element, the historyItems should be filtered irrespective of the case,
TEST_15: When a non-empty value is provided in the search input element, and no history item includes the value given in the search input, then the page should consist of an HTML paragraph element with text content as ""There is no history to show"",
TEST_16: When an HTML button element with data-testid as ""delete"" of a history item is clicked, then the respective history item should be deleted,
TEST_17: When all historyItems are deleted, then the page should consist of an HTML paragraph element with text content as ""There is no history to show""
```"
17f08f957f274e21a929cca06083e4f3,capitalsApp,RJSCPLC7S2,/home/workspace/reactjs/coding-practices/capitalsApp,/home/workspace/.tmp/reactjs/coding-practices/capitalsApp/src,"In this project, let's build a **Capitals App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/capitals-app-output.gif"" alt=""capitals app output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/capitals-app-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/capitals-app-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the first capital in the list should be selected, and its respective country should be displayed
- When a capital is selected, then the respective country of the capital should be displayed
- The `Capitals` component is provided with `countryAndCapitalsList`. It consists of a list of country and capital objects with the following properties in each country and capital object

  |        Key         | Data Type |
  | :----------------: | :-------: |
  |         id         |  String   |
  | capitalDisplayText |  String   |
  |      country       |  String   |

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Capitals/index.js`
- `src/components/Capitals/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #93c5fd; width: 150px; padding: 10px; color: white"">Hex: #93c5fd</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #cbd2d9; width: 150px; padding: 10px; color: black"">Hex: #cbd2d9</div>
<div style=""background-color: #323f4b; width: 150px; padding: 10px; color: white"">Hex: #323f4b</div>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: Page should consist of at least two HTML options and the countryAndCapitalsList should be rendered using a unique key as a prop for each capital option,
TEST_2: Page should consist of HTML main heading element with text content as ""Countries And Capitals"",
TEST_3: Page should initially consist of HTML select element with value attribute equal to ""NEW_DELHI"",
TEST_4: Page should consist of HTML option elements with text content equal to ""capitalDisplayText"" of each object in countryAndCapitalsList provided,
TEST_5: Page should consist of HTML option elements with value attribute equal to ""id"" of each object in countryAndCapitalsList provided,
TEST_6: Page should consist of HTML paragraph element with text content as ""is capital of which country"",
TEST_7: Page should initially consist of HTML paragraph element with text content equal to ""country"" value of first item in countryAndCapitalsList provided,
TEST_8: When HTML option with value attribute ""PARIS"" is selected, then the value attribute of the HTML select element should be ""PARIS"",
TEST_9: When HTML option with the value attribute ""PARIS"" is selected, then ""France"" should be displayed in the HTML paragraph element for the country"
9a50c807bcbd47e9898b786b4f719711,cashWithdrawal,RJSCPTT9ER,/home/workspace/reactjs/coding-practices/cashWithdrawal,/home/workspace/.tmp/reactjs/coding-practices/cashWithdrawal/src,"In this project, let's build a **Cash Withdrawal** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cash-withdrawal-output-v2.gif"" alt=""cash withdrawal"" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/cash-withdrawal-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/cash-withdrawal-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the balance should be **2000** rupees
- When a denomination is clicked, then the respective value should be deducted from the balance available
- The `CashWithdrawal` component receives the `denominationsList` as a prop. It consists of a list of denomination objects with the following properties in each denomination object

  |  Key  | Data Type |
  | :---: | :-------: |
  |  id   |  Number   |
  | value |  Number   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cash-withdrawal-component-structure-v2.png"" alt=""cash withdrawal component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/CashWithdrawal/index.js`
- `src/components/CashWithdrawal/index.css`
- `src/components/DenominationItem/index.js`
- `src/components/DenominationItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- The string method `slice()` extracts a section of a string and returns it as a new string, without modifying the original string

  ```js
  const text = ""The quick brown fox"";
  console.log(text.slice(0, 3)); // The
  console.log(text.slice(2, 3)); // e
  ```

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

  </details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #150b3e ; width: 150px; padding: 10px; color: white"">Hex: #150b3e</div>
<div style=""background-color: #c7d2fe ; width: 150px; padding: 10px; color: black"">Hex: #c7d2fe</div>
<div style=""background-color: #7c3aed ; width: 150px; padding: 10px; color: white"">Hex: #7c3aed</div>
<div style=""background-color: #d4d2db ; width: 150px; padding: 10px; color: black"">Hex: #d4d2db</div>
<div style=""background-color: #585076 ; width: 150px; padding: 10px; color: white"">Hex: #585076</div>
<div style=""background-color: #382f5a ; width: 150px; padding: 10px; color: white"">Hex: #382f5a</div>
<div style=""background-color: #c4c4c4 ; width: 150px; padding: 10px; color: black"">Hex: #c4c4c4</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","```
Here are the test cases to verify:
TEST_1: Page should consist of at least two HTML list items and the denominationsList should be rendered using a unique key as a prop for each denomination item,
TEST_2: Page should consist of an HTML paragraph element with text content as ""Your Balance"",
TEST_3: Page should initially consist of an HTML paragraph element with text content as ""2000"",
TEST_4: Page should consist of an HTML paragraph element with text content as ""Withdraw"",
TEST_5: Page should consist of an HTML paragraph element with text content as ""CHOOSE SUM (IN RUPEES)"",
TEST_6: Page should consist of an HTML unordered list element to display the list of denominations,
TEST_7: Page should consist of at least four HTML list items to display the given list of denominations in denominationsList,
TEST_8: Page should consist of HTML button elements with text content as values of the key ""value"" from denominationsList provided,
TEST_9: When a denomination button is clicked, then the respective amount should be deducted from the balance available
```"
d2b2fa7044b340b39ecc3a189e72cde7,ccbpTimeline,RJSCPRXL8I,/home/workspace/reactjs/coding-practices/ccbpTimeline,/home/workspace/.tmp/reactjs/coding-practices/ccbpTimeline/src,"In this project, let's build a **CCBP Timeline** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/ccbp-timeline-output.gif"" alt=""ccbp timeline output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/ccbp-timeline-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/ccbp-timeline-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the page should display the timeline items list using **Chrono custom rendering** based on the `categoryId`
- The `TimelineView` component is provided with `timelineItemsList`. It consists of a list of timeline item objects with the following properties in each timeline item object

  - The `timelineItemObject` with `categoryId` as `COURSE` will have the following properties

    |     Key     | Data Type |
    | :---------: | :-------: |
    |     id      |  String   |
    | categoryId  |  String   |
    |    title    |  String   |
    | courseTitle |  String   |
    | description |  String   |
    |  duration   |  String   |
    |  tagsList   |   Array   |

  - The `tagsListObject` will have the following properties

    | Key  | Data Type |
    | :--: | :-------: |
    |  id  |  String   |
    | name |  String   |

  - The `timelineItemObject` with `categoryId` as `PROJECT` will have the following properties

    |     Key      | Data Type |
    | :----------: | :-------: |
    |      id      |  String   |
    |  categoryId  |  String   |
    |    title     |  String   |
    | projectTitle |  String   |
    | description  |  String   |
    |   imageUrl   |  String   |
    |   duration   |  String   |
    |  projectUrl  |  String   |

- If the value of the key `categoryId` in `timelineItemObject` is `PROJECT` then Project card should be rendered
  - The `ProjectTimelineCard` should consist of **Visit** link when a user clicks on it, then the page should be navigated to the respective project
  - The `ProjectTimelineCard` should consist of a **Calendar** icon with respective `duration` text
- If the value of the key `categoryId` in `timelineItemObject` is `COURSE` then the Course card should be rendered
  - The `CourseTimelineCard` should consist of a **Clock** icon with respective `duration` text
- Give the timeline items list data as a value to `items` prop for the `Chrono` component from **react-chrono**, so that the title will be displayed beside each card

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/ccbp-timeline-component-structure-breakdown.png"" alt=""component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/TimelineView/index.js`
- `src/components/TimelineView/styledComponents.js`
- `src/components/CourseTimelineCard/index.js`
- `src/components/CourseTimelineCard/styledComponents.js`
- `src/components/ProjectTimelineCard/index.js`
- `src/components/ProjectTimelineCard/styledComponents.js`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

- To build this project, take a look at the <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=a152928a-64cc-4697-936c-db2e3c4f2716&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Chrono</a> reading material

**The following instructions are required for the tests to pass**

- **Styled Components** should be used for styling purpose
- `AiFillClockCircle`, `AiFillCalendar` icons from `react-icons` should be used for **clock** and **calender** icons in card respectively
- **Roboto** should be applied as `font-family` for `courseTitle` and `projectTitle` in the card

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/ccbp-timeline-key-breakdown-structure.png"" alt=""content title and project title"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

- The **#0967d2** color should be applied as `color` for **Visit** anchor element in the card

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #171f46; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #0967d2; width: 150px; padding: 10px; color: white"">Hex: #0967d2</div>
<div style=""background-color: #2b237c; width: 150px; padding: 10px; color: white"">Hex: #2b237c</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
",Error: Unable to fetch the API.
3b92b48f9ec9492e91acb228a572b6be,clickCounter,RJSCPRD0XO,/home/workspace/reactjs/coding-practices/clickCounter,/home/workspace/.tmp/reactjs/coding-practices/clickCounter/src,"In this project, let's build a **Click Counter** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/click-counter-output.gif"" alt=""click counter"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/click-counter-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/click-counter-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially the count of the number of clicks should be 0
- When **Click Me!** button is clicked the count of the number of clicks should be incremented by 1

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/ClickCounter/index.js`
- `src/components/ClickCounter/index.css`
</details>

### Quick Tips

<details close>
<summary>Click to view</summary>
<br>

- You can use the below cursor CSS property for buttons to set the type of mouse cursor, to show when the mouse pointer is over an element,

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below outline CSS property for buttons and input elements to remove the highlighting when the elements are clicked,

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #f1f5f8 ; width: 150px; padding: 10px; color: black"">Hex: #f1f5f8</div>
<div style=""background-color: #2d3a35 ; width: 150px; padding: 10px; color: white"">Hex: #2d3a35</div>
<div style=""background-color: #c20a72 ; width: 150px; padding: 10px; color: white"">Hex: #c20a72</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #007bff ; width: 150px; padding: 10px; color: white"">Hex: #007bff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: Page should initially consist of an HTML heading element with text content as 'The Button has been clicked 0 times',
TEST_2: Page should consist of an HTML paragraph element with text content as 'Click the button to increase the count',
TEST_3: Page should consist of an HTML button element with text content as 'Click Me',
TEST_4: When the HTML button is clicked, the clicks count should be incremented by 1"
6e891af2a9fc4cb1ad08fda827c154fb,coinTossGame,RJSCP7IIZJ,/home/workspace/reactjs/coding-practices/coinTossGame,/home/workspace/.tmp/reactjs/coding-practices/coinTossGame/src,"In this project, let's build a **Coin Toss Game** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/coin-toss-game-output.gif"" alt=""coin toss game output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/coin-toss-game-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/coin-toss-game-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the app should have heads image and total, heads, tails counts as **0**
- When the **Toss Coin** button is clicked, then the toss result should be generated using the below expression

  ```
  const tossResult = Math.floor(Math.random() * 2)
  ```

- If the number generated from the given expression is `0` then the result should be `heads` or else the result should be `tails`
- When the **Toss Coin** is clicked, and the result is `heads` then
  - The heads image should be displayed
  - The heads count should be incremented by one
  - The total should be incremented by one
- When the **Toss Coin** is clicked, and the result is `tails` then
  - The tails image should be displayed
  - The tails count should be incremented by one
  - The total should be incremented by one

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/CoinToss/index.js`
- `src/components/CoinToss/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The toss result image should have the alt attribute value as **toss result**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/heads-img.png](https://assets.ccbp.in/frontend/react-js/heads-img.png)
- [https://assets.ccbp.in/frontend/react-js/tails-img.png](https://assets.ccbp.in/frontend/react-js/tails-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #e2a139; width: 150px; padding: 10px; color: white"">Hex: #e2a139</div>
<div style=""background-color: #f9d423; width: 150px; padding: 10px; color: black"">Hex: #f9d423</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #a35200; width: 150px; padding: 10px; color: white"">Hex: #a35200</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:
TEST_1: Page should consist of an HTML main heading element with ""Coin Toss Game"" as text content,
TEST_2: Page should consist of an HTML paragraph element with ""Heads (or) Tails"" as text content,
TEST_3: Page should initially consist of an HTML image element with alt attribute value as ""toss result"" and src attribute value as the URL for heads image,
TEST_4: Page should consist of HTML button element with text content as ""Toss Coin"",
TEST_5: Page should initially consist of HTML paragraph element with text content as ""Total: 0"",
TEST_6: Page should initially consist of HTML paragraph element with text content as ""Heads: 0"",
TEST_7: Page should initially consist of HTML paragraph element with text content as ""Tails: 0"",
TEST_8: When the Toss Coin button is clicked, if the result is ""heads"" then the heads image should be displayed,
TEST_9: When the Toss Coin button is clicked, if the result is ""heads"" then the heads count should be incremented by one,
TEST_10: When the Toss Coin button is clicked, if the result is ""tails"" then the tails image should be displayed,
TEST_11: When the Toss Coin button is clicked, if the result is ""tails"" then the tails count should be incremented by one,
TEST_12: When the Toss Coin button is clicked, the total should be incremented by one
```"
bae5a70923b945c6a7f153ef02445192,commentsApp,RJSCPJO5SO,/home/workspace/reactjs/coding-practices/commentsApp,/home/workspace/.tmp/reactjs/coding-practices/commentsApp/src,"In this project, let's build a **Comments App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/comments-app-output-v0.gif"" alt=""comments output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/comments-app-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/comments-app-lg-output-v0.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of comments should be zero and the inputs fields should be empty
- When non-empty values are provided and **Add Comment** button is clicked,
  - A new comment should be added to the list of comments
  - The comments count should be incremented by one
  - The value of the input fields for name and comment should be updated to their initial values
- When the **Like** button of a comment is clicked, if the image for **Like** is
  - [Like](https://assets.ccbp.in/frontend/react-js/comments-app/like-img.png) image, then it should be changed to the [Liked](https://assets.ccbp.in/frontend/react-js/comments-app/liked-img.png) image
  - [Liked](https://assets.ccbp.in/frontend/react-js/comments-app/liked-img.png) image, then it should be changed to the [Like](https://assets.ccbp.in/frontend/react-js/comments-app/like-img.png) image
- When the **Delete** button of a comment is clicked, the comment should be deleted from the list of comments and the comments count should be decremented by one

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/comments-app-component-breakdown-structure-v0.png"" alt=""component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Comments/index.js`
- `src/components/Comments/index.css`
- `src/components/CommentItem/index.js`
- `src/components/CommentItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- The `formatDistanceToNow` function in the **date-fns** package is used to return the gap between the given date and now in words.

```js
import {formatDistanceToNow} from 'date-fns'

console.log(formatDistanceToNow(new Date())); // less than a minute
```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- HTML input element for name should have the placeholder as **Your Name**
- HTML textarea element for comment should have the placeholder as **Your Comment**
- The **Like** image for each comment should have the alt as **like**
- The **Delete** button for each comment should have the data-testid as **delete**
- To display how much time ago the comment was posted, we will use `formatDistanceToNow` function from **date-fns** package

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/comments-app/comments-img.png](https://assets.ccbp.in/frontend/react-js/comments-app/comments-img.png) alt should be **comments**
- [https://assets.ccbp.in/frontend/react-js/comments-app/delete-img.png](https://assets.ccbp.in/frontend/react-js/comments-app/delete-img.png) alt should be **delete**
- [https://assets.ccbp.in/frontend/react-js/comments-app/like-img.png](https://assets.ccbp.in/frontend/react-js/comments-app/like-img.png)
- [https://assets.ccbp.in/frontend/react-js/comments-app/liked-img.png](https://assets.ccbp.in/frontend/react-js/comments-app/liked-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #dee0e3; width: 150px; padding: 10px; color: black"">Hex: #dee0e3</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #cbd2d9; width: 150px; padding: 10px; color: black"">Hex: #cbd2d9</div>
<div style=""background-color: #0284c7; width: 150px; padding: 10px; color: white"">Hex: #0284c7</div>
<div style=""background-color: #f59e0b; width: 150px; padding: 10px; color: black"">Hex: #f59e0b</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #f97316; width: 150px; padding: 10px; color: black"">Hex: #f97316</div>
<div style=""background-color: #10b981; width: 150px; padding: 10px; color: black"">Hex: #10b981</div>
<div style=""background-color: #b91c1c; width: 150px; padding: 10px; color: black"">Hex: #b91c1c</div>
<div style=""background-color: #0ea5e9; width: 150px; padding: 10px; color: white"">Hex: #0ea5e9</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #94a3b8; width: 150px; padding: 10px; color: white"">Hex: #94a3b8</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #7e858e; width: 150px; padding: 10px; color: white"">Hex: #7e858e</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:
TEST_1: When a comment is added, then the page should consist of at least one HTML list item and the commentsList should be rendered using a unique key as a prop for each comment item,
TEST_2: Page should consist of HTML main heading element with text content as ""Comments"",
TEST_3: Page should consist of HTML paragraph element with text content starting with ""Say Something"",
TEST_4: Page should consist of an HTML form element,
TEST_5: Page should consist of HTML input element with a placeholder as ""Your Name"",
TEST_6: Page should consist of HTML textarea element with a placeholder as ""Your Comment"",
TEST_7: Page should consist of HTML button element with text content as ""Add Comment"",
TEST_8: Page should consist of HTML image element with alt as ""comments"" and src value as URL for comments image,
TEST_9: Page should initially consist of HTML element with text content as ""0"",
TEST_10: When a non-empty value is provided in the HTML input element for name, then the value provided should be updated in the value of the input element,
TEST_11: When a non-empty value is provided in the HTML textarea element for comment, then the value provided should be updated in the value of the textarea element,
TEST_12: When non-empty values are provided in the HTML input element and HTML text area element and the ""Add Comment"" button is clicked, then the values inside the input elements should be updated to their initial state,
TEST_13: When a comment is added, then the comments count should be incremented by one,
TEST_14: When a comment is added, then the page should consist of an HTML unordered list to display the list of comments,
TEST_15: When a comment is added, then the page should consist of at least one HTML list item to display the comment,
TEST_16: When a comment is added, then the name provided in the HTML input element should be displayed in the comment,
TEST_17: When a comment is added, then the comment provided in the HTML textarea element should be displayed in the comment,
TEST_18: When a comment is added, then the comment should contain an HTML paragraph element with text containing how long ago the comment was posted,
TEST_19: When a comment is added, then the comment should contain an HTML image element with alt as ""like"" and src as the URL for the Like image,
TEST_20: When a comment is added, then the comment should contain an HTML button element with text content as ""Like"",
TEST_21: When a comment is added, then the comment should contain an HTML button element with data-testid attribute value as ""delete"",
TEST_22: When a comment is added, then the comment should contain an HTML image element with alt as ""delete"" and src as the URL for the delete image,
TEST_23: When a comment is added, and the HTML button with text content as ""Like"" is clicked, then the src value of the HTML image with alt text as ""like"" should be changed to URL for the Liked image,
TEST_24: When a comment is added and liked, and the HTML button with text content as ""Like"" is clicked again, then the src value of the HTML image with alt text as ""like"" should be changed to URL for the Like image,
TEST_25: When a comment is added, and the HTML button with data-testid as ""delete"" is clicked, then the comment item should be deleted from the list of comments,
TEST_26: When a comment is added, and the HTML button with data-testid as ""delete"" is clicked, then the count of the comments should be decremented by one
```"
3ed2ecffb8a448e5816992d44dbed46a,congratsCard,RJSCPKTLF1,/home/workspace/reactjs/coding-practices/congratsCardApp,/home/workspace/.tmp/reactjs/coding-practices/congratsCardApp/src,"In this project, let's build a **Congrats Card** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/congrats-card-lg-output-img.png"" alt=""congrats-card-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/congrats-card-sm-output-img.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/congrats-card-lg-output-img.png)

</details>

### Completion Instructions

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `index.js`
- `index.css`
</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/congrats-card-bg.png](https://assets.ccbp.in/frontend/react-js/congrats-card-bg.png)
- [https://assets.ccbp.in/frontend/react-js/congrats-card-profile-img.png](https://assets.ccbp.in/frontend/react-js/congrats-card-profile-img.png)
- [https://assets.ccbp.in/frontend/react-js/congrats-card-watch-img.png](https://assets.ccbp.in/frontend/react-js/congrats-card-watch-img.png)
</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #cffafe; width: 150px; padding: 10px; color: black"">Hex: #cffafe</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: JSX code implementation should consist of JSX syntax for an HTML main heading element at least once,
TEST_2: JSX code implementation should consist of JSX syntax for an HTML paragraph element at least once,
TEST_3: JSX code implementation should consist of JSX syntax for an HTML image element at least once
```"
cb345ff9ef2d447fb2c90dd181faff73,cowinDashboard,RJSCP2FAS0,/home/workspace/reactjs/coding-practices/cowinDashboard,/home/workspace/.tmp/reactjs/coding-practices/cowinDashboard/src,"In this project, let's build a **CoWIN Dashboard** by applying the concepts we have learned till now.

### Refer to the images below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cowin-dashbaord-output.gif"" alt="""" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

**Failure View**

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cowin-dashbaord-failure-view-output.gif"" alt=""cowin-dashboard-failure-view-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Large Devices (Size >= 1200px) - Success View](https://assets.ccbp.in/frontend/content/react-js/cowin-dashboard-xl-output.png)
- [Extra Large Devices (Size >= 1200px) - Failure View](https://assets.ccbp.in/frontend/content/react-js/cowin-dashbaord-xl-failure-view-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the page is opened,
  - An HTTP GET request should be made to **covidVaccinationDataApiUrl**
  - **_loader_** should be displayed while the HTTP request is fetching the data
  - After the data is fetched successfully, the response received should be displayed using different charts from `recharts`
  - The last 7 days vaccination data should be displayed using the `BarChart` component from `recharts`
  - The data for vaccination by gender and vaccination by age should be displayed as two different pie charts using the `PieChart` component from `recharts`
  - If the HTTP GET request made is unsuccessful, then the [FailureView](https://assets.ccbp.in/frontend/react-js/api-failure-view.png) should be displayed

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**covidVaccinationDataApiUrl**

#### API: `https://apis.ccbp.in/covid-vaccination-data`

#### Method: `GET`

#### Description:

Returns a response containing the list of Products

#### Success Response

```json
{
  ""last_7_days_vaccination"": [
    {
      ""vaccine_date"": ""30th Jul"",
      ""dose_1"": 3757930,
      ""dose_2"": 1817805
    },
    ...
  ],
  ""vaccination_by_age"": [
    {
      ""age"": ""18-44"",
      ""count"": 482792375
    },
    ...
  ],
  ""vaccination_by_gender"": [
    {
      ""count"": 4809680,
      ""gender"": ""Male""
    },
    ...
  ]
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cowin-dashbaord-component-structure-breakdown.png"" alt=""component-breakdown-structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/CowinDashboard/index.js`
- `src/components/CowinDashboard/index.css`
- `src/components/VaccinationCoverage/index.js`
- `src/components/VaccinationCoverage/index.css`
- `src/components/VaccinationByGender/index.js`
- `src/components/VaccinationByGender/index.css`
- `src/components/VaccinationByAge/index.js`
- `src/components/VaccinationByAge/index.css`

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Wrap the Loader component with an HTML container element and add the `data-testid` attribute value as `loader` to it

  ```jsx
  <div data-testid=""loader"">
    <Loader type=""ThreeDots"" color=""#ffffff"" height={80} width={80} />
  </div>
  ```

- Provide `width` and `height` to the respective chart component to make the charts visible on the page <br> For example:

  ```jsx
  <BarChart width={1000} height={300} />
  ```

  - Provide `width` and `height` as **number**

  - Achieve this CoWIN Dashboard on desktop devices. You can try different charts provided by the `recharts` package with customized data

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/api-failure-view.png](https://assets.ccbp.in/frontend/react-js/api-failure-view.png) alt should be **failure view**
- [https://assets.ccbp.in/frontend/react-js/cowin-logo.png](https://assets.ccbp.in/frontend/react-js/cowin-logo.png) alt should be **website logo**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #161625; width: 150px; padding: 10px; color: white"">Hex: #161625</div>
<div style=""background-color: #2cc6c6; width: 150px; padding: 10px; color: black"">Hex: #2cc6c6</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #1c1c2b; width: 150px; padding: 10px; color: white"">Hex: #1c1c2b</div>
<div style=""background-color: #2d87bb; width: 150px; padding: 10px; color: black"">Hex: #2d87bb</div>
<div style=""background-color: #a3df9f; width: 150px; padding: 10px; color: black"">Hex: #a3df9f</div>
<div style=""background-color: #64c2a6; width: 150px; padding: 10px; color: black"">Hex: #64c2a6</div>
<div style=""background-color: #94a3b8; width: 150px; padding: 10px; color: black"">Hex: #94a3b8</div>
<div style=""background-color: #f54394; width: 150px; padding: 10px; color: black"">Hex: #f54394</div>
<div style=""background-color: #5a8dee; width: 150px; padding: 10px; color: black"">Hex: #5a8dee</div>
<div style=""background-color: #2cc6c6; width: 150px; padding: 10px; color: black"">Hex: #2cc6c6</div>
<div style=""background-color: #6c757d; width: 150px; padding: 10px; color: black"">Hex: #6c757d</div>
<div style=""background-color: #5a8dee; width: 150px; padding: 10px; color: black"">Hex: #5a8dee</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**.
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

TEST_1: Page should consist of an HTML image element with alt as ""website logo"" and src value as the given website logo URL.

TEST_2: Page should consist of an HTML main heading element with text content as ""CoWIN Vaccination in India.""

TEST_3: When the page is opened, an HTTP GET request should be made to the vaccinationDataApiUrl.

TEST_4: When the page is opened, an HTML container element with the data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress.

TEST_5: Page should consist of an HTML main heading element with text content as ""Vaccination Coverage.""

TEST_6: When the HTTP GET request made to vaccinationDataApiUrl is successful, the Bar chart for Vaccination Coverage should be displayed.

TEST_7: When the HTTP GET request made to vaccinationDataApiUrl is successful, the Bar chart for Vaccination Coverage should be displayed along with the ""XAxis"" component.

TEST_8: When the HTTP GET request made to vaccinationDataApiUrl is successful, the Bar chart for Vaccination Coverage should be displayed along with the ""YAxis"" component.

TEST_9: When the HTTP GET request made to vaccinationDataApiUrl is successful, the Bar chart should display the ""Bars"" for the response.

TEST_10: Page should consist of an HTML main heading element with text content as ""Vaccination by gender.""

TEST_11: Page should consist of an HTML main heading element with text content as ""Vaccination by Age.""

TEST_12: When the HTTP GET request made to vaccinationDataApiUrl is successful, the Pie charts for Vaccination by gender and Vaccination by age should be displayed, respectively.

TEST_13: When the HTTP GET request made to vaccinationDataApiUrl is successful, the charts for Vaccination Coverage, Vaccination by gender, and Vaccination by age should display the chart legends using ""Legend"" components provided by recharts.

TEST_14: When the HTTP GET request is unsuccessful, the page should consist of an HTML image element with the alt attribute value as ""failure view"" and src as the given Failure view image URL.

TEST_15: When the HTTP GET request is unsuccessful, the page should consist of an HTML main heading element with text content as ""Something went wrong.""

"
c50f2ec550c54a9d975065e5db15df5f,cryptoCurrencyTracker,RJSCPUAF4D,/home/workspace/reactjs/coding-practices/cryptoCurrencyTracker,/home/workspace/.tmp/reactjs/coding-practices/cryptoCurrencyTracker/src,"In this project, let's build a **Cryptocurrency Tracker** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cryptocurrency-tracker-output.gif"" alt=""cryptocurrency-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/cryptocurrency-sm-success-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/cryptocurrency-lg-success-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the page is opened,
  - Make HTTP GET request to the **cryptocurrenciesApiUrl**
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the updated list of cryptocurrencies should be displayed

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**cryptocurrenciesApiUrl**

#### API: `https://apis.ccbp.in/crypto-currency-converter`

#### Method: `GET`

#### Description:

Returns a response containing the list of cryptocurrencies

#### Response

```json
[
  {
    ""currency_name"": ""Bitcoin"",
    ""usd_value"": ""46750.63"",
    ""euro_value"": ""39596.07"",
    ""id"": ""6e937df9-1345-4c2f-8ace-babff0e5108f"",
    ""currency_logo"": ""https://www.cryptocompare.com/media/19633/btc.png""
  },
  ...
]
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cryptocurrency-component-breakdown-structure.png"" alt=""cryptocurrency component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/CryptocurrencyTracker/index.js`
- `src/components/CryptocurrencyTracker/index.css`
- `src/components/CryptocurrenciesList/index.js`
- `src/components/CryptocurrenciesList/index.css`
- `src/components/CryptocurrencyItem/index.js`
- `src/components/CryptocurrencyItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- To display the animated loader, we need to import the `Loader` component using the below statement

  ```jsx
  import Loader from 'react-loader-spinner'
  ```

- In order to display the given animated loader, pass the `type` and `color` props to the `Loader` component with values as **Rings** and **#ffffff**, respectively

  ```jsx
  <Loader type=""Rings"" color=""#ffffff"" height={80} width={80} />
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The cryptocurrencies should have the alt as the value of the key `currency_name` from each cryptocurrency object received in response
- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as `loader` to it as shown below

  ```jsx
  <div data-testid=""loader"">
    <Loader type=""Rings"" color=""#ffffff"" height={80} width={80} />
  </div>
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/cryptocurrency-bg.png](https://assets.ccbp.in/frontend/react-js/cryptocurrency-bg.png) alt should be **cryptocurrency**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #00e7ff; width: 150px; padding: 10px; color: black"">Hex: #00e7ff</div>
<div style=""background-color: #092e33; width: 150px; padding: 10px; color: white"">Hex: #092e33</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

TEST_1: Page should consist of at least two HTML list items, and the cryptocurrencies data should be rendered using a unique key as a prop for each cryptocurrency item.

TEST_2: When the page is loaded, an HTTP GET request should be made to the given apiUrl.

TEST_3: When the HTTP GET request is made to the apiUrl, the page should consist of an HTML container element with data-testid attribute value as ""loader.""

TEST_4: When the HTTP GET request to the apiUrl is successful, the HTML container element with data-testid attribute value as ""loader"" should be removed.

TEST_5: When the HTTP GET request to the apiUrl is successful, the page should consist of an HTML main heading element with text content as ""Cryptocurrency Tracker.""

TEST_6: When the HTTP GET request to the apiUrl is successful, the page should consist of an HTML image element with alt value ""cryptocurrency"" and src value as the URL for the cryptocurrency image.

TEST_7: Each Cryptocurrency list item should consist of an HTML image element with alt value equal to the ""currency_name"" value and src value equal to the ""currency_logo"" value received in response.

TEST_8: Each Cryptocurrency list item should consist of an HTML paragraph element with text content equal to the ""currency_name"" value received in response.

TEST_9: Each Cryptocurrency list item should consist of an HTML paragraph element with text content equal to the ""usd_value"" value received in response.

TEST_10: Each Cryptocurrency list item should consist of an HTML paragraph element with text content equal to the ""euro_value"" value received in response.

TEST_11: When the HTTP GET request to the apiUrl is successful, the page should consist of HTML image elements with alt value equal to the ""currency_name"" value and src value equal to the ""currency_logo"" value received in response.

TEST_12: When the HTTP GET request to the apiUrl is successful, the page should consist of HTML paragraph elements with text content equal to the ""currency_name"" value received in response.

TEST_13: When the HTTP GET request to the apiUrl is successful, the page should consist of HTML paragraph elements with text content equal to the ""usd_value"" value received in response.

TEST_14: When the HTTP GET request to the apiUrl is successful, the page should consist of HTML paragraph elements with text content equal to the ""euro_value"" value received in response.

"
e34081639da3447fae0ddaf4654ddd56,destinationSearch,RJSCPZ6HLZ,/home/workspace/reactjs/coding-practices/destinationSearch,/home/workspace/.tmp/reactjs/coding-practices/destinationSearch/src,"In this project, let's build a **Destination Search** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/destination-search-output-v2.gif"" alt=""destination search output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/destination-search-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/destination-search-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, all destinations in the `destinationsList` should be displayed
- When a value is provided in the search input, only the destinations whose names contain the value provided in the search input should be displayed irrespective of the case
- The `DestinationSearch` component receives the `destinationsList` as a prop. It consists of a list of destination objects with the following properties in each destination object

  |  Key   | Data Type |
  | :----: | :-------: |
  |   id   |  Number   |
  |  name  |  String   |
  | imgUrl |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/destination-search-component-structure-v2-img.png"" alt=""destination search component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/DestinationSearch/index.js`
- `src/components/DestinationSearch/index.css`
- `src/components/DestinationItem/index.js`
- `src/components/DestinationItem/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The search for the destination should be case insensitive. You can use the `toLowerCase` method to convert a string into lower case letters.

  ```js
  const text = 'Learn JavaScript'
  console.log(text.toLowerCase()); // learn javascript
  ```

- Each `DestinationItem` should have an HTML image element with `alt` attribute value as the value of the key **name** in `destinationsList`

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/destinations-search-icon-img.png](https://assets.ccbp.in/frontend/react-js/destinations-search-icon-img.png) alt should be **search icon**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #252627; width: 150px; padding: 10px; color: white"">Hex: #252627</div>
<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto
- Open Sans

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: Page should consist of at least two HTML list items and the destinationsList should be rendered using a unique key as a prop for each destination item,
TEST_2: Page should consist of HTML main heading element with text content as ""Destination Search"",
TEST_3: Page should consist of HTML input element with type attribute value as ""search"",
TEST_4: Page should consist of HTML image element with alt attribute value as ""search icon"" and src attribute value as the URL of the search icon,
TEST_5: Page should consist of HTML unordered list element to display the list of destinations,
TEST_6: Page should consist of at least twelve HTML list items to display destinations,
TEST_7: Page should consist of HTML image elements with alt attribute value as ""{name}"" and src attribute value as the value of the key ""imgUrl"" from destinationsList provided,
TEST_8: Page should consist of HTML paragraph elements with text content as the value of the key ""name"" from destinationsList provided,
TEST_9: When a non-empty search text ""es"" is provided in search input, only the destinations whose names contain the value provided in the search input should be displayed irrespective of the case"
a86d055cdaf04d36a6c8bcb13ee64c42,digitalTimerApp,RJSCPF77TH,/home/workspace/reactjs/coding-practices/digitalTimer,/home/workspace/.tmp/reactjs/coding-practices/digitalTimer/src,"In this project, let's build a **Digital Timer App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/digital-timer-output.gif"" alt=""digital timer output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"" />
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/digital-timer-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/digital-timer-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- The default timer limit value should be 25 minutes
- When the **Start** button is clicked,
  - The **Start** text should change to **Pause** text
  - The **play icon** should be replaced by **pause icon**
  - The **Timer** status should change to **Running**
  - The **Timer** should start running backwards from the timer limit value set
  - If the **Timer** has been paused after starting, it should resume from where it was paused
  - Both the **Plus** and **Minus** buttons should be disabled
- When the **Pause** button is clicked,
  - The **Pause** text should change to **Start** text
  - The **pause icon** should be replaced by **play icon**
  - The **Timer** should stop running backwards
  - The **Timer** status should change to **Paused**
  - Both the **Plus** and **Minus** buttons should be disabled
- When the button with the **Plus** symbol is clicked,
  - The timer limit value should be incremented by one minute
  - The **Timer** should display time with the increased timer limit value
- When the button with the **Minus** symbol is clicked,
  - The timer limit value should be decremented by one minute
  - The **Timer** should display time with the decreased timer limit value
- When the timer limit value is modified by clicking the **Plus** or **Minus** button and the **Start** button is clicked, then the **Timer** should start with the modified timer value
- When the **Timer** ends (displays **00:00**)
  - The **Pause** text should change to **Start** text
  - The **pause icon** should be replaced by **play icon**
  - The **Timer** should stop running backwards
  - The **Timer** status should change to **Paused**
- After completion of **Timer**, when the **Start** button is clicked,
  - The **Start** text should change to **Pause** text
  - The **play icon** should be replaced by **pause icon**
  - The **Timer** should start running backwards from the current timer limit value.
  - The **Timer** status should change to **Running**
- When the **Reset** button is clicked, then
  - The **Pause** text should change to **Start** text
  - The **pause icon** should be replaced by **play icon**
  - The **Timer** should stop running backwards
  - The **Timer** status should change to **Paused**
  - Initial **Timer** limit value should be displayed
  - Both the **Plus** and **Minus** buttons should be enabled

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/DigitalTimer/index.js`
- `src/components/DigitalTimer/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
  <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use `Math.floor()` function that returns the **largest integer less than or equal to a given number**

  ```js
  console.log(Math.floor(5.95)); // output: 5
  ```

- You can use the `background-position` CSS property to set the starting position of a background image
  ```
  background-position: center;
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/digital-timer-elapsed-bg.png](https://assets.ccbp.in/frontend/react-js/digital-timer-elapsed-bg.png)
- [https://assets.ccbp.in/frontend/react-js/play-icon-img.png](https://assets.ccbp.in/frontend/react-js/play-icon-img.png) alt should be **play icon**
- [https://assets.ccbp.in/frontend/react-js/pause-icon-img.png](https://assets.ccbp.in/frontend/react-js/pause-icon-img.png) alt should be **pause icon**
- [https://assets.ccbp.in/frontend/react-js/reset-icon-img.png](https://assets.ccbp.in/frontend/react-js/reset-icon-img.png) alt should be **reset icon**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #cffcf1 ; width: 150px; padding: 10px; color: black"">Hex: #cffcf1</div>
<div style=""background-color: #1e293b ; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #0f172a ; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #defafe ; width: 150px; padding: 10px; color: black"">Hex: #defafe</div>
<div style=""background-color: #00d9f5 ; width: 150px; padding: 10px; color: white"">Hex: #00d9f5</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:
TEST_1: Page should consist of HTML heading element with text content as ""Digital Timer"",
TEST_2: Page should initially consist of HTML heading element with text content as Timer limit value ""25:00"",
TEST_3: Page should initially consist of HTML paragraph element with text content as ""Paused"",
TEST_4: Page should consist of HTML image element with src attribute value as the URL for Play icon and alt text as ""play icon"",
TEST_5: Page should consist of HTML button element with text content as ""Start"",
TEST_6: Page should consist of HTML image element with src attribute value as the URL for Reset icon and alt text as ""reset icon"",
TEST_7: Page should consist of HTML button element with text content as ""Reset"",
TEST_8: Page should consist of HTML paragraph element with text content as ""Set Timer limit"",
TEST_9: Page should consist of HTML paragraph element with text content as ""25"",
TEST_10: Page should consist of HTML button element with text content as ""+"" (plus),
TEST_11: Page should consist of HTML button element with text content as ""-"" (minus),
TEST_12: When clicked on Start button the page should consist of HTML button element with text content as ""Pause"" by replacing the ""Start"",
TEST_13: When clicked on Start button the page should consist of HTML image element with src as URL for pause icon and alt text as ""pause icon"",
TEST_14: When clicked on Start button the Timer should start running backward and the page should consist of HTML heading element with text content displaying the elapsed time,
TEST_15: When clicked on Start button the page should consist of HTML paragraph element with text content as ""Running"" by replacing the ""Paused"" text,
TEST_16: When clicked on Pause button the page should consist of HTML button element with text content as ""Start"" by replacing the ""Pause"" text,
TEST_17: When clicked on Pause button the page should consist of HTML image element with src as URL for play icon and alt text as ""play icon"",
TEST_18: When clicked on Pause button the Timer should stop running backward and the page should consist of HTML heading element with text content displaying the remaining time,
TEST_19: When clicked on Pause button the page should consist of HTML paragraph element with text content as ""Paused"" by replacing the ""Running"" text,
TEST_20: When clicked on Start button after pausing the timer then the Timer should start again,
TEST_21: When the timer is started and Reset button is clicked the timer should stop and reset to default value,
TEST_22: When the HTML button element with ""+"" as text content is clicked then the timer limit value should be incremented by one,
TEST_23: When the HTML button element with ""-"" as text content is clicked then the timer limit value should be decremented by one,
TEST_24: When the Timer is running and the HTML button with text content as ""+"" is clicked then the timer limit value should not increase,
TEST_25: When the Timer is running and the HTML button with text content as ""-"" is clicked then the timer limit value should not decrease
```"
646f8e922b604b48b11efebd08bc64c4,faqsApp,RJSCPC7UBX,/home/workspace/reactjs/coding-practices/faqsApp,/home/workspace/.tmp/reactjs/coding-practices/faqsApp/src,"In this project, let's build a **Faqs App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/faqs-output-v3.gif"" alt=""faqs-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"" />
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), Medium (Size >= 768px)](https://assets.ccbp.in/frontend/content/react-js/faqs-sm-output-v2.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/faqs-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the plus icon is clicked in a FAQ
  - The answer to the FAQ should be visible to the user
  - The plus icon should change to a minus icon
- When the minus icon is clicked in a FAQ
  - The answer to the FAQ should be hidden to the user
  - The minus icon should change to a plus icon
- The `Faqs` component receives the `faqsList` as a prop. It consists of a list of faq objects with the following properties in each faq object

  |     Key      | Data Type |
  | :----------: | :-------: |
  |      id      |  Number   |
  | questionText |  String   |
  |  answerText  |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/faqs-component-structure-breakdown.png"" alt=""faqs-component-structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Faqs/index.js`
- `src/components/Faqs/index.css`
- `src/components/FaqItem/index.js`
- `src/components/FaqItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/faqs-plus-icon-img.png](https://assets.ccbp.in/frontend/react-js/faqs-plus-icon-img.png) alt should be **plus**
- [https://assets.ccbp.in/frontend/react-js/faqs-minus-icon-img.png](https://assets.ccbp.in/frontend/react-js/faqs-minus-icon-img.png) alt should be **minus**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #cb8805; width: 150px; padding: 10px; color: white"">Hex: #cb8805</div>
<div style=""background-color: #52606d; width: 150px; padding: 10px; color: white"">Hex: #52606d</div>
<div style=""background-color: #9aa5b1; width: 150px; padding: 10px; color: white"">Hex: #9aa5b1</div>

#### Border Colors

<div style=""background-color: #d7dae6; width: 150px; padding: 10px; color: black"">Hex: #d7dae6</div>
<div style=""background-color: #e4e7eb; width: 150px; padding: 10px; color: black"">Hex: #e4e7eb</div>

#### Background Colors

<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #f1f5f8; width: 150px; padding: 10px; color: black"">Hex: #f1f5f8</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:
TEST_1: Page should consist of at least two HTML list items and the faqsList should be rendered using a unique key as a prop for each FAQ item,
TEST_2: Each FAQ item should consist of an HTML main heading element with text content equal to the ""question"" value of the FAQ item in faqsList provided,
TEST_3: When the plus icon in a FAQ item is clicked, then the HTML paragraph element with text content equal to the ""answer"" value in faqsList provided should be displayed,
TEST_4: When the plus icon in a FAQ item is clicked, then the plus icon should be replaced with an HTML image element with alt as ""minus"" and src value as the URL for the minus icon,
TEST_5: When the minus icon in a FAQ item is clicked, then the HTML paragraph element with text content equal to the ""answer"" value in faqsList provided should be hidden,
TEST_6: When the minus icon in a FAQ item is clicked, then the minus icon should be replaced with an HTML image element with alt as ""plus"" and src value as the URL for the plus icon,
TEST_7: Page should consist of at least four HTML image elements with alt as ""plus"" and src value as the URL for the plus icon,
TEST_8: Page should consist of all FAQs in faqsList provided
```"
31e34fc426a4407881bd7347980c8823,feedbackApp,RJSCPCMJQ7,/home/workspace/reactjs/coding-practices/feedbackApp,/home/workspace/.tmp/reactjs/coding-practices/feedbackApp/src,"In this project, let's build a **Feedback App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/feedback-app-output-v2.gif"" alt=""feedback-large-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/feedback-app-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Feedback Question](https://assets.ccbp.in/frontend/content/react-js/feedback-app-question-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Thank You Screen](https://assets.ccbp.in/frontend/content/react-js/feedback-app-summary-lg-output-v2.png)
</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an emoji is clicked, then the thank you screen should be displayed
- The `Feedback` component receives the `resources` as a prop. It consists of the following properties

  |     Key      |    Data Type     |
  | :----------: | :--------------: |
  |    emojis    | Array \<object\> |
  | loveEmojiUrl |      String      |

- `emojis` consists of list of emoji objects with the following properties in each emoji object

  |   Key    | Data Type |
  | :------: | :-------: |
  |    id    |  Number   |
  |   name   |  String   |
  | imageUrl |  String   |

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Feedback/index.js`
- `src/components/Feedback/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The love emoji should have the alt as **love emoji**
- The emojis should have the alt equal to `name` value in each emoji object

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffeeee; width: 150px; padding: 10px; color: black"">Hex: #ffeeee</div>
<div style=""background-color: #ffc0bb; width: 150px; padding: 10px; color: black"">Hex: #ffc0bb</div>
<div style=""background-color: #ffebeb; width: 150px; padding: 10px; color: black"">Hex: #ffebeb</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: Page should consist of at least two HTML list items and the emojis should be rendered using a unique key as a prop for each emoji.

TEST_2: Page should consist of an HTML heading element with text content as ""How satisfied are you with our customer support performance"".

TEST_3: Page should consist of HTML image elements with alt value equal to the ""name"" value and src value equal to the ""imageUrl"" value in resources provided.

TEST_4: When the user clicks an emoji, then the page should consist of an HTML main heading element with text content as ""Thank You"".

TEST_5: When the user clicks an emoji, then the page should consist of an HTML image element with alt value as ""love emoji"" and src equal to the ""loveEmojiUrl"" value in resources provided."
28c8e132753849f798495bc1c15a2763,fruitsCounter,RJSCPXAS42,/home/workspace/reactjs/coding-practices/fruitsCounter,/home/workspace/.tmp/reactjs/coding-practices/fruitsCounter/src,"In this project, let's build a **Fruits Counter** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/fruits-counter-output.gif"" alt=""fruits-counter"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/fruits-counter-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/fruits-counter-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the count of the eaten mangoes and bananas should be 0
- When **Eat Mango** is clicked the count of the mangoes eaten should be incremented by 1
- When **Eat Banana** is clicked the count of the bananas eaten should be incremented by 1

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/FruitsCounter/index.js`
- `src/components/FruitsCounter/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- **State updates are merged**. It means that when you update only one key-value pair in the `state` object, it will not affect the other key-value pairs in the state object.

  For example let's say your state is as followed:

  ```
  state = { key1 : value1, key2 : value2 }
  ```

  If you use this.setState such as :

  ```
  this.setState(prevState => ({key1: prevState + valueN}))
  ```

  Your new state will be :

  ```
  state = { key1 : value3, key2 : value2 }
  ```

- You can use the below cursor CSS property for buttons to set the type of mouse cursor, to show when the mouse pointer is over an element,

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below outline CSS property for buttons and input elements to remove the highlighting when the elements are clicked,

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/mango-img.png](https://assets.ccbp.in/frontend/react-js/mango-img.png) alt should be **mango**
- [https://assets.ccbp.in/frontend/react-js/banana-img.png](https://assets.ccbp.in/frontend/react-js/banana-img.png) alt should be **banana**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffd569 ; width: 150px; padding: 10px; color: black"">Hex: #ffd569</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #000000 ; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #007bff ; width: 150px; padding: 10px; color: white"">Hex: #007bff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:
TEST_1: Page should initially consist of an HTML main heading element with text content as ""Bob ate 0 mangoes 0 bananas"",
TEST_2: Page should consist of an HTML image element with alt attribute value as ""mango"",
TEST_3: Page should consist of an HTML image element with alt attribute value as ""banana"",
TEST_4: Page should consist of an HTML button element with text content as ""Eat Banana"",
TEST_5: Page should consist of an HTML button element with text content as ""Eat Mango"",
TEST_6: When the ""Eat Mango"" button is clicked, the count of the mangoes eaten should be incremented by one,
TEST_7: When the ""Eat Banana"" button is clicked, the count of the bananas eaten should be incremented by one
```"
2d09a228926143a3bf993f77fcd8ace7,galleryApp,RJSCPF54VJ,/home/workspace/reactjs/coding-practices/galleryApp,/home/workspace/.tmp/reactjs/coding-practices/galleryApp/src,"In this project, let's build a **Gallery App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/gallery-output.gif"" alt=""gallery-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/gallery-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/gallery-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the first image in the list should be displayed
- When the user clicks on a thumbnail, then the corresponding image should be displayed
- The `Gallery` component is provided with `imagesList`. It consists of a list of image details objects with the following properties in each object

  |       Key        | Data Type |
  | :--------------: | :-------: |
  |        id        |  Number   |
  |     imageUrl     |  String   |
  |   thumbnailUrl   |  String   |
  |   imageAltText   |  String   |
  | thumbnailAltText |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/gallery-app-component-breakdown-structure.png"" alt=""gallery app component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Gallery/index.js`
- `src/components/Gallery/index.css`
- `src/components/ThumbnailItem/index.js`
- `src/components/ThumbnailItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the CSS `opacity` property to set the degree to which content behind an element is hidden. It accepts a value in the range of 0.0 to 1.0 inclusive

  ```
  opacity: 0.5;
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The selected image should have the alt as the value of the key `imageAltText` from each image details object provided
- The thumbnail images should have the alt as values of the key `thumbnailAltText` from each image details object provided
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop to display thumbnail items from imagesList,
TEST_2: Page should initially consist of an HTML image element with alt attribute equal to the ""imageAltText"" and src attribute equal to the ""imageUrl"" of the first object in imagesList provided,
TEST_3: Page should consist of an HTML main heading element with text content as ""Nature Photography"" and an HTML paragraph element with text content as ""Nature Photography by Rahul"",
TEST_4: Page should consist of an HTML unordered list element to display the thumbnails,
TEST_5: Page should consist of at least eight HTML button elements, each inside an HTML list item,
TEST_6: Page should consist of at least eight HTML image elements with alt attribute equal to the ""thumbnailAltText"" and src attribute equal to the ""thumbnailUrl"" from imagesList provided,
TEST_7: When a thumbnail image is clicked, the active image should have alt attribute equal to the ""imageAltText"" and src attribute equal to the ""imageUrl"" of the thumbnail clicked
```"
0a375d385c074acd9d1c3e020144d7bf,githubPopularRepos,RJSCPYR39R,/home/workspace/reactjs/coding-practices/githubPopularRepos,/home/workspace/.tmp/reactjs/coding-practices/githubPopularRepos/src,"In this project, let's build a **Github Popular Repos** by applying the concepts we have learned till now.

### Refer to the images below:

 <br/>
 <div style=""text-align: center;"">
     <img src=""https://assets.ccbp.in/frontend/content/react-js/github-popular-repos-output.gif"" alt=""github popular repos output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
 </div>
 <br/>

**Failure View**

 <div style=""text-align: center;"">
     <img src=""https://assets.ccbp.in/frontend/content/react-js/github-popular-repos-error-view-output.gif"" alt=""github popular repos failure view output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
 </div>
 <br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/github-repos-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Success](https://assets.ccbp.in/frontend/content/react-js/github-repos-lg-success-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Loading](https://assets.ccbp.in/frontend/content/react-js/github-repos-lg-loading-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Failure](https://assets.ccbp.in/frontend/content/react-js/github-repos-error-view-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the app is opened initially,
  - An HTTP GET request should be made to **githubReposApiUrl** with query parameter as `language` and its initial value as `ALL`
  - **_loader_** should be displayed while fetching the data
  - After the data is fetched successfully, display the repositories list received from the response

- When a language filter is active
  - An HTTP GET request should be made to the above-mentioned URL with the `id` of the active language
  - **_loader_** should be displayed while fetching the data
  - After the data is fetched successfully, display the repositories list received from the response

- The `GithubPopularRepos` component is provided with `languageFiltersData`. It consists of a list of language filter objects with the following properties in each language filter object

  |   Key    | Data Type |
  | :------: | :-------: |
  |    id    |   String  |
  | language |   String  |

</details>

<details>

<summary>API Requests & Responses</summary>
<br>

**githubReposApiUrl**

#### API: `https://apis.ccbp.in/popular-repos`

#### Example: `https://apis.ccbp.in/popular-repos?language=ALL`

#### Method: `GET`

#### Description:

Returns a response containing the list of repositories

#### Response

```json
{
  ""popular_repos"": [
    {
	  ""name"": ""freeCodeCamp"",
      ""id"": 28457823,
      ""issues_count"": 154,
      ""forks_count"": 26651,
      ""stars_count"": 331304,
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/9892522?v=4""
    },
      ...
  ],
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/github-popular-repos-component-breakdown-structure.png"" alt=""component-breakdown-structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/GithubPopularRepos/index.js`
- `src/components/GithubPopularRepos/index.css`
- `src/components/LanguageFilterItem/index.js`
- `src/components/LanguageFilterItem/index.css`
- `src/components/RepositoryItem/index.js`
- `src/components/RepositoryItem/index.css`
</details>

### Quick Tips

<details close>
<summary>Click to view</summary>
<br>

- To display the animated loader, we need to import the `Loader` component using the below statement

  ```jsx
  import Loader from 'react-loader-spinner'
  ```
- In order to display the given animated loader, pass the `type` and `color` props to the `Loader` component with values as **ThreeDots** and **#0284c7**, respectively

  ```jsx
  <Loader type=""ThreeDots"" color=""#0284c7"" height={80} width={80} />
  ```
    <br/>  
  </details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as **loader** to it

  ```jsx
  <div data-testid=""loader"">
    <Loader type=""ThreeDots"" color=""#0284c7"" height={80} width={80} />
  </div>
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/stars-count-img.png](https://assets.ccbp.in/frontend/react-js/stars-count-img.png) alt should be **stars**
- [https://assets.ccbp.in/frontend/react-js/forks-count-img.png](https://assets.ccbp.in/frontend/react-js/forks-count-img.png) alt should be **forks**
- [https://assets.ccbp.in/frontend/react-js/issues-count-img.png](https://assets.ccbp.in/frontend/react-js/issues-count-img.png) alt should be **open issues**
- [https://assets.ccbp.in/frontend/react-js/api-failure-view.png](https://assets.ccbp.in/frontend/react-js/api-failure-view.png) alt should be **failure view**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #0284c7; width: 150px; padding: 10px; color: white"">Hex: #0284c7</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #f8f8ff; width: 150px; padding: 10px; color: black"">Hex: #f8f8ff</div>
<div style=""background-color: #e73959; width: 150px; padding: 10px; color: white"">Hex: #e73959</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto
- Lobster

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the languageFiltersData and the repositories list received from the response should be rendered using a unique key as a prop for each language filter item and repository item respectively.
TEST_2: JSX code implementation in the component GithubPopularRepos should consist of import statement for Loader component from the package react-loader-spinner.
TEST_3: Page should consist of an HTML heading element with ""Popular"" as text content.
TEST_4: Page should consist of HTML button elements with text content as the value of key ""language"" from the language filter items.
TEST_5: When the page is opened, an HTTP GET request should be made to githubReposApiUrl.
TEST_6: When the page is opened initially, an HTTP GET request should be made with ""ALL"" as the value to query parameter ""language"".
TEST_7: When a language filter button is clicked, an HTTP GET request should be made with the id of the languageFilter as value to query parameter ""language"".
TEST_8: When the page is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress.
TEST_9: When the HTTP GET request is successful, then the page should consist of at least four HTML image elements to display avatar_url, star icon URL, forks icon URL, and issues icon URL.
TEST_10: When the HTTP GET request is successful, then the page should consist of HTML image elements with alt as the value of the key ""name"" and src as the value of key ""avatar_url"" in popular_repos from the repositories received from the response.
TEST_11: When the HTTP GET request is successful, then the page should consist of an HTML image elements with alt as ""stars"" and src as given star icon URL.
TEST_12: When the HTTP GET request is successful, then the page should consist of an HTML image elements with alt as ""forks"" and src as given forks icon URL.
TEST_13: When the HTTP GET request is successful, then the page should consist of an HTML image elements with alt as ""open issues"" and src as given issues icon URL.
TEST_14: When the HTTP GET request is successful, then the page should consist of an HTML main heading element with text content as the value of the key ""name"" in each item from the repositories received from the response.
TEST_15: When the HTTP GET request is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""stars_count"" in each item from the repositories received from the response.
TEST_16: When the HTTP GET request is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""forks_count"" in each item from the repositories received from the response.
TEST_17: When the HTTP GET request is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""issues_count"" in each item from the repositories received from the response.
```"
f938020c49df48649081328ac265726b,googleSearchSuggestions,RJSCPEAC7M,/home/workspace/reactjs/coding-practices/googleSearchSuggestions,/home/workspace/.tmp/reactjs/coding-practices/googleSearchSuggestions/src,"In this project, let's build a **Google Search Suggestions** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/google-search-suggestions-output.gif"" alt=""google search suggestions output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/google-search-suggestions-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/google-search-suggestions-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, all suggestions in the `suggestionsList` should be displayed
- When a value is provided in the search input, then display the suggestions which includes the search input irrespective of case
- When the arrow of a suggestion is clicked, then the value of the search input should be updated with the respective suggestion clicked
- The `GoogleSuggestions` component receives the `suggestionsList` as a prop. It consists of a list of suggestion objects with the following properties in each suggestion object

  |    Key     | Data Type |
  | :--------: | :-------: |
  |     id     |  Number   |
  | suggestion |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/google-search-suggestions-component-structure-breakdown.png"" alt=""google search suggestions component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/GoogleSuggestions/index.js`
- `src/components/GoogleSuggestions/index.css`
- `src/components/SuggestionItem/index.js`
- `src/components/SuggestionItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/google-logo.png](https://assets.ccbp.in/frontend/react-js/google-logo.png) alt should be **google logo**
- [https://assets.ccbp.in/frontend/react-js/google-search-icon.png](https://assets.ccbp.in/frontend/react-js/google-search-icon.png) alt should be **search icon**
- [https://assets.ccbp.in/frontend/react-js/diagonal-arrow-left-up.png](https://assets.ccbp.in/frontend/react-js/diagonal-arrow-left-up.png) alt should be **arrow**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #bfbfbf; width: 150px; padding: 10px; color: white"">Hex: #bfbfbf</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:
TEST_1: Page should consist of at least two HTML list items and the suggestionsList should be rendered using a unique key as a prop for each suggestion item,
TEST_2: Page should consist of HTML image element with alt attribute value as ""google logo"" and src attribute value as URL for google logo,
TEST_3: Page should consist of HTML image element with alt attribute value as ""search icon"" and src attribute value as URL for search icon,
TEST_4: Page should consist of HTML input element with type attribute value as ""search"",
TEST_5: Page should consist of HTML unordered list element to display the list of suggestions received from suggestionsList,
TEST_6: Page should consist of at least six HTML list items to display the list of suggestions received from suggestionsList,
TEST_7: Page should initially consist of HTML paragraph elements with text content as the values of the key ""suggestion"" from the suggestionsList provided,
TEST_8: Page should consist of at least six HTML image elements with alt attribute value as ""arrow"" and src attribute value as the URL for arrow icon,
TEST_9: When a value is provided in the search input field, the suggestions should be filtered irrespective of the case,
TEST_10: When the arrow of a suggestion is clicked, the value inside the search input should be updated to the respective suggestion that has been clicked
```"
ca8c24707fd84518a1ec1d26115f0acd,gradientGenerator,RJSCP13IIH,/home/workspace/reactjs/coding-practices/gradientGenerator,/home/workspace/.tmp/reactjs/coding-practices/gradientGenerator/src,"In this project, let's build a **Gradient Generator** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/gradient-generator-output-v0.gif"" alt=""gradient-generator"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/gradient-generator-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/gradient-generator-lg-output-v0.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the selected gradient direction should be the first value in the given `gradientDirectionsList`
- The initial values for the HTML input elements with type color should be **#8ae323** and **#014f7b** respectively
- When the values are provided for both the input elements with type color, then provided values should be the text content for the respective paragraph elements
- When the **Generate** button is clicked after selecting the direction and picking the colors, the background of the app should have a linear gradient with the selected direction and colors provided

- The `GradientGenerator` component will consist `gradientDirectionsList`. It consists of a list of gradient directions objects with the following properties in each gradient directions object

  |    Key      | Data Type |
  | :--------:  | :-------: |
  | directionId |  String   |
  |    value    |  String   |
  | displayText |  string   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/gradient-generator-component-breakdown-structure.png"" alt=""gradetient-generator-component-breakdown-structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/GradientGenerator/index.js`
- `src/components/GradientGenerator/styledComponents.js`
- `src/components/GradientDirectionItem/index.js`
- `src/components/GradientDirectionItem/styledComponents.js`
</details>

### Quick Tips

<details close>
<summary>Click to view</summary>
<br>

- The HTML input element with the type **color** is designed for the user to select the **color** from a color picker.

  ```jsx
  <input type=""color"" />
  ```

- You can use the CSS **opacity** property to set the degree of transparency of an element. It has a value in the range of 0 to 1 inclusive.

  ```
   opacity: 0.5;
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The HTML container element for the linear gradient values are applied should have `data-testid` as **gradientGenerator**
- When a gradient direction button is active then the button should have the CSS property opacity with the value **1**
- When a gradient direction button is inactive then the button should have the CSS property opacity with the value **0.5**

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #8ae323; width: 150px; padding: 10px; color: black"">Hex: #8ae323</div>
<div style=""background-color: #014f7b; width: 150px; padding: 10px; color: white"">Hex: #014f7b</div>
<div style=""background-color: #ededed; width: 150px; padding: 10px; color: black"">Hex: #ededed</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #ffffff79; width: 150px; padding: 10px; color: black"">Hex: #ffffff79</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #00c9b7; width: 150px; padding: 10px; color: black"">Hex: #00c9b7</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the gradientDirectionsList should be rendered using a unique key as a prop for each gradientDirection item respectively,
TEST_2: Page should consist of an HTML main heading element with text content starting with ""Generate a CSS Color Gradient"",
TEST_3: Page should consist of HTML paragraph element with text content as ""Choose Direction"",
TEST_4: Page should consist of HTML unordered list element to display the list of gradient directions,
TEST_5: Page should consist of at least four HTML list items to display the gradient directions,
TEST_6: Page should consist of HTML button elements with text content as values of the key ""displayText"" of each item in gradientDirectionsList provided,
TEST_7: Page should consist of HTML paragraph element with text content as ""Pick the Colors"",
TEST_8: Page should initially consist of HTML paragraph element with text content as ""#8ae323"",
TEST_9: Page should initially consist of HTML paragraph element with text content as ""#014f7b"",
TEST_10: Page should consist of two HTML input elements with HTML type attribute and value as ""color"",
TEST_11: Page should consist of HTML button element with text content as ""Generate"",
TEST_12: When a value is provided in the first HTML input element with type attribute value as ""color"", then the value provided should be updated in the value of the input element,
TEST_13: When a value is provided in the second HTML input element with type attribute value as ""color"", then the value provided should be updated in the value of the input element,
TEST_14: Page should consist of HTML container element with data-testid as ""gradientGenerator"",
TEST_15: The HTML container element with data-testid as ""gradientGenerator"" should initially have the linear gradient direction as ""top"",
TEST_16: When the gradient direction button is clicked, the active gradient direction button should have CSS property opacity with the value of 1,
TEST_17: When the gradient direction button is inactive, it should have CSS property opacity with the value of 0.5,
TEST_18: When the gradient direction and ""Generate"" button are clicked, then the active direction should be applied as the direction to the linear-gradient for the HTML container element with data-testid as ""gradientGenerator"",
TEST_19: When a value is provided in the first HTML input element with type attribute value as ""color"" and the ""Generate"" button is clicked, then the provided color should be applied as the first color to the linear-gradient for the HTML container element with data-testid as ""gradientGenerator"",
TEST_20: When a value is provided in the second HTML input element with type attribute value as ""color"" and the ""Generate"" button is clicked, then the provided color should be applied as the second color to the linear-gradient for the HTML container element with data-testid as ""gradientGenerator""
```"
c3fde2fb66224cacaa59b0d3b0e16ada,hamburgerMenu,RJSCPN3E00,/home/workspace/reactjs/coding-practices/hamburgerMenu,/home/workspace/.tmp/reactjs/coding-practices/hamburgerMenu/src,"In this project, let's build a **Hamburger Menu** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-output-v0.gif"" alt=""hamburger menu output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-about-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-home-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - About](https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-about-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Menu](https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-popup-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Not Found](https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-not-found-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the Home Route should be displayed
- When hamburger icon button in the header is clicked, then the popup should be opened
  <div style=""text-align: center;"">
      <img src=""https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-popup-img.png"" alt=""popup"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
  </div>
  <br/>
- When the **Home** is clicked, then the page should be navigated to the Home Route
- When the **About** is clicked, then the page should be navigated to the About Route
- When the close button is clicked, then the popup should be closed
- When the website logo in the Header is clicked, then the page should be navigated to the Home Route

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-component-structure-breakdown-home.png"" alt=""component structure breakdown home"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/hamburger-menu-component-structure-breakdown-about.png"" alt=""component structure breakdown about"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/Header/index.js`
- `src/components/Header/index.css`
- `src/components/Home/index.js`
- `src/components/Home/index.css`
- `src/components/About/index.js`
- `src/components/About/index.css`
- `src/components/NotFound/index.js`
- `src/components/NotFound/index.css`
</details>

### Quick Tips

<details close>
<summary>Click to view</summary>
<br>

To build this project, take a look at the <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=b01fca1c-aa5c-4d79-b81e-0220e7649bd0&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Popup</a> reading material

- To style popup content use `.popup-content` class

```jsx
<Popup
  modal
  trigger={
    //write code here
  }
  className=""popup-content""
>
  //write code here
</Popup>
```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` Route should consist of `/` in the URL path
- `About` Route should consist of `/about` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`
- The hamburger icon button should have the `data-testid` as **hamburgerIconButton**
- The close button in the popup should have the `data-testid` as **closeButton**
- `GiHamburgerMenu` from react-icons should be used for **Hamburger Icon** in the Header
- `IoMdClose` from react-icons should be used for **Close Icon** in the Popup
- `AiFillHome` from react-icons should be used for **Home Icon** in the Popup
- `BsInfoCircleFill` from react-icons should be used for **About Icon** in the Popup

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/hamburger-menu-website-logo.png](https://assets.ccbp.in/frontend/react-js/hamburger-menu-website-logo.png) alt should be **website logo**
- [https://assets.ccbp.in/frontend/react-js/home-sm-img.png](https://assets.ccbp.in/frontend/react-js/home-sm-img.png) alt should be **home**
- [https://assets.ccbp.in/frontend/react-js/home-lg-img.png](https://assets.ccbp.in/frontend/react-js/home-lg-img.png) alt should be **home**
- [https://assets.ccbp.in/frontend/react-js/about-sm-img.png](https://assets.ccbp.in/frontend/react-js/about-sm-img.png) alt should be **about**
- [https://assets.ccbp.in/frontend/react-js/about-lg-img.png](https://assets.ccbp.in/frontend/react-js/about-lg-img.png) alt should be **about**
- [https://assets.ccbp.in/frontend/react-js/not-found-img.png](https://assets.ccbp.in/frontend/react-js/not-found-img.png) alt should be **not found**

</details>

<details>
<summary>Colors</summary>

<br/>
<div style=""background-color: #dcdcdc; width: 150px; padding: 10px; color: black"">Hex: #dcdcdc</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #616e7c; width: 150px; padding: 10px; color: black"">Hex: #616e7c</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: About Route should consist of an HTML image element with alt attribute value as ""website logo"",
TEST_2: About Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given logo URL is wrapped with Link from react-router-dom,
TEST_3: Home Route should consist of an HTML button element with data-testid as ""hamburgerIconButton"",
TEST_4: About Route should consist of an HTML image element with alt attribute value as ""about"",
TEST_5: When the website logo in the Header is clicked, then the page should be navigated to Home Route,
TEST_6: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of Popup from reactjs-popup,
TEST_7: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"",
TEST_8: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of the HTML unordered list,
TEST_9: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of at least two HTML list items,
TEST_10: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page consists of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom,
TEST_11: About Route should consist of an HTML image element with src as the given About image URL,
TEST_12: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page consists of an HTML element with text content as ""About"" wrapped with Link from react-router-dom,
TEST_13: About Route should consist of an HTML image element with src as the given logo URL,
TEST_14: When the Home link in the Popup is clicked, then the page should be navigated to Home Route,
TEST_15: When the HTML button element with data-testid attribute value as ""closeButton"" is clicked inside the Popup, then the page should not consist of Popup from reactjs-popup,
TEST_16: Home Route should consist of an HTML image element with alt attribute value as ""website logo"",
TEST_17: Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given logo URL is wrapped with Link from react-router-dom,
TEST_18: Home Route should consist of an HTML button element with data-testid as ""hamburgerIconButton"",
TEST_19: JS code implementation for Header Component should use ""GiHamburgerMenu"" from the react-icons package,
TEST_20: JS code implementation for Header Component should use ""IoMdClose"" from the react-icons package,
TEST_21: JS code implementation for Header Component should use ""AiFillHome"" from the react-icons package,
TEST_22: JS code implementation for Header Component should use ""BsInfoCircleFill"" from the react-icons package,
TEST_23: Home Route should consist of an HTML image element with alt attribute value as ""home"",
TEST_24: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of Popup from reactjs-popup,
TEST_25: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"",
TEST_26: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of the HTML unordered list,
TEST_27: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page should consist of at least two HTML list items,
TEST_28: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page consists of an HTML element with text content as ""Home"" wrapped with Link from react-router-dom,
TEST_29: Home Route should consist of an HTML image element with src as the given logo URL,
TEST_30: When the HTML button element with data-testid as ""hamburgerIconButton"" is clicked, then the page consists of an HTML element with text content as ""About"" wrapped with Link from react-router-dom,
TEST_31: Home Route should consist of an HTML image element with src as the given Home image URL,
TEST_32: When the About link in the Popup is clicked, then the page should be navigated to About Route,
TEST_33: When the HTML button element with data-testid attribute value as ""closeButton"" is clicked inside the Popup, then the page should not consist of Popup from reactjs-popup,
TEST_34: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt as ""not found"" and src as the given Not Found Image URL,
TEST_35: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of the HTML main heading element with text content as ""Lost Your Way?"",
TEST_36: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of the HTML paragraph element with text content as ""Sorry, we cannot find that page. You will find lots to explore on the home page"",
```"
4f15b6eb32c443ec921fe9b408ff7c4d,jobbyApp,RJSCPAW11J,/home/workspace/reactjs/coding-practices/jobbyApp,/home/workspace/.tmp/reactjs/coding-practices/jobbyApp/src,"In this project, let's build a **Jobby App** by applying the concepts we have learned till now.

### Refer to videos below:

<div style=""text-align: center;"">
  <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/jobby-app-success-output-v0.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

**Failure View** <br/>

<div style=""text-align: center;"">
  <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/jobby-app-failure-output-v1.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Login Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Login](https://assets.ccbp.in/frontend/content/react-js/jobby-app-login-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login](https://assets.ccbp.in/frontend/content/react-js/jobby-app-login-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login Failure](https://assets.ccbp.in/frontend/content/react-js/jobby-app-login-failure-lg-output.png)
</details>

<details>
<summary>Home Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home](https://assets.ccbp.in/frontend/content/react-js/jobby-app-home-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/jobby-app-home-lg-output.png)
</details>

<details>
<summary>Jobs Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Jobs](https://assets.ccbp.in/frontend/content/react-js/jobby-app-jobs-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Jobs Success](https://assets.ccbp.in/frontend/content/react-js/jobby-app-jobs-success-lg-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No Jobs](https://assets.ccbp.in/frontend/content/react-js/jobby-app-no-jobs-lg-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Profile Failure](https://assets.ccbp.in/frontend/content/react-js/jooby-app-profile-failure-lg-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Jobs Failure](https://assets.ccbp.in/frontend/content/react-js/jobby-app-jobs-failure-lg-output-v0.png)
</details>

<details>
<summary>Job Item Details Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Job Details Success](https://assets.ccbp.in/frontend/content/react-js/jobby-app-job-details-success-sm-output-v0.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Job Details Failure](https://assets.ccbp.in/frontend/content/react-js/jobby-app-job-details-failure-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Job Details Success](https://assets.ccbp.in/frontend/content/react-js/jobby-app-job-details-success-lg-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Job Details Failure](https://assets.ccbp.in/frontend/content/react-js/jobby-app-job-details-failure-lg-output.png)
</details>

<details>
<summary>Not Found Route</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Not Found](https://assets.ccbp.in/frontend/content/react-js/jobby-app-not-found-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Not Found](https://assets.ccbp.in/frontend/content/react-js/jobby-app-not-found-lg-output-v0.png)
</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- **Login Route**

  - When invalid credentials are provided and the **Login** button is clicked, then the error message received from the response should be displayed
  - When valid credentials are provided and the **Login** button is clicked, then the page should be navigated to the Home Route
  - When an _unauthenticated_ user, tries to access the Home, Jobs and Job Item Details Route, then the page should be navigated to Login Route
  - When an _authenticated_ user, tries to access the Home, Jobs and Job Item Details Route, then the page should be navigated to the respective route
  - When an _authenticated_ user, tries to access the Login Route, then the page should be navigated to the Home Route

- **Home Route**

  - When an _authenticated_ user opens the Home Route
    - Clicks on the **Find Jobs** button, then the page should be navigated to the Jobs Route

- **Jobs Route**

  - When an _authenticated_ user opens the Jobs Route

    - An HTTP GET request should be made to **Profile API URL**
      - **_loader_** should be displayed while fetching the data
      - After the data is fetched successfully, the response received should be displayed
      - If the HTTP GET request made is unsuccessful, then the [Failure View](https://assets.ccbp.in/frontend/content/react-js/jobby-app-profile-failure-lg-output.png) should be displayed
        - When the **Retry** button is clicked, an HTTP GET request should be made to **Profile API URL**
    - An HTTP GET request should be made to **Jobs API URL** with `employment_type`, `minimum_package`, and `search` as query parameters with empty strings as initial values
      - **_loader_** should be displayed while fetching the data
      - After the data is fetched successfully, display the list of jobs received from the response
      - If the HTTP GET request made is unsuccessful, then the [Failure View](https://assets.ccbp.in/frontend/content/react-js/jobby-app-jobs-failure-lg-output.png) should be displayed
        - When the **Retry** button is clicked, an HTTP GET request should be made to **Jobs API URL**
    - When a value is provided in the search input and search icon button is clicked
      - Make an HTTP GET request to the **Jobs API URL** with `jwt_token` in the Cookies and query parameter `search` with value as the text provided in the search input
      - **_loader_** should be displayed while fetching the data
      - After the data is fetched successfully, display the list of jobs received from the response
    - When **Employment Types** options are selected
      - Make an HTTP GET request to the **Jobs API URL** with `jwt_token` in the Cookies and query parameter `employment_type` with value as a list of selected employment type id's as a single string separated by `,`
      - **_loader_** should be displayed while fetching the data
      - After the data is fetched successfully, display the list of jobs received from the response
    - When **Salary Range** is selected
      - Make an HTTP GET request to the **Jobs API URL** with `jwt_token` in the Cookies and query parameter `minimum_package` with value as the id of the selected salary range
      - **_loader_** should be displayed while fetching the data
      - After the data is fetched successfully, display the list of jobs received from the response
    - When the HTTP GET request made to the **Jobs API URL** returns an empty list for jobs then [No Jobs View](https://assets.ccbp.in/frontend/content/react-js/jobby-app-no-jobs-lg-output.png) should be displayed

  - When multiple filters are applied, then the HTTP GET request should be made with all the filters that are applied
  - For example: When the **Full Time** and **Part Time** employment types are selected, salary range **10 LPA and above** is selected and search input field is empty, then the **Jobs API URL** will be as follows

    ```js
    const apiUrl = 'https://apis.ccbp.in/jobs?employment_type=FULLTIME,PARTTIME&minimum_package=1000000&search='
    ```

  - When a **job** is clicked, then the page should be navigated to the Job Item Details Route

- **Job Item Details Route**

  - When an _authenticated_ user opens the Job Item Details Route
    - An HTTP GET request should be made to **Job Details API URL** with `jwt_token` in the Cookies and job `id` as path parameter
      - **_loader_** should be displayed while fetching the data
      - After the data is fetched successfully, the response received should be displayed
      - The list of similar jobs should be displayed
      - If the HTTP GET request made is unsuccessful, then the [Failure View](https://assets.ccbp.in/frontend/content/react-js/jobby-app-job-details-failure-lg-output.png) should be displayed
        - When the **Retry** button is clicked, an HTTP GET request should be made to **Job Details API URL**
  - When the **Visit** button is clicked, then the corresponding company website URL should be opened in a new tab

- **Not Found Route**

  - When a random path is provided as the URL path, then the page should be navigated to the Not Found Route

- **Header**

  - When the **website logo** image is clicked, then the page should be navigated to the Home Route
  - When the **Home** link is clicked, then the page should be navigated to the Home Route
  - When the **Jobs** link is clicked, then the page should be navigated to the Jobs Route
  - When the **Logout** button is clicked, then the page should be navigated to the Login Route

- The App is provided with `employmentTypesList`. It consists of a list of employment type objects with the following properties in each employment type object

  |       Key        | Data Type |
  | :--------------: | :-------: |
  | employmentTypeId |  String   |
  |      label       |  String   |

- The App is provided with `salaryRangesList`. It consists of a list of salary range objects with the following properties in each salary range object

  |      Key      | Data Type |
  | :-----------: | :-------: |
  | salaryRangeId |  String   |
  |     label     |  String   |

</details>

<details>

<summary>API Requests & Responses</summary>

<br/>

**Login API**

#### API: `https://apis.ccbp.in/login`

#### Method: `POST`

#### Request:

```json
{
  ""username"": ""rahul"",
  ""password"": ""rahul@2021""
}
```

#### Description:

Returns a response based on the credentials provided

#### Sample Success Response

```json
{
  ""jwt_token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MTk2Mjg2MTN9. nZDlFsnSWArLKKeF0QbmdVfLgzUbx1BGJsqa2kc_21Y""
}
```

#### Sample Failure Response

```json
{
  ""status_code"": 404,
  ""error_msg"": ""Username is not found""
}
```

**Profile API**

#### API: `https://apis.ccbp.in/profile`

#### Method: `GET`

#### Description:

Returns a response containing the profile details

#### Sample Response

```json
{
  ""profile_details"": {
    ""name"": ""Rahul Attuluri"",
    ""profile_image_url"": ""https://assets.ccbp.in/frontend/react-js/male-avatar-img.png"",
    ""short_bio"": ""Lead Software Developer and AI-ML expert""
  }
}
```

**Jobs API**

#### API: `https://apis.ccbp.in/jobs`

#### Example: `https://apis.ccbp.in/jobs?employment_type=FULLTIME,PARTTIME&minimum_package=1000000&search=`

#### Method: `GET`

#### Description:

Returns a response containing the list of all jobs

#### Sample Response

```json
{
  ""jobs"": [
    {
      ""company_logo_url"": ""https://assets.ccbp.in/frontend/react-js/jobby-app/facebook-img.png"",
      ""employment_type"": ""Full Time"",
      ""id"": ""d6019453-f864-4a2f-8230-6a9642a59466"",
      ""job_description"": ""We’re in search of a Back-End Software Engineer that specializes in server-side components. In this role, you’ll primarily work in NodeJs, SQL Lite, Python, AWS and GO and will bring a depth of knowledge on basic algorithms and data structures. As a Back-End Engineer, you might be architecting new features for our customers."",
      ""location"": ""Bangalore"",
      ""package_per_annum"": ""21 LPA"",
      ""rating"": 4,
      ""title"": ""Backend Engineer""
    }
    ...
  ],
  ""total"":25,
}
```

**Job Details API**

#### API: `https://apis.ccbp.in/jobs/:id`

#### Example: `https://apis.ccbp.in/jobs/bb95e51b-b1b2-4d97-bee4-1d5ec2b96751`

#### Method: `GET`

#### Description:

Returns a response containing the job details

#### Sample Response

```json
{
  ""job_details"": {
    ""company_logo_url"": ""https://assets.ccbp.in/frontend/react-js/jobby-app/netflix-img.png"",
    ""company_website_url"": ""https://about.netflix.com/en"",
    ""employment_type"": ""Internship"",
    ""id"": ""bb95e51b-b1b2-4d97-bee4-1d5ec2b96751"",
    ""job_description"": ""We are looking for a DevOps Engineer with a minimum of 5 years of industry experience, preferably working in the financial IT community. The position in the team is focused on delivering exceptional services to both BU and Dev"",
    ""skills"": [
      {
        ""image_url"": ""https://assets.ccbp.in/frontend/react-js/jobby-app/docker-img.png"",
        ""name"": ""Docker""
      },
      ...
    ],
    ""life_at_company"": {
      ""description"": ""Our core philosophy is people over process. Our culture has been instrumental to our success. It has helped us attract and retain stunning colleagues, making work here more satisfying. Entertainment, like friendship, is a fundamental human need, and it changes how we feel and gives us common ground. We want to entertain the world."",
      ""image_url"": ""https://assets.ccbp.in/frontend/react-js/jobby-app/life-netflix-img.png""
    },
    ""location"":""Delhi"",
    ""package_per_annum"":""10 LPA"",
    ""rating"":4
  },
  ""similar_jobs"": [
    {
      ""company_logo_url"": ""https://assets.ccbp.in/frontend/react-js/jobby-app/netflix-img.png"",
      ""employment_type"": ""Freelance"",
      ""id"": ""2b40029d-e5a5-48cc-84a6-b6e12d25625d"",
      ""job_description"": ""The Experimentation Platform team builds internal tools with a big impact across the company. We are looking to add a UI engineer to our team to continue to improve our experiment analysis workflow and tools. Ideal candidates will be excited by direct contact with our users, fast feedback, and quick iteration."",
      ""location"": ""Delhi"",
      ""rating"": 4,
      ""title"": ""Frontend Engineer""
    },
    ...
  ]
}
```

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- To convert a list of items as a comma-separated string we can use the array method `join()`

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Render `Home` Route component when the path in URL matches `/`
- Render `Login` Route component when the path in URL matches `/login`
- Render `Jobs` Route component when the path in URL matches `/jobs`
- Render `Job Item Details` Route component when the path in URL matches `/jobs/:id`
- Render `Not Found` Route component when the path in URL matches `/not-found`
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`

- User credentials

  ```text
   username: rahul
   password: rahul@2021

  ```

- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as **loader** to it

  ```jsx
  <div className=""loader-container"" data-testid=""loader"">
    <Loader type=""ThreeDots"" color=""#ffffff"" height=""50"" width=""50"" />
  </div>
  ```

- **Jobs Route**

  - The HTML button element with search icon should have the `data-testid` attribute value as **searchButton** to it

  ```jsx
  <button type=""button"" data-testid=""searchButton"">
    <BsSearch className=""search-icon"" />
  </button>
  ```

  - The profile image should have the alt as **profile**
  - The company logo images in Jobs Route should have the alt as **company logo**

- **Job Details Route**
  - The company logo image should have the alt as **job details company logo**
  - The life at company image should have the alt as **life at company**
  - The skill images should have the alt as the value of the key `name` from each object in the **skills** list received from the job details response
  - The company logo image in similar job item should have the alt as **similar job company logo**
  </details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/home-sm-bg.png](https://assets.ccbp.in/frontend/react-js/home-sm-bg.png)
- [https://assets.ccbp.in/frontend/react-js/home-lg-bg.png](https://assets.ccbp.in/frontend/react-js/home-lg-bg.png)
- [https://assets.ccbp.in/frontend/react-js/profile-bg.png](https://assets.ccbp.in/frontend/react-js/profile-bg.png)
- [https://assets.ccbp.in/frontend/react-js/logo-img.png](https://assets.ccbp.in/frontend/react-js/logo-img.png) alt should be **website logo**
- [https://assets.ccbp.in/frontend/react-js/failure-img.png](https://assets.ccbp.in/frontend/react-js/failure-img.png) alt should be **failure view**
- [https://assets.ccbp.in/frontend/react-js/no-jobs-img.png](https://assets.ccbp.in/frontend/react-js/no-jobs-img.png) alt should be **no jobs**
- [https://assets.ccbp.in/frontend/react-js/jobby-app-not-found-img.png](https://assets.ccbp.in/frontend/react-js/jobby-app-not-found-img.png) alt should be **not found**

</details>

<details>
<summary>Colors</summary>

<br/>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #4f46e5; width: 150px; padding: 10px; color: white"">Hex: #4f46e5</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #272727; width: 150px; padding: 10px; color: white"">Hex: #272727</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #b6c5ff; width: 150px; padding: 10px; color: black"">Hex: #b6c5ff</div>
<div style=""background-color: #6366f1; width: 150px; padding: 10px; color: white"">Hex: #6366f1</div>
<div style=""background-color: #2c364c; width: 150px; padding: 10px; color: white"">Hex: #2c364c</div>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #fbbf24; width: 150px; padding: 10px; color: white"">Hex: #fbbf24</div>
<div style=""background-color: #202020; width: 150px; padding: 10px; color: white"">Hex: #202020</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
<div style=""background-color: #7e858e; width: 150px; padding: 10px; color: black"">Hex: #7e858e</div>
<div style=""background-color: #121212; width: 150px; padding: 10px; color: white"">Hex: #121212</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>
<br/>
</details>

<details>
<summary>Font-families</summary>

- Roboto
</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Test_case_1: When ""/"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login""
Test_case_2: When ""/"" is provided as the URL path by an authenticated user, then the page should be navigated to the Home Route and consist of an HTML main heading element with text content as ""Find The Job That Fits Your Life""
Test_case_3: Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo image URL
Test_case_4: Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo image URL is wrapped with Link from react-router-dom
Test_case_5: Home Route should consist of at least one HTML unordered list element to display the list of nav items in the Header
Test_case_6: Home Route should consist of at least three HTML list elements to display the nav items in the Header
Test_case_7: Home Route should consist of a Link from react-router-dom with text content as ""Home""
Test_case_8: Home Route should consist of a Link from react-router-dom with text content as ""Jobs""
Test_case_9: Home Route should consist of an HTML button element with text content as ""Logout""
Test_case_10: Home Route should consist of an HTML main heading element with text content as ""Find The Job That Fits Your Life""
Test_case_11: Home Route should consist of an HTML paragraph element with text content starting with ""Millions of people are searching for jobs""
Test_case_12: Home Route should consist of an HTML button element with text content as ""Find Jobs""
Test_case_13: Home Route should consist of an HTML button element with text content as ""Find Jobs"" is wrapped with Link from react-router-dom
Test_case_14: When the Find Jobs button in the Home Route is clicked, then the page should be navigated to Jobs Route
Test_case_15: When the Jobs link in the Header is clicked, then the page should be navigated to Jobs Route
Test_case_16: When the Logout button in the Header is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token""
Test_case_17: When the Logout button in the Header is clicked, the history.replace() method should be called with the argument as ""/login""
Test_case_18: When the Logout button in the Header is clicked, then the page should be navigated to the Login Route

Test_case_19: When HTTP GET request in the Job Item Details Route is successful, then the page should consist of at least two HTML list items and the skills list and similar jobs list received from the response should be rendered using a unique key as a prop to display each skill and similar job respectively
Test_case_20: When ""/jobs/:id"" is provided as the URL path by an unauthenticated user, then the page should be navigated to the Login Route and consist of an HTML button element with text content as ""Login""
Test_case_21: Job Item Details Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo image URL
Test_case_22: When the Job Item Details Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader""
Test_case_23: When the Job Item Details Route is opened, an HTTP GET request should be made to the given Job Details API URL with the job id as the path parameter
Test_case_24: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML image element with alt attribute value as ""job details company logo"" and src as the value of key ""company_logo_url"" in job_details received from the job details response
Test_case_25: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML image element with text content as the value of the key ""title"" in job_details received from the job details response
Test_case_26: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""rating"" in job_details received from the job details response
Test_case_27: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""location"" in job_details received from the job details response
Test_case_28: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""employment_type"" in job_details received from the job details response
Test_case_29: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""package_per_annum"" in job_details received from the job details response
Test_case_30: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of at least four HTML main heading elements with text content as ""Description""
Test_case_31: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""job_description"" in job_details received from the job details response
Test_case_32: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML anchor element with href attribute value of the key ""company_website_url"" and text content as ""Visit""
Test_case_33: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML main heading element with text content as ""Skills""
Test_case_34: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of at least three HTML unordered list elements to display nav item, skills and similar jobs received from the response
Test_case_35: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML image elements with alt attribute value as the values of the key ""name"" and src as the values of the key ""image_url"" in the ""skills"" list received from the job details response
Test_case_36: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML main heading element with text content as ""Life at Company""
Test_case_37: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""description"" in ""life_at_company"" from job details response
Test_case_38: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML image element with alt attribute value as ""life at company"" and src as the value of the key ""image_url"" in ""life_at_company"" from job details response
Test_case_39: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of an HTML main heading element with text content as ""Similar Jobs""
Test_case_40: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML image elements with alt attribute value as ""similar job company logo"" and src as the values of the key ""company_logo_url"" in similar_jobs received from the job details response
Test_case_41: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML main heading elements with text content as the values of the key ""title"" in similar_jobs received from the job details response
Test_case_42: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the values of the key ""rating"" in similar_jobs received from the job details response
Test_case_43: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""location"" in similar_jobs received from the job details response
Test_case_44: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""employment_type"" in similar_jobs received from the job details response
Test_case_45: When the HTTP GET request in the Job Item Details Route is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""job_description"" in similar_jobs received from the job details response
Test_case_46: When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML image element with alt attribute value as ""failure view"" and src as the given failure view image URL
Test_case_47: When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML main heading element with text content as ""Oops! Something Went Wrong""
Test_case_48: When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""We cannot seem to find the page you are looking for""
Test_case_49: When the HTTP GET request in the Job Item Details Route is unsuccessful, then the page should consist of an HTML button element with text content as ""Retry""
Test_case_50: When the HTTP GET request in the Job Item Details Route is unsuccessful and the ""Retry"" button is clicked, then an HTTP GET request should be made to the given Job Details API URL

Test_case_51: Page should consist of at least two HTML list items, with the jobs list and employmentTypesList, salaryRangesList rendered using a unique key as a prop for each item.
Test_case_52: When ""/jobs"" is provided as the URL path by an unauthenticated user, it should navigate to Login Route with a ""Login"" button.
Test_case_53: When ""/jobs"" is accessed by an authenticated user, it should navigate to Jobs Route and display ""Type of Employment"".
Test_case_54: Jobs Route should include a ""website logo"" image with the specified URL.
Test_case_55: Jobs Route should include an HTML input element of type ""search"".
Test_case_56: Jobs Route should include an HTML button with data-testid ""searchButton"".
Test_case_57: Jobs Route should display a heading ""Type of Employment"".
Test_case_58: Jobs Route should display HTML checkboxes with labels matching employmentTypesList values.
Test_case_59: Jobs Route should display a heading ""Salary Range"".
Test_case_60: Jobs Route should display HTML radio buttons with labels matching salaryRangesList values.
Test_case_61: When the Jobs Route opens, it should initially show elements with data-testid ""loader"".
Test_case_62: When the Jobs Route opens, it should make an HTTP GET request to the Profile API URL to show profile details.
Test_case_63: Jobs Route should make an HTTP GET request to the Jobs API URL to show the list of jobs.
Test_case_64: Jobs API GET request should include empty strings for all query parameters initially.
Test_case_65: When Jobs Route GET requests are successful, it should display at least four unordered lists for navigation, jobs, employmentTypes, and salaryRanges.
Test_case_66: When Jobs Route GET requests are successful, the page should include a profile image with the specified ""profile_image_url"".
Test_case_67: When Jobs Route GET requests are successful, the page should include a heading with the profile name.
Test_case_68: When Jobs Route GET requests are successful, the page should include a paragraph with the profile's short bio.
Test_case_69: When Jobs Route GET requests are successful, the page should include company logos from the jobs response.
Test_case_70: When Jobs Route GET requests are successful, it should display job titles from the jobs response.
Test_case_71: When Jobs Route GET requests are successful, the page should display ratings for each job.
Test_case_72: When Jobs Route GET requests are successful, it should display locations for each job.
Test_case_73: When Jobs Route GET requests are successful, it should display employment types for each job.
Test_case_74: When Jobs Route GET requests are successful, it should display ""Description"" headings based on the jobs response.
Test_case_75: When Jobs Route GET requests are successful, it should display job descriptions from the jobs response.
Test_case_76: When a search term is entered and the search button clicked, the GET request should include the term as the ""search"" query parameter.
Test_case_77: When employment types are selected, the GET request should include their IDs as a comma-separated string for ""employment_type"".
Test_case_78: When a salary range is clicked, the GET request should include the selected range for ""minimum_package"".
Test_case_79: When all filters are applied, the GET request should include all query parameters and their values.
Test_case_80: Clicking a job item should navigate to its details route.
Test_case_81: When Jobs API returns an empty list, the page should show a ""no jobs"" image with the specified URL.
Test_case_82: When Jobs API returns an empty list, the page should display ""No Jobs Found"".
Test_case_83: When Jobs API returns an empty list, the page should display ""We could not find any jobs. Try other filters"".
Test_case_84: When Profile API request fails, the page should display a ""Retry"" button.
Test_case_85: When Jobs API request fails, the page should show a ""failure view"" image with the specified URL.
Test_case_86: When Jobs API request fails, the page should display ""Oops! Something Went Wrong"".
Test_case_87: When Jobs API request fails, the page should display ""We cannot seem to find the page you are looking for"".
Test_case_88: When Jobs API request fails, the page should display a ""Retry"" button.
Test_case_89: Clicking ""Retry"" after Profile API failure should trigger another GET request to Profile API.
Test_case_90: Clicking ""Retry"" after Jobs API failure should trigger another GET request to Jobs API.
Test_case_91: Clicking the website logo in the header should navigate to Home Route.
Test_case_92: Clicking the Home link in the header should navigate to Home Route.

Test_case_93: On ""/login"" route by unauthenticated user, the page should display a ""Login"" button.
Test_case_94: On ""/login"" route by authenticated user, navigate to Home with heading ""Find The Job That Fits Your Life"".
Test_case_95: Login Route should contain an HTML form.
Test_case_96: Login Route should display a ""website logo"" image with the specified URL.
Test_case_97: Login Route should include an input labeled ""USERNAME"".
Test_case_98: Login Route ""USERNAME"" input should be of type ""text"".
Test_case_99: Login Route should include an input labeled ""PASSWORD"".
Test_case_100: Login Route ""PASSWORD"" input should be of type ""password"".
Test_case_101: Login button should have type ""submit"".
Test_case_102: ""USERNAME"" input should display the typed value.
Test_case_103: ""PASSWORD"" input should display the typed value.
Test_case_104: Clicking Login with non-empty username and password makes an HTTP POST request to Login API URL.
Test_case_105: Login API request should include username and password in the request body.
Test_case_106: If username and password are empty, display error message without navigation.
Test_case_107: If username is empty and password is non-empty, display error message without navigation.
Test_case_108: If password is empty and username is non-empty, display error message without navigation.
Test_case_109: Invalid username and password should show error message without navigation.
Test_case_110: Invalid username with valid password should show error message without navigation.
Test_case_111: Valid username with invalid password should show error message without navigation.
Test_case_112: On valid login, Cookies.set() should be called with ""jwt_token"", token value, and expiry days.
Test_case_113: On valid login, history.replace() should be called with ""/"".
Test_case_114: On valid login, the page should navigate to the Home Route.

Test_case_115: When a random path is provided as the URL path, the page should be navigated to the Not Found Route and should consist of an HTML image element with the alt attribute value as ""not found"" and src as the given not found image URL

Test_case_116: When a random path is provided as the URL path, the page should consist of an HTML main heading element with text content as ""Page Not Found
Test_case_117: When a random path is provided as the URL path, the page should consist of an HTML paragraph element with text content as ""We are sorry, the page you requested could not be found"
ed6ba20efe024f8dbe3dbd4bc2ad219d,layoutBuilder,RJSCPPC2A0,/home/workspace/reactjs/coding-practices/layoutBuilder,/home/workspace/.tmp/reactjs/coding-practices/layoutBuilder/src,"In this project, let's build a **Layout Builder App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/layout-builder-output.gif"" alt=""Layout Builder Output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/layout-builder-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/layout-builder-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the checkboxes for Content, Left Navbar, Right Navbar should be checked and all the elements in the layout should be displayed
- When the Content checkbox is unchecked, then the content element should not be displayed
- When the Left Navbar checkbox is unchecked, then the Left Navbar element should not be displayed
- When the Right Navbar checkbox is unchecked, then the Right Navbar element should not be displayed
- When any of the checkbox is checked, then the respective element should be displayed accordingly
- The Configuration Context has an object as a value with the following properties
  - `showContent` - this key is used to display the Content Element
  - `showLeftNavbar` - this key is used to display the Left Navbar Element
  - `showRightNavbar` - this key is used to display the Right Navbar Element
  - `onToggleShowContent` - this method is used to update the value of the `showContent`
  - `onToggleShowLeftNavbar` - this method is used to update the value of the `showLeftNavbar`
  - `onToggleShowRightNavbar` - this method is used to update the value of the `showRightNavbar`

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/layout-builder-component-breakdown-structure.png"" alt=""layout builder component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/App.css`
- `src/components/ConfigurationController/index.js`
- `src/components/ConfigurationController/index.css`
- `src/components/Layout/index.js`
- `src/components/Layout/index.css`
- `src/components/Header/index.js`
- `src/components/Header/index.css`
- `src/components/Body/index.js`
- `src/components/Body/index.css`
- `src/components/Footer/index.js`
- `src/components/Footer/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #e2e8f0; width: 150px; padding: 10px; color: black"">Hex: #e2e8f0</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Initially when the page is opened all the elements in the layout should be displayed,
TEST_2: Page should consist of HTML main heading element with text content as ""Layout"",
TEST_3: Page should consist of an HTML checkbox input element with label text as ""Content"",
TEST_4: Page should consist of an HTML checkbox input element with label text as ""Left Navbar"",
TEST_5: Page should consist of an HTML checkbox input element with label text as ""Right Navbar"",
TEST_6: Page should consist of HTML main heading element with text content as ""Header"",
TEST_7: Page should consist of HTML main heading element with text content as ""Left Navbar Menu"",
TEST_8: Page should consist of HTML unordered list to display the list of items in left navbar,
TEST_9: Page should consist of HTML main heading element with text content as ""Content"",
TEST_10: Page should consist of HTML paragraph element with text content starting with ""Lorem ipsum"",
TEST_11: Page should consist of HTML main heading element with text content as ""Right Navbar Menu"",
TEST_12: Page should consist of HTML paragraph elements with text content as ""Ad 1"",
TEST_13: Page should consist of HTML paragraph elements with text content as ""Ad 2"",
TEST_14: Page should consist of HTML main heading element with text content as ""Footer"",
TEST_15: When the value of the ""showContent"" key in ""ConfigurationContext"" is true, then the content should be displayed,
TEST_16: When the value of the ""showContent"" key in ""ConfigurationContext"" is false, then the content should not be displayed,
TEST_17: When the value of the ""showLeftNavbar"" key in ""ConfigurationContext"" is true, then the Left Navbar Menu should be displayed,
TEST_18: When the value of the ""showLeftNavbar"" key in ""ConfigurationContext"" is false, then the Left Navbar Menu should not be displayed,
TEST_19: When the value of the ""showRightNavbar"" key in ""ConfigurationContext"" is true, then the Right Navbar should be displayed,
TEST_20: When the value of the ""showRightNavbar"" key in ""ConfigurationContext"" is false, then the Right Navbar should not be displayed,
TEST_21: When the Content checkbox is unchecked the ""onToggleShowContent"" method in ""ConfigurationContext"" should be called,
TEST_22: When the Left Navbar checkbox is unchecked the ""onToggleShowLeftNavbar"" method in ""ConfigurationContext"" should be called,
TEST_23: When the Right Navbar checkbox is unchecked the ""onToggleShowRightNavbar"" method in ""ConfigurationContext"" should be called,
TEST_24: When the Content checkbox is unchecked then the Content should not be displayed,
TEST_25: When the Left Navbar checkbox is unchecked then the Left Navbar should not be displayed,
TEST_26: When the Right Navbar checkbox is unchecked then the Right Navbar should not be displayed
```"
9264e426792140659babb611050dc730,lettersCalculator,RJSCPB31L8,/home/workspace/reactjs/coding-practices/lettersCalculatorApp,/home/workspace/.tmp/reactjs/coding-practices/lettersCalculatorApp/src,"In this project, let's build a **Letters Calculator** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/letters-calculator-output-v2.gif"" alt=""letters-calculator-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), Medium (Size >= 768px)](https://assets.ccbp.in/frontend/content/react-js/letters-calculator-sm-output-v2.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/letters-calculator-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When a non-empty value is provided in the input, then the count of letters provided should be displayed

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/LettersCalculator/index.js`
- `src/components/LettersCalculator/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

  </details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/stop-watch-with-calculator-img.png](https://assets.ccbp.in/frontend/react-js/stop-watch-with-calculator-img.png) alt should be **letters calculator**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #1d976c; width: 150px; padding: 10px; color: white"">Hex: #1d976c</div>
<div style=""background-color: #93f9b9; width: 150px; padding: 10px; color: black"">Hex: #93f9b9</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #e4e7eb; width: 150px; padding: 10px; color: black"">Hex: #e4e7eb</div>
<div style=""background-color: #219a6f; width: 150px; padding: 10px; color: white"">Hex: #219a6f</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","```
Here are the test cases to verify:
TEST_1: Page should consist of an HTML main heading element with text content as ""Calculate the Letters you enter"",
TEST_2: Page should consist of an HTML label element with text content as ""Enter the phrase"",
TEST_3: Page should consist of an HTML input element with label text as ""Enter the phrase"",
TEST_4: Page should initially consist of an HTML paragraph element with text content as ""No.of letters: 0"",
TEST_5: Page should consist of an HTML image element with alt attribute value as ""letters calculator"" and src attribute value as path for stop watch with calculator image,
TEST_6: When a non-empty value is provided in the HTML input element, then the page should consist of an HTML paragraph element with text content having the count of the letters provided
```"
f9e2e6281f9a41ef973b1a1f430d8b9c,lightDarkMode,RJSCPPATAJ,/home/workspace/reactjs/coding-practices/lightDarkMode,/home/workspace/.tmp/reactjs/coding-practices/lightDarkMode/src,"In this project, let's build a **Light Dark Mode** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/light-dark-mode-output.gif"" alt=""reviews-app-output"" style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/light-dark-mode-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/light-dark-mode-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the app is opened, the UI should be displayed in Dark mode
- When the app is in Dark mode and the **Light Mode** button is clicked
  - The UI should be displayed in Light mode
  - The text content in the button should be changed to **Dark Mode**
- When the app is in Light mode and the **Dark Mode** button is clicked
  - The UI should be displayed in Dark mode
  - The text content in the button should be changed to **Light Mode**

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/LightDarkMode/index.js`
- `src/components/LightDarkMode/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #000000 ; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: Page should initially consist of an HTML button element with text content as ""Light Mode"",
TEST_2: CSS code implementation should not contain ""display"" property with value ""none"",
TEST_3: When the app is in Dark mode and the Light Mode button is clicked, then its text content should change to ""Dark Mode"",
TEST_4: When the app is in Light mode and the Dark Mode button is clicked, then its text content should change to ""Light Mode"""
a3342a91b51e4e54b9fa471df3781c4b,loginApp,RJSCP83UDS,/home/workspace/reactjs/coding-practices/loginApp,/home/workspace/.tmp/reactjs/coding-practices/loginApp/src,"In this project, let's build a **Login App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/login-app-output.gif"" alt=""login-app-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/login-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/login-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, **Please Login** message and **Login** button should be displayed
- When the **Login** button is clicked,
  - **Welcome User** message and **Logout** button should be displayed
- When the **Logout** button is clicked,
  - **Please Login** message and **Login** button should be displayed

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/login-app-login-component-structure-breakdown.png"" alt=""login app login component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/login-app-logout-component-structure-breakdown.png"" alt=""login app logout component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Home/index.js`
- `src/components/Home/index.css`
- `src/components/Login/index.js`
- `src/components/Login/index.css`
- `src/components/Logout/index.js`
- `src/components/Logout/index.css`
- `src/components/Message/index.js`
- `src/components/Message/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #2b2c49 ; width: 150px; padding: 10px; color: white"">Hex: #2b2c49</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #b5b9ff ; width: 150px; padding: 10px; color: white"">Hex: #b5b9ff</div>
<div style=""background-color: #f8fafc ; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #303150 ; width: 150px; padding: 10px; color: white"">Hex: #303150</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should initially consist of an HTML heading element with text content as ""Please Login"",
TEST_2: Page should initially consist of an HTML button element with text content as ""Login"",
TEST_3: CSS code implementations should not contain ""display"" property with the value ""none"",
TEST_4: When the Login button is clicked, then the text content of the HTML heading element should be changed to ""Welcome User"",
TEST_5: When the Login button is clicked, then the Login button should be changed to the Logout button,
TEST_6: When the Logout button is clicked, then the text content of the HTML heading element should be changed to ""Please Login"" and the Logout button should be changed to the Login button
```"
b4dd649002384ed3a702805f7d020dfc,matchGame,RJSCP5ZAQU,/home/workspace/reactjs/coding-practices/matchGame,/home/workspace/.tmp/reactjs/coding-practices/matchGame/src,"In this project, let's build a **Match Game** by applying the concepts we have learned till now.

### Refer to the video below:

<br/>
<div style=""text-align: center;"">
  <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/match-game-output.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/match-game-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Match Game](https://assets.ccbp.in/frontend/content/react-js/match-game-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Scorecard](https://assets.ccbp.in/frontend/content/react-js/match-game-score-card-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially,
  - Score should be `0` and time should be `60` sec
  - The image to be matched should have the src attribute value as the value of the key `imageUrl` from the first object in **imagesList** provided
  - The **Fruits** tab should be active and the thumbnails with **FRUIT** as their category should be displayed
- The timer should start running backwards from the `60` sec
- When a tab is clicked, then the thumbnails in the corresponding category should be displayed
- When a thumbnail is clicked, if that is matched with the image to be matched,
  - Score is incremented by one
  - The new image to be matched should be generated randomly among the value of the key `imageUrl` from **imagesList** provided
- When a thumbnail is clicked, if it is not matched with the image to be matched,
  - The game should end, and the [Scorecard](https://assets.ccbp.in/frontend/content/react-js/match-game-score-card-lg-output.png) view should be displayed
  - When **PLAY AGAIN** button is clicked, then we should be able to play the game again
    - The score and time values should be reset to `0` and `60` sec respectively
    - The image to be matched should reset to the value of the key `imageUrl` from the first object in **imagesList** provided
    - The active tab should reset to **Fruits**, and the thumbnails with **FRUIT** as their category should be displayed
- When the timer reached `0` sec, then the game should end, and the [Scorecard](https://assets.ccbp.in/frontend/content/react-js/match-game-score-card-lg-output.png) view should be displayed
- The App is provided with `tabsList`. It consists of a list of tabItem objects with the following properties in each tabItem object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |    tabId    |  String   |
  | displayText |  String   |

- The App is provided with `imagesList`. It consists of a list of imageItem objects with the following properties in each imageItem object

  |     Key      | Data Type |
  | :----------: | :-------: |
  |      id      |  String   |
  |   imageUrl   |  String   |
  | thumbnailUrl |  String   |
  |   category   |  String   |

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The image to be matched in the app should have the alt as **match**
- The thumbnail images in the app should have the alt as **thumbnail**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/match-game-bg.png](https://assets.ccbp.in/frontend/react-js/match-game-bg.png)
- [https://assets.ccbp.in/frontend/react-js/match-game-score-card-lg-bg.png](https://assets.ccbp.in/frontend/react-js/match-game-score-card-lg-bg.png)
- [https://assets.ccbp.in/frontend/react-js/match-game-score-card-sm-bg.png](https://assets.ccbp.in/frontend/react-js/match-game-score-card-sm-bg.png)
- [https://assets.ccbp.in/frontend/react-js/match-game-website-logo.png](https://assets.ccbp.in/frontend/react-js/match-game-website-logo.png) alt should be **website logo**
- [https://assets.ccbp.in/frontend/react-js/match-game-timer-img.png](https://assets.ccbp.in/frontend/react-js/match-game-timer-img.png) alt should be **timer**
- [https://assets.ccbp.in/frontend/react-js/match-game-play-again-img.png](https://assets.ccbp.in/frontend/react-js/match-game-play-again-img.png) alt should be **reset**
- [https://assets.ccbp.in/frontend/react-js/match-game-trophy.png](https://assets.ccbp.in/frontend/react-js/match-game-trophy.png) alt should be **trophy**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color:#2c0e3a; width: 150px; padding: 10px; color: white"">Hex: #2c0e3a</div>
<div style=""background-color:#ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color:#fec653; width: 150px; padding: 10px; color: black"">Hex: #fec653</div>
<div style=""background-color:#cf60c8; width: 150px; padding: 10px; color: black"">Hex: #cf60c8</div>
</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the tabsList, thumbnailsList should be rendered using a unique key as a prop for each tab item and thumbnail item respectively.
TEST_2: Page should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo URL.
TEST_3: Page should consist of at least three HTML unordered list elements to display the list of nav items, tab items, and thumbnail items.
TEST_4: Page should consist of at least fifteen HTML list items to display the list of nav items, tab items, and thumbnail items.
TEST_5: Page should consist of an HTML paragraph element with text content as ""Score:"".
TEST_6: Page should initially consist of the user score as ""0"".
TEST_7: Page should consist of an HTML image element with alt attribute value as ""timer"" and src as the given timer image URL.
TEST_8: Page should initially consist of an HTML paragraph element to display the timer limit with text content as ""60 sec"".
TEST_9: Page should initially consist of an HTML image element with alt attribute value as ""match"" and src as the value of the key ""imageUrl"" from the first object in imagesList provided.
TEST_10: Page should consist of at least thirteen HTML button elements each inside an HTML list item.
TEST_11: Page should consist of at least three HTML button elements with text content equal to the ""displayText"" value of each item in tabsList provided.
TEST_12: When the page is opened, the Fruits tab should be active, and the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""FRUIT"" from imagesList provided.
TEST_13: When the page is opened, the timer should start running backwards, and should consist of an HTML paragraph element with text content displaying the remaining time.
TEST_14: When the Animals tab is clicked, then the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""ANIMAL"" from imagesList provided.
TEST_15: When the Places tab is clicked, then the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""PLACE"" from imagesList provided.
TEST_16: When the Fruits tab is clicked, then the page should consist of HTML image elements with alt as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" with category ""FRUIT"" from imagesList provided.
TEST_17: When a thumbnail is clicked that is matched with the image to be matched, then the score should be incremented by one.
TEST_18: When a thumbnail is clicked that is matched with the image to be matched, then the HTML image element with alt attribute value ""match"" should be changed randomly from imagesList provided.
TEST_19: When the timer reached 0 sec, then the page should have an HTML image element with alt attribute value as ""trophy"" and src as the given trophy image URL.
TEST_20: When the timer reached 0 sec, then the page should have an HTML paragraph element with text content as ""YOUR SCORE"".
TEST_21: When the timer reached 0 sec, then the page should have a score achieved by the user in the header and scorecard.
TEST_22: When the timer reached 0 sec, then the page should have an HTML image element with alt attribute value as ""reset"" and src as the given reset image URL.
TEST_23: When the timer reached 0 sec, then the page should have an HTML button element with text content as ""PLAY AGAIN"".
TEST_24: When the ""PLAY AGAIN"" button is clicked, then the timer should be reset to ""60 Sec"".
TEST_25: When the ""PLAY AGAIN"" button is clicked, then the score should be reset to ""0"".
TEST_26: When the ""PLAY AGAIN"" button is clicked, then the new game should be started and the page should consist of at least fifteen HTML list items.
TEST_27: When a thumbnail is clicked that is mismatched with the image to be matched, then the page should show the scorecard view.
```"
0c321ac91643458fa8515edcbcdc6a7f,memeGenerator,RJSCPSMPT7,/home/workspace/reactjs/coding-practices/memeGenerator,/home/workspace/.tmp/reactjs/coding-practices/memeGenerator/src,"In this project, let's build a **Meme Generator** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/meme-generator-output.gif"" alt=""meme-generator"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/meme-generator-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/meme-generator-lg-output-v0.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, values in the inputs elements should be empty and the selected value in the select element should be the first item in the given fontSizesOptionsList
- When non-empty values are provided for **Image Url**, **Top Text**, **Bottom Text**, and **Font Size** and the **Generate** button is clicked
  - The Image URL that has been provided should be applied as a background-image for the generated meme
  - The given Top and Bottom text values should be at the top and bottom of the generated meme
  - The selected font size value should be applied for both top and bottom text of the generated meme

</details>

<details>

<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/MemeGenerator/index.js`
- `src/components/MemeGenerator/styledComponents.js`

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The HTML container element for the generated meme should have `data-testid` attribute value as **meme**
- When Styled Components are used, `data-testid` attribute should be used instead of `testid` attribute

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/nature-img.png](https://assets.ccbp.in/frontend/react-js/nature-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #35469c; width: 150px; padding: 10px; color: black"">Hex: #35469c</div>
<div style=""background-color: #7e858e; width: 150px; padding: 10px; color: black"">Hex: #7e858e</div>
<div style=""background-color: #5a7184; width: 150px; padding: 10px; color: black"">Hex: #5a7184</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #d7dfe9; width: 150px; padding: 10px; color: black"">Hex: #d7dfe9</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: black"">Hex: #1e293b</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: black"">Hex: #0b69ff</div>

</details>

<details>
<summary>Font-families</summary>

- Open Sans

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML options elements and the fontSizesOptionsList should be rendered using a unique key as a prop for each font size option respectively,
TEST_2: Page should consist of HTML main heading element with text content as ""Meme Generator"",
TEST_3: Page should consist of an HTML input element with label text as ""Image URL"",
TEST_4: Page should consist of an HTML input element with label text as ""Top Text"",
TEST_5: Page should consist of an HTML input element with label text as ""Bottom Text"",
TEST_6: Page should consist of an HTML select element with label text as ""Font Size"",
TEST_7: Page should consist of HTML form element to display all the input and select elements,
TEST_8: Page should initially consist of HTML select element with value equal to ""8"",
TEST_9: Page should consist of HTML button element with text content as ""Generate"",
TEST_10: Page should consist of HTML option elements with values equal to the value of the key ""optionId"" in the fontSizesOptionsList provided,
TEST_11: Page should consist of HTML option elements with text content as the value of the key ""displayText"" in the fontSizesOptionsList provided,
TEST_12: When a non-empty value is provided for the HTML input element with label text ""Image URL"", the value provided should be updated in the value of the input element,
TEST_13: When a non-empty value is provided for the HTML input element with label text ""Top Text"", the value provided should be updated in the value of the input element,
TEST_14: When a non-empty value is provided for the HTML input element with label text ""Bottom Text"", the value provided should be updated in the value of the input element,
TEST_15: When an option is selected in the HTML select element, the selected option should be updated as the value of the select element,
TEST_16: Page should consist of a styled component as container element with data-testid as ""meme"",
TEST_17: When a valid image URL is provided for the HTML input element with label text ""Image URL"" and ""Generate"" button is clicked, then the provided image URL should be applied as a background-image for the styled component with data-testid as ""meme"",
TEST_18: When a non-empty value is provided for the HTML input element with label text as ""Top Text"" and ""Generate"" button is clicked, then a paragraph styledComponent with text content as provided value should be displayed,
TEST_19: When a non-empty value is provided for the HTML input element with label text as ""Bottom Text"" and ""Generate"" button is clicked, then a paragraph styledComponent with text content as provided value should be displayed,
TEST_20: When non-empty values are provided for the HTML input and select elements and ""Generate"" button is clicked then provided font size value in the select element should be applied to both top and bottom text in the generated meme
```"
20ad2864bbc34582a4885725f4e9292c,moneyManager,RJSCPIK4G2,/home/workspace/reactjs/coding-practices/moneyManager,/home/workspace/.tmp/reactjs/coding-practices/moneyManager/src,"In this project, let's build a **Money Manager** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/money-manager-output.gif"" alt=""money manager output gif"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/money-manager-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/money-manager-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, Balance Amount, Income Amount, and Expenses Amount should be `0`
- Balance Amount should be calculated by removing the Expenses Amount from the Income Amount in the list of transactions
- Income Amount should be calculated by removing the Expenses Amount in the list of transactions
- Expenses Amount should be calculated by adding only Expenses Amount in the list of transactions
- The `MoneyManager` component is provided with `transactionTypeOptions`. It consists of a list of transaction type objects with the following properties in each object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |  optionId   |  String   |
  | displayText |  String   |

- Initially, the value of the `titleInput` should be empty
- Initially, the value of the `amountInput` should be empty
- Initially, the first option in the list should be selected
- When a transaction is added, by providing the values in the `titleInput`, `amountInput` and `optionId` and **Add** button is clicked,

  - A new transaction should be added to the transaction history list
  - `totalBalance`, `totalIncome` and `totalExpenses` should be updated accordingly

    ```
    totalBalance = totalIncome - totalExpenses
    ```

  - After updating, the values in the `titleInput`,`amountInput` and `optionId` will be updated to their initial values

- When the delete button in the transaction history is clicked,
  - The respective transaction should be deleted from the transaction history list
  - `totalBalance`, `totalIncome` and `totalExpenses` should be updated accordingly

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/money-manager-component-structure-breakdown.png"" alt=""component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/MoneyManager/index.js`
- `src/components/MoneyManager/index.css`
- `src/components/MoneyDetails/index.js`
- `src/components/MoneyDetails/index.css`
- `src/components/TransactionItem/index.js`
- `src/components/TransactionItem/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The Balance Amount should have the data-testid as **balanceAmount**
- The Income Amount should have the data-testid as **incomeAmount**
- The Expenses Amount should have the data-testid as **expensesAmount**
- The Delete button for each transaction should have the data-testid as **delete**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/money-manager/money-manager-bg.png](https://assets.ccbp.in/frontend/react-js/money-manager/money-manager-bg.png)
- [https://assets.ccbp.in/frontend/react-js/money-manager/balance-image.png](https://assets.ccbp.in/frontend/react-js/money-manager/balance-image.png) alt should be **balance**
- [https://assets.ccbp.in/frontend/react-js/money-manager/income-image.png](https://assets.ccbp.in/frontend/react-js/money-manager/income-image.png) alt should be **income**
- [https://assets.ccbp.in/frontend/react-js/money-manager/expenses-image.png](https://assets.ccbp.in/frontend/react-js/money-manager/expenses-image.png) alt should be **expenses**
- [https://assets.ccbp.in/frontend/react-js/money-manager/delete.png](https://assets.ccbp.in/frontend/react-js/money-manager/delete.png) alt should be **delete**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #ecfccb; width: 150px; padding: 10px; color: black"">Hex: #ecfccb</div>
<div style=""background-color: #84cc16; width: 150px; padding: 10px; color: black"">Hex: #84cc16</div>
<div style=""background-color: #cffafe; width: 150px; padding: 10px; color: black"">Hex: #cffafe</div>
<div style=""background-color: #06b6d4; width: 150px; padding: 10px; color: black"">Hex: #06b6d4</div>
<div style=""background-color: #ede9fe; width: 150px; padding: 10px; color: black"">Hex: #ede9fe</div>
<div style=""background-color: #7c3aed; width: 150px; padding: 10px; color: white"">Hex: #7c3aed</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
<div style=""background-color: #7e858e; width: 150px; padding: 10px; color: black"">Hex: #7e858e</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #d7dfe9; width: 150px; padding: 10px; color: black"">Hex: #d7dfe9</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: When a transaction is added, then the page should consist of at least one HTML list item and the transactionsList should be rendered using a unique key as a prop for each transaction item.
TEST_2: Page should initially consist of HTML paragraph element with text content starting with ""Welcome back to your"".
TEST_3: Page should initially consist of HTML image element with alt attribute value as ""balance"" and src attribute value as URL for balance image.
TEST_4: Page should consist of HTML paragraph element with text content as ""Your Balance"".
TEST_5: Page should initially consist of an HTML paragraph element with data-testid attribute value as ""balanceAmount"" and text content as ""0"".
TEST_6: Page should initially consist of HTML image element with alt attribute value as ""income"" and src attribute value as URL for income image.
TEST_7: Page should consist of HTML paragraph element with text content as ""Your Income"".
TEST_8: Page should initially consist of an HTML paragraph element with data-testid attribute value as ""incomeAmount"" and text content as ""0"".
TEST_9: Page should initially consist of HTML image element with alt attribute value as ""expenses"" and src attribute value as URL for expenses image.
TEST_10: Page should consist of HTML paragraph element with text content as ""Your Expenses"".
TEST_11: Page should initially consist of an HTML paragraph element with data-testid attribute value as ""expensesAmount"" and text content as ""0"".
TEST_12: Page should consist of HTML heading element with text content as ""Add Transaction"".
TEST_13: Page should consist of HTML input element with label text as ""TITLE"".
TEST_14: Page should consist of HTML input element with label text as ""AMOUNT"".
TEST_15: Page should consist of HTML select element with label text as ""TYPE"".
TEST_16: Page should consist of HTML option element with text content as the value of the key ""displayText"" of the first object in transactionTypeOptions provided.
TEST_17: Page should consist of HTML option element with text content as the value of the key ""displayText"" of the second object in transactionTypeOptions provided.
TEST_18: Page should consist of HTML option elements with value attribute as the value of the keys ""optionId"" in transactionTypeOptions provided.
TEST_19: Page should consist of HTML select element which contains ""Income"" and ""Expenses"" as options.
TEST_20: Page should consist of HTML button element with text content as ""Add"".
TEST_21: Page should consist of HTML heading element with text content as ""History"".
TEST_22: Page should consist of HTML paragraph element with text content as ""Title"".
TEST_23: Page should consist of HTML paragraph element with text content as ""Amount"".
TEST_24: Page should consist of HTML paragraph element with text content as ""Type"".
TEST_25: When non-empty values are provided in the HTML input elements, selected type and Add button is clicked, an HTML list item should be added to the transactions list with a unique id imported from the uuid package.
TEST_26: When a transaction is added, then the HTML input element for title should be empty.
TEST_27: When a transaction is added, then the HTML input element for amount should be empty.
TEST_28: When a transaction is added with ""Income"" as the type, the balance amount should be displayed accordingly.
TEST_29: When a transaction is added with ""Income"" as the type, the income amount should be displayed accordingly.
TEST_30: When a transaction is added with ""Income"" as the type, the expenses amount should remain the same.
TEST_31: When transactions are added with ""Income"" and ""Expenses"" as types, the balance amount, income amount and expenses amount should be displayed accordingly.
TEST_32: When a transaction is added, then the page should consist of an HTML unordered list element to display the list of transactions.
TEST_33: When a non-empty value is provided in the HTML input element for title, the value provided should be updated in the value of the input element.
TEST_34: When a non-empty value is provided in the HTML input element for amount, the value provided should be updated in the value of the input element.
TEST_35: When a value is selected in the HTML select element for type, the value provided should be updated in the value of the select element.
TEST_36: When a transaction is added, then it should be added to the list of transactions.
TEST_37: Each transaction should consist of an HTML image element with alt attribute value as ""delete"" and src attribute value as URL for delete image.
TEST_38: When a transaction is added, then the HTML select element should be selected by default value.
TEST_39: When a transaction is added, and the HTML button with data-testid as ""delete"" is clicked, the transaction item should be removed.
TEST_40: When a single transaction is added, and the HTML button with data-testid as ""delete"" is clicked, then the Balance, Income, Expenses should be updated to their initial values.
TEST_41: When multiple transactions are added, and one transaction is deleted, then the Balance, Income, Expenses should be updated accordingly.
```"
39dcf4999626454687b7ef780aefb2d1,navbarWithContext,RJSCPCMYYO,/home/workspace/reactjs/coding-practices/navbarWithContext,/home/workspace/.tmp/reactjs/coding-practices/navbarWithContext/src,"In this project, let's build a **Navbar with Context** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-output.gif"" alt=""navbar with context output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-home-sm-outputs.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - About](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-about-sm-outputs.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Not Found](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-not-found-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home Light Theme](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-home-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home Dark Theme](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-home-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - About Light Theme](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-about-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - About Dark Theme](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-about-dark-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Not Found Light Theme](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-not-found-light-theme-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Not Found Dark Theme](https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-not-found-dark-theme-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the app should consists of light theme
- When the dark theme image is clicked in the respective route
  - The dark theme image should be changed to light theme image
  - The app should be changed to dark mode
- when the light theme image is clicked in the Respective route
  - The light theme image should be changed to dark theme image
  - The app should be changed to light mode
- The Theme Context has an object as a value with the following properties
  - `isDarkTheme` - this key is used to change the theme
  - `toggleTheme` - this method is used to update the value of the `isDarkTheme`
- When an undefined path is provided in the URL then the page should navigate to the NotFound Route

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-component-structure-breakdown-home.png"" alt=""component structure breakdown Home"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/navbar-with-context-component-structure-breakdown-about.png"" alt=""component structure breakdown About"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/Home/index.js`
- `src/components/Home/index.css`
- `src/components/About/index.js`
- `src/components/About/index.css`
- `src/components/Navbar/index.js`
- `src/components/Navbar/index.css`
- `src/components/NotFound/index.css`
- `src/components/NotFound/index.js`

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The **Home** image for light theme and dark theme should have the alt attribute value as `home`
- The **About** image for light theme and dark theme should have the alt attribute value as `about`
- The **Website Logo** image for light theme and dark theme should have the alt attribute value as `website logo`
- The **Theme** image for light theme and dark theme should have the alt attribute value as `theme`
- The Theme button should have the data-testid as `theme`

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/home-light-img.png](https://assets.ccbp.in/frontend/react-js/home-light-img.png)

- [https://assets.ccbp.in/frontend/react-js/home-dark-img.png](https://assets.ccbp.in/frontend/react-js/home-dark-img.png)

- [https://assets.ccbp.in/frontend/react-js/about-light-img.png](https://assets.ccbp.in/frontend/react-js/about-light-img.png)

- [https://assets.ccbp.in/frontend/react-js/about-dark-img.png](https://assets.ccbp.in/frontend/react-js/about-dark-img.png)

- [https://assets.ccbp.in/frontend/react-js/website-logo-light-theme-img.png](https://assets.ccbp.in/frontend/react-js/website-logo-light-theme-img.png)

- [https://assets.ccbp.in/frontend/react-js/website-logo-dark-theme-img.png](https://assets.ccbp.in/frontend/react-js/website-logo-dark-theme-img.png)

- [https://assets.ccbp.in/frontend/react-js/light-theme-img.png](https://assets.ccbp.in/frontend/react-js/light-theme-img.png)

- [https://assets.ccbp.in/frontend/react-js/dark-theme-img.png](https://assets.ccbp.in/frontend/react-js/dark-theme-img.png)

- [https://assets.ccbp.in/frontend/react-js/not-found-img.png](https://assets.ccbp.in/frontend/react-js/not-found-img.png) alt should be **not found**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #333333; width: 150px; padding: 10px; color: white"">Hex: #333333</div>
<div style=""background-color: #dcdcdc; width: 150px; padding: 10px; color: black"">Hex: #dcdcdc</div>
<div style=""background-color: #171f46; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: About Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as given website logo URL,
TEST_2: Page should consist of an HTML unordered list to display the list of nav items,
TEST_3: Page should consist of at least two HTML list items,
TEST_4: Page should consist of ""Home"" text wrapped with Link from react-router-dom,
TEST_5: Page should consist of ""About"" text wrapped with Link from react-router-dom,
TEST_6: About Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given dark theme image URL,
TEST_7: About Route should consist of an HTML image element with alt attribute value as ""about"" and src as the given light theme About image URL,
TEST_8: About Route should consist of an HTML main heading element with text content as ""About"",
TEST_9: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the About Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given light theme image URL,
TEST_10: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the About Route should consist of an HTML image element with alt attribute value as ""about"" and src as the given dark theme About image URL,
TEST_11: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the About Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given dark theme website logo URL,
TEST_12: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the page should consist of ""Home"" and ""About"" texts wrapped with Link from react-router-dom,
TEST_13: Page should consist of an HTML button element with data-testid ""theme"" should be displayed for theme image,
TEST_14: When the theme button is clicked then the ""toggleTheme"" method in ""ThemeContext"" should be called,
TEST_15: When the theme button is clicked then the About Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the light theme image URL,
TEST_16: When the theme button is clicked then the About Route should consist of an HTML image element with alt attribute value as ""about"" and src as the dark theme about image URL,
TEST_17: When the theme button is clicked then the About Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the dark theme website logo URL,
TEST_18: When the Home link is clicked then the page should be navigated to Home Route,
TEST_19: When the Home link is clicked then the page should be navigated to Home Route and the theme should be persisted,
TEST_20: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML main heading element with text content as ""Lost Your Way"",
TEST_21: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML paragraph element with text content as ""We cannot seem to find the page"",
TEST_22: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt attribute value as ""not found"" and src as the given not found image URL,
TEST_23: When the theme button is clicked in the NotFound Route then the page should consist of an HTML image element with alt attribute value as ""website logo"" and src as the dark theme website logo URL,
TEST_24: When the theme button is clicked in the NotFound Route then the page should consist of an HTML image element with alt attribute value as ""theme"" and src as the light theme image URL,
TEST_25: Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo URL,
TEST_26: Page should consist of an HTML unordered list to display the list of nav items,
TEST_27: Page should consist of at least two HTML list items,
TEST_28: Page should consist of ""Home"" text wrapped with Link from react-router-dom,
TEST_29: Page should consist of ""About"" text wrapped with Link from react-router-dom,
TEST_30: Home Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given dark theme image URL,
TEST_31: Home Route should consist of an HTML image element with alt attribute value as ""home"" and src as the given light Home image URL,
TEST_32: Home Route should consist of an HTML main heading element with text content as ""Home"",
TEST_33: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the Home Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given light theme image URL,
TEST_34: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the Home Route should consist of an HTML image element with alt attribute value as ""home"" and src as the given dark home image URL,
TEST_35: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given dark theme website logo,
TEST_36: When the value of the ""isDarkTheme"" key in ""ThemeContext"" is true then the page should consist of ""Home"" and ""About"" texts wrapped with Link from react-router-dom,
TEST_37: Page should consist of an HTML button element with data-testid as ""theme"" should be displayed for theme button,
TEST_38: When the theme button is clicked then the ""toggleTheme"" method in ""ThemeContext"" should be called,
TEST_39: When the theme button is clicked then the Home Route should consist of an HTML image element with alt attribute value as ""theme"" and src as the given light theme image URL,
TEST_40: When the theme button is clicked then the Home Route should consist of an HTML image element with alt attribute value as ""home"" and src as the given dark home image URL,
TEST_41: When the theme button is clicked then the Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as the given website logo URL,
TEST_42: When the About link is clicked then the page should be navigated to About Route,
TEST_43: When the About link is clicked then the page should be navigated to About Route and the theme should be persisted.
```"
8dc2f91b2b6c4ab7a3446c8f29ebf75d,notifications,RJSCPCMYYO,/home/workspace/reactjs/coding-practices/notificationsApp,/home/workspace/.tmp/reactjs/coding-practices/notificationsApp/src,"In this project, let's build a **Notifications** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/notifications-lg-output.png"" alt=""notifications-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/notifications-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/notifications-lg-output.png)

</details>

### Completion Instructions

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `index.js`
- `index.css`
</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/primary-icon-img.png](https://assets.ccbp.in/frontend/react-js/primary-icon-img.png)
- [https://assets.ccbp.in/frontend/react-js/success-icon-img.png](https://assets.ccbp.in/frontend/react-js/success-icon-img.png)
- [https://assets.ccbp.in/frontend/react-js/warning-icon-img.png](https://assets.ccbp.in/frontend/react-js/warning-icon-img.png)
- [https://assets.ccbp.in/frontend/react-js/danger-icon-img.png](https://assets.ccbp.in/frontend/react-js/danger-icon-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #2dca73; width: 150px; padding: 10px; color: white"">Hex: #2dca73</div>
<div style=""background-color: #ffb800; width: 150px; padding: 10px; color: white"">Hex: #ffb800</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: JSX code implementation should consist of JSX syntax for an HTML main heading element at least once,
TEST_2: JSX code implementation should consist of JSX syntax for an HTML paragraph element at least once,
TEST_3: JSX code implementation should consist of JSX syntax for an HTML image element at least once,
TEST_4: JSX code implementation should consist of JSX syntax using <Notification /> to render Notifications at least four times
```"
d595dd02c5d04330bd3dac0275b02d8a,nxtTrendzCartFeatures,RJSCPFOQQB,/home/workspace/reactjs/coding-practices/Nxt-Trendz---Cart-Features,/home/workspace/.tmp/reactjs/coding-practices/Nxt-Trendz---Cart-Features/src,"In this project, let's build a **Nxt Trendz - Cart Features** by applying the concepts we have learned till now.

### Refer to the video below:

<br/>
<div style=""text-align: center;"">
  <video style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-output.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an unauthenticated user tries to access the **Cart** Route, then the page should be navigated to **Login** Route

- Following are the features to be implemented

  - Feature 1

    - When an authenticated user tries to add the same product multiple times
      - The quantity of the product should be updated accordingly, and the count of the cart items in the header should be remained same

  - Feature 2

    - The total amount and number of items in the cart should be displayed in the **Cart** Route

  - Feature 3

    - In each cart item in the cart
      - When the plus icon is clicked, then the quantity of the product should be incremented by one
      - When the minus icon is clicked, then the quantity of the product should be decremented by one
      - When the quantity of the product is one and the minus icon is clicked, then the respective product should be removed from the cart
      - Based on the quantity of the product, the product price and the Cart Summary, i.e the total cost should be updated accordingly

  - Feature 4

    - When an authenticated user clicks on the remove button, cart item should be removed from the cart list

  - Feature 5

    - When an authenticated user clicks on the **Remove All** button, all the cart items should be removed from the cart and [Empty Cart View](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-empty-cart-view.png) should be displayed

- The `CartContext` has an object as a value with the following properties
  - `cartList` - this key stores the cart items
  - `removeAllCartItems` - this method is used to remove all the cart items in the `cartList`
  - `addCartItem` - this method adds the cart item to the `cartList`
  - `removeCartItem` - this method removes the cart item from the `cartList`
  - `incrementCartItemQuantity` - this method increases the quantity of a product in the `cartList`
  - `decrementCartItemQuantity` - this method decreases the quantity of a product in the `cartList`

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-component-structure-breakdown.png"" alt=""component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/Cart/index.js`
- `src/components/Cart/index.css`
- `src/components/CartItem/index.js`
- `src/components/CartItem/index.css`
- `src/components/CartSummary/index.js`
- `src/components/CartSummary/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- The `line-height` CSS property sets the height of a line box. It's commonly used to set the distance between lines of text

  ```
  line-height: 1.5;
  ```

    <br/>
    <img src=""https://assets.ccbp.in/frontend/react-js/line-height-img.png"" alt=""line height"" style=""width:90%; max-width: 600px;""/>

- The array method `find()` returns the first item's value that satisfies the provided testing function. If no item is found, it returns `undefined`

  **Syntax**: `arr.find(Testing Function)`

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `BsPlusSquare`, `BsDashSquare` icons from `react-icons` should be used for **plus** and **minus** buttons in cart item
- The Cart Item should consist of two HTML button elements with data-testid attribute values as **plus** and **minus** respectively
- `AiFillCloseCircle` icon from react-icons should be used for **remove** button in cartItem
- The Cart Item should consist of an HTML button element with data-testid attribute values as **remove**
- The product image in **Cart Item** Route should have the alt as `title` of the product

- Prime User credentials

  ```text
   username: rahul
   password: rahul@2021
  ```

- Non-Prime User credentials

  ```text
   username: raja
   password: raja@2021
  ```

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #171f46; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>
<div style=""background-color: #616e7c; width: 150px; padding: 10px; color: white"">Hex: #616e7c</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

TEST_1: When the ""/product-details/
"" is provided in the URL by an unauthenticated user, the page should be redirected to the login route and should display an HTML image element with the given login image URL as src and alt text as ""website login.""

TEST_2: When the HTTP GET request made in the Product Item Details Route receives a response status of 404, an HTML image element with alt text ""error view"" and src as the URL for the error view image should be displayed.

TEST_3: When the HTTP GET request made in the Product Item Details Route receives a response status of 404, an HTML main heading element with text content ""Product Not Found"" should be displayed.

TEST_4: When the HTTP GET request made in the Product Item Details Route receives a response status of 404, an HTML button element with text content ""Continue Shopping"" should be displayed.

TEST_5: When the HTTP GET request made in the Product Item Details Route receives a response status of 404 and the ""Continue Shopping"" button is clicked, the page should navigate to the Products Route.

TEST_6: When the HTTP GET request made to productDetailsApiUrl is successful, the page should consist of at least two HTML list items, and the similar products list should be rendered using a unique key as a prop for each similar product item.

TEST_7: When the Product Item Details Route is accessed, an HTTP GET request should be made to productDetailsApiUrl with the product ID as the path parameter.

TEST_8: When the Product Item Details Route is accessed, an HTML container element with the data-testid attribute value as ""loader"" should be displayed while the API call is in progress.

TEST_9: When the HTTP GET request in the Product Item Details route is successful, an HTML image element with alt text ""product"" and src equal to the value of the key image_url should be displayed.

TEST_10: When the HTTP GET request in the Product Item Details route is successful, an HTML main heading element with text content as the value of the key title should be displayed.

TEST_11: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key price should be displayed.

TEST_12: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key rating should be displayed.

TEST_13: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key total_reviews should be displayed.

TEST_14: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key description should be displayed.

TEST_15: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key availability should be displayed.

TEST_16: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key brand should be displayed.

TEST_17: JSX code implementation for Product Item Details should use BsPlusSquare and BsDashSquare from the react-icons package.

TEST_18: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""plus"" should be displayed.

TEST_19: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""minus"" should be displayed.

TEST_20: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content ""1"" for quantity should be displayed.

TEST_21: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with text content ""ADD TO CART"" should be displayed.

TEST_22: When the HTML button with data-testid ""plus"" is clicked, the quantity should be incremented by one.

TEST_23: When the HTML button with data-testid ""minus"" is clicked, the quantity should be decremented by one.

TEST_24: When the HTML button with data-testid ""minus"" is clicked, the quantity should not be decremented below one.

TEST_25: The page should consist of at least two HTML unordered list elements to display the links in the header and the list of similar products.

TEST_26: The page should consist of at least six HTML list items to display the links in the header and the list of similar products.

TEST_27: The page should consist of HTML image elements with alt text starting with ""similar product"" and src as the value of the key image_url received in the similar_products list in the response.

TEST_28: The page should consist of HTML paragraph elements with text content as the value of the key title received in the similar_products list in the response.

TEST_29: The page should consist of HTML paragraph elements with text content as the value of the key brand received in the similar_products list in the response.

TEST_30: The page should consist of HTML paragraph elements with text content as the value of the key rating received in the similar_products list in the response.

TEST_31: The page should consist of HTML paragraph elements with text content as the value of the key price received in the similar_products list in the response.

TEST_32: When an authenticated user tries to access the LoginRoute, the page should be redirected to HomeRoute and should consist of an HTML image element with the given image URL as src and alt text ""clothes that get you noticed.""

TEST_33: When a valid username and password are provided, the login button is clicked, and the user successfully logs in, the history.replace() method should be called with the argument ""/"".

TEST_34: When the ""/"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML input element with label text as ""USERNAME.""

TEST_35: When the ""/"" is provided in the URL by an authenticated user, the page should navigate to HomeRoute and consist of an HTML image element with the given home image URL as src and alt text ""clothes that get you noticed.""

TEST_36: When the Products link is clicked, the page should navigate to ProductsRoute and consist of an HTML main heading element with text content ""Category.""

TEST_37: When the Cart link is clicked, the page should navigate to CartRoute and consist of an HTML image element with the given image URL as src and alt text ""cart.""

TEST_38: When the logout button is clicked, the Cookies.remove() method should be called with the argument ""jwt_token.""

TEST_39: When the logout button is clicked, the history.replace() method should be called with the argument ""/login.""

TEST_40: When the logout button is clicked, the page should navigate to LoginRoute and consist of an HTML button element with ""Login"" as text content.

TEST_41: When the ""/products"" route is accessed by an unauthenticated user, the page should be redirected to the LoginRoute and consist of an HTML image element with the given login image URL as src and alt as ""website login.""

TEST_42: The ProductsRoute should consist of an HTML input element with the type attribute value as ""search.""

TEST_43: The ProductsRoute should consist of HTML paragraph elements with text content equal to the ""name"" value of each item in categoryOptions provided.

TEST_44: The ProductsRoute should consist of HTML image elements with alt value equal to ""rating {ratingId}"" and src value equal to the ""imageUrl"" value of each item in ratingsList provided.

TEST_45: The ProductsRoute should consist of an HTML button element with the text content as ""Clear Filters.""

TEST_46: When the ProductsRoute is opened, an HTTP GET request should be made to productsApiUrl with all the query parameters and their initial values.

TEST_47: When the ProductsRoute is opened, the products received in the HTTP GET request response should be displayed.

TEST_48: When a value is provided in the HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value of the title_search query parameter.

TEST_49: When a category is clicked, an HTTP GET request should be made with the id of the category as the value of the category query parameter.

TEST_50: When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value of the rating query parameter.

TEST_51: When all the filters in ProductsRoute are applied and the ""Clear Filters"" button is clicked, an HTTP GET request should be made to productsApiUrl with the initial values of the query parameters.

TEST_52: Each product card should be wrapped with the Link from react-router-dom.

TEST_53: When the HTTP GET request made is unsuccessful, the failure view should be displayed.

TEST_54: When the HTTP GET request made to productsApiUrl returns an empty products list, the ""No products"" view should be displayed.

TEST_55: When a product card is clicked in the ProductsRoute, the page should navigate to the Product Item Details route with /product-details/:id in the URL path.

TEST_56: When a product is added to the cart, the CartRoute should consist of at least two HTML list items, and the cart list should be rendered using a unique key as a prop for each cart item.

TEST_57: When the ""/cart"" route is accessed by an unauthenticated user, the page should be navigated to the LoginRoute, and the page should contain an HTML image element with the provided login image URL as src and alt as ""website login.""

TEST_58: When the cart is empty, the CartRoute should consist of an HTML image element with the alt attribute value as ""cart empty"" and the src attribute value as the URL for the cart empty image.

TEST_59: When the cart is empty, the CartRoute should consist of an HTML main heading element with the text content ""Your Cart Is Empty.""

TEST_60: When the cart is empty, the CartRoute should consist of an HTML button element with the text content ""Shop Now.""

TEST_61: When the cart is empty, the CartRoute should consist of an HTML button element with the text content ""Shop Now"" wrapped with the Link from react-router-dom.

TEST_62: When the ""Shop Now"" button is clicked, the page should be navigated to the ProductsRoute, and the products received in the HTTP GET request response should be displayed.

TEST_63: When products are added to the cart, the count of cart items should be displayed in the header after the cart link.

TEST_64: When a product is added to the cart, the CartRoute should consist of an HTML main heading element with the text content ""My Cart.""

TEST_65: When a product is added to the cart, the CartRoute should consist of an HTML button element with the text content ""Remove All.""

TEST_66: When a product is added to the cart, the CartRoute should consist of an HTML unordered list to display the cart items.

TEST_67: When a product is added to the cart, the page should consist of an HTML image element with the alt attribute value as the ""title"" of the product added to the cart and the src attribute value as the ""imageUrl"" for the product added.

TEST_68: When a product is added to the cart, the page should consist of an HTML element with the text content as the ""title"" of the product added.

TEST_69: When a product is added to the cart, the page should consist of an HTML element with the text content as the ""brand"" of the product added.

TEST_70: The JSX code implementation for Cart Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package.

TEST_71: When a product is added to the cart, the page should consist of an HTML button element with data-testid ""plus.""

TEST_72: When a product is added to the cart, the page should consist of an HTML button element with data-testid ""minus.""

TEST_73: When a product is added to the cart, the page should consist of an HTML paragraph element with the text content as the quantity of the product added.

TEST_74: When a product is added to the cart, the page should consist of an HTML paragraph element with the text content as the price of the product added.

TEST_75: The JSX code implementation for Cart Item Details should use ""AiFillCloseCircle"" from the react-icons package.

TEST_76: When a product is added to the cart, the page should consist of an HTML button element with data-testid ""remove.""

TEST_77: When a product is added to the cart, the page should consist of an HTML main heading element with the text content ""Order Total.""

TEST_78: When a product is added to the cart, the page should consist of an HTML main heading element with the text content as the total amount of the items in the cart.

TEST_79: When a product is added to the cart, the page should consist of an HTML paragraph element with the cart items count as ""1"" and ending with ""Items in cart.""

TEST_80: When multiple products are added to the cart, the page should consist of an HTML paragraph element with the text content as the number of items in the cart.

TEST_81: When a product is added to the cart, the page should consist of an HTML button element with the text content ""Checkout.""

TEST_82: When the HTML button element with data-testid ""plus"" is clicked, the incrementCartItemQuantity function in CartContext should be called.

TEST_83: When the HTML button element with data-testid ""minus"" is clicked, the decrementCartItemQuantity function in CartContext should be called.

TEST_84: When the HTML button element with data-testid ""plus"" is clicked, the quantity should be incremented by one.

TEST_85: When the HTML button element with data-testid ""minus"" is clicked, the quantity should be decremented by one.

TEST_86: When the HTML button element with data-testid ""minus"" is clicked, if the quantity is one, the item should be removed from the cart list, and the page should display the main heading ""Your Cart Is Empty.""

TEST_87: When the HTML button element with data-testid ""plus"" is clicked, the price of the cart item should be updated accordingly.

TEST_88: When the HTML button element with data-testid ""minus"" is clicked, the price of the cart item should be updated accordingly.

TEST_89: When the HTML button element with data-testid ""plus"" is clicked, the order total amount should be updated accordingly.

TEST_90: When the HTML button element with data-testid ""minus"" is clicked, the order total amount should be updated accordingly.

TEST_91: When a product is added multiple times to the cart, the quantity of the respective item should be incremented accordingly.

TEST_92: When a product is added multiple times to the cart, the count of the cart items displayed in the header should not be incremented.

TEST_93: When multiple products are added to the cart, the count of the cart items should be updated in the header after the cart link.

TEST_94: When the remove icon is clicked, the removeCartItem function in CartContext should be called.

TEST_95: When the remove icon is clicked, the respective cart item should be removed from the cart items list, and the page should display the main heading ""Your Cart Is Empty.""

TEST_96: When the ""Remove All"" button is clicked, the removeAllCartItems function in CartContext should be called.

TEST_97: When the ""Remove All"" button is clicked, all the items should be removed from the cart list, and the page should display the main heading ""Your Cart Is Empty.""

TEST_98: When the URL path is invalid (e.g., ""/bad-path""), the page should navigate to the NotFoundRoute, displaying an HTML image element with the specified ""not found"" image URL as the src and the alt text as ""not found.""

"
d595dd02c5d04330bd3dac0275b02d8a,nxtTrendzCartFeatures,RJSCPFOQQB,/home/workspace/reactjs/coding-practices/nxtTrendzCartFeatures,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzCartFeatures/src,"In this project, let's build a **Nxt Trendz - Cart Features** by applying the concepts we have learned till now.

### Refer to the video below:

<br/>
<div style=""text-align: center;"">
  <video style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-output.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an unauthenticated user tries to access the **Cart** Route, then the page should be navigated to **Login** Route

- Following are the features to be implemented

  - Feature 1

    - When an authenticated user tries to add the same product multiple times
      - The quantity of the product should be updated accordingly, and the count of the cart items in the header should be remained same

  - Feature 2

    - The total amount and number of items in the cart should be displayed in the **Cart** Route

  - Feature 3

    - In each cart item in the cart
      - When the plus icon is clicked, then the quantity of the product should be incremented by one
      - When the minus icon is clicked, then the quantity of the product should be decremented by one
      - When the quantity of the product is one and the minus icon is clicked, then the respective product should be removed from the cart
      - Based on the quantity of the product, the product price and the Cart Summary, i.e the total cost should be updated accordingly

  - Feature 4

    - When an authenticated user clicks on the remove button, cart item should be removed from the cart list

  - Feature 5

    - When an authenticated user clicks on the **Remove All** button, all the cart items should be removed from the cart and [Empty Cart View](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-empty-cart-view.png) should be displayed

- The `CartContext` has an object as a value with the following properties
  - `cartList` - this key stores the cart items
  - `removeAllCartItems` - this method is used to remove all the cart items in the `cartList`
  - `addCartItem` - this method adds the cart item to the `cartList`
  - `removeCartItem` - this method removes the cart item from the `cartList`
  - `incrementCartItemQuantity` - this method increases the quantity of a product in the `cartList`
  - `decrementCartItemQuantity` - this method decreases the quantity of a product in the `cartList`

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-cart-features-component-structure-breakdown.png"" alt=""component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/Cart/index.js`
- `src/components/Cart/index.css`
- `src/components/CartItem/index.js`
- `src/components/CartItem/index.css`
- `src/components/CartSummary/index.js`
- `src/components/CartSummary/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- The `line-height` CSS property sets the height of a line box. It's commonly used to set the distance between lines of text

  ```
  line-height: 1.5;
  ```

    <br/>
    <img src=""https://assets.ccbp.in/frontend/react-js/line-height-img.png"" alt=""line height"" style=""width:90%; max-width: 600px;""/>

- The array method `find()` returns the first item's value that satisfies the provided testing function. If no item is found, it returns `undefined`

  **Syntax**: `arr.find(Testing Function)`

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `BsPlusSquare`, `BsDashSquare` icons from `react-icons` should be used for **plus** and **minus** buttons in cart item
- The Cart Item should consist of two HTML button elements with data-testid attribute values as **plus** and **minus** respectively
- `AiFillCloseCircle` icon from react-icons should be used for **remove** button in cartItem
- The Cart Item should consist of an HTML button element with data-testid attribute values as **remove**
- The product image in **Cart Item** Route should have the alt as `title` of the product

- Prime User credentials

  ```text
   username: rahul
   password: rahul@2021
  ```

- Non-Prime User credentials

  ```text
   username: raja
   password: raja@2021
  ```

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #171f46; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>
<div style=""background-color: #616e7c; width: 150px; padding: 10px; color: white"">Hex: #616e7c</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

TEST_1: When the ""/product-details/
"" is provided in the URL by an unauthenticated user, the page should be redirected to the login route and should display an HTML image element with the given login image URL as src and alt text as ""website login.""

TEST_2: When the HTTP GET request made in the Product Item Details Route receives a response status of 404, an HTML image element with alt text ""error view"" and src as the URL for the error view image should be displayed.

TEST_3: When the HTTP GET request made in the Product Item Details Route receives a response status of 404, an HTML main heading element with text content ""Product Not Found"" should be displayed.

TEST_4: When the HTTP GET request made in the Product Item Details Route receives a response status of 404, an HTML button element with text content ""Continue Shopping"" should be displayed.

TEST_5: When the HTTP GET request made in the Product Item Details Route receives a response status of 404 and the ""Continue Shopping"" button is clicked, the page should navigate to the Products Route.

TEST_6: When the HTTP GET request made to productDetailsApiUrl is successful, the page should consist of at least two HTML list items, and the similar products list should be rendered using a unique key as a prop for each similar product item.

TEST_7: When the Product Item Details Route is accessed, an HTTP GET request should be made to productDetailsApiUrl with the product ID as the path parameter.

TEST_8: When the Product Item Details Route is accessed, an HTML container element with the data-testid attribute value as ""loader"" should be displayed while the API call is in progress.

TEST_9: When the HTTP GET request in the Product Item Details route is successful, an HTML image element with alt text ""product"" and src equal to the value of the key image_url should be displayed.

TEST_10: When the HTTP GET request in the Product Item Details route is successful, an HTML main heading element with text content as the value of the key title should be displayed.

TEST_11: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key price should be displayed.

TEST_12: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key rating should be displayed.

TEST_13: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key total_reviews should be displayed.

TEST_14: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key description should be displayed.

TEST_15: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key availability should be displayed.

TEST_16: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as the value of the key brand should be displayed.

TEST_17: JSX code implementation for Product Item Details should use BsPlusSquare and BsDashSquare from the react-icons package.

TEST_18: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""plus"" should be displayed.

TEST_19: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid ""minus"" should be displayed.

TEST_20: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content ""1"" for quantity should be displayed.

TEST_21: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with text content ""ADD TO CART"" should be displayed.

TEST_22: When the HTML button with data-testid ""plus"" is clicked, the quantity should be incremented by one.

TEST_23: When the HTML button with data-testid ""minus"" is clicked, the quantity should be decremented by one.

TEST_24: When the HTML button with data-testid ""minus"" is clicked, the quantity should not be decremented below one.

TEST_25: The page should consist of at least two HTML unordered list elements to display the links in the header and the list of similar products.

TEST_26: The page should consist of at least six HTML list items to display the links in the header and the list of similar products.

TEST_27: The page should consist of HTML image elements with alt text starting with ""similar product"" and src as the value of the key image_url received in the similar_products list in the response.

TEST_28: The page should consist of HTML paragraph elements with text content as the value of the key title received in the similar_products list in the response.

TEST_29: The page should consist of HTML paragraph elements with text content as the value of the key brand received in the similar_products list in the response.

TEST_30: The page should consist of HTML paragraph elements with text content as the value of the key rating received in the similar_products list in the response.

TEST_31: The page should consist of HTML paragraph elements with text content as the value of the key price received in the similar_products list in the response.

TEST_32: When an authenticated user tries to access the LoginRoute, the page should be redirected to HomeRoute and should consist of an HTML image element with the given image URL as src and alt text ""clothes that get you noticed.""

TEST_33: When a valid username and password are provided, the login button is clicked, and the user successfully logs in, the history.replace() method should be called with the argument ""/"".

TEST_34: When the ""/"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML input element with label text as ""USERNAME.""

TEST_35: When the ""/"" is provided in the URL by an authenticated user, the page should navigate to HomeRoute and consist of an HTML image element with the given home image URL as src and alt text ""clothes that get you noticed.""

TEST_36: When the Products link is clicked, the page should navigate to ProductsRoute and consist of an HTML main heading element with text content ""Category.""

TEST_37: When the Cart link is clicked, the page should navigate to CartRoute and consist of an HTML image element with the given image URL as src and alt text ""cart.""

TEST_38: When the logout button is clicked, the Cookies.remove() method should be called with the argument ""jwt_token.""

TEST_39: When the logout button is clicked, the history.replace() method should be called with the argument ""/login.""

TEST_40: When the logout button is clicked, the page should navigate to LoginRoute and consist of an HTML button element with ""Login"" as text content.

TEST_41: When the ""/products"" route is accessed by an unauthenticated user, the page should be redirected to the LoginRoute and consist of an HTML image element with the given login image URL as src and alt as ""website login.""

TEST_42: The ProductsRoute should consist of an HTML input element with the type attribute value as ""search.""

TEST_43: The ProductsRoute should consist of HTML paragraph elements with text content equal to the ""name"" value of each item in categoryOptions provided.

TEST_44: The ProductsRoute should consist of HTML image elements with alt value equal to ""rating {ratingId}"" and src value equal to the ""imageUrl"" value of each item in ratingsList provided.

TEST_45: The ProductsRoute should consist of an HTML button element with the text content as ""Clear Filters.""

TEST_46: When the ProductsRoute is opened, an HTTP GET request should be made to productsApiUrl with all the query parameters and their initial values.

TEST_47: When the ProductsRoute is opened, the products received in the HTTP GET request response should be displayed.

TEST_48: When a value is provided in the HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value of the title_search query parameter.

TEST_49: When a category is clicked, an HTTP GET request should be made with the id of the category as the value of the category query parameter.

TEST_50: When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value of the rating query parameter.

TEST_51: When all the filters in ProductsRoute are applied and the ""Clear Filters"" button is clicked, an HTTP GET request should be made to productsApiUrl with the initial values of the query parameters.

TEST_52: Each product card should be wrapped with the Link from react-router-dom.

TEST_53: When the HTTP GET request made is unsuccessful, the failure view should be displayed.

TEST_54: When the HTTP GET request made to productsApiUrl returns an empty products list, the ""No products"" view should be displayed.

TEST_55: When a product card is clicked in the ProductsRoute, the page should navigate to the Product Item Details route with /product-details/:id in the URL path.

TEST_56: When a product is added to the cart, the CartRoute should consist of at least two HTML list items, and the cart list should be rendered using a unique key as a prop for each cart item.

TEST_57: When the ""/cart"" route is accessed by an unauthenticated user, the page should be navigated to the LoginRoute, and the page should contain an HTML image element with the provided login image URL as src and alt as ""website login.""

TEST_58: When the cart is empty, the CartRoute should consist of an HTML image element with the alt attribute value as ""cart empty"" and the src attribute value as the URL for the cart empty image.

TEST_59: When the cart is empty, the CartRoute should consist of an HTML main heading element with the text content ""Your Cart Is Empty.""

TEST_60: When the cart is empty, the CartRoute should consist of an HTML button element with the text content ""Shop Now.""

TEST_61: When the cart is empty, the CartRoute should consist of an HTML button element with the text content ""Shop Now"" wrapped with the Link from react-router-dom.

TEST_62: When the ""Shop Now"" button is clicked, the page should be navigated to the ProductsRoute, and the products received in the HTTP GET request response should be displayed.

TEST_63: When products are added to the cart, the count of cart items should be displayed in the header after the cart link.

TEST_64: When a product is added to the cart, the CartRoute should consist of an HTML main heading element with the text content ""My Cart.""

TEST_65: When a product is added to the cart, the CartRoute should consist of an HTML button element with the text content ""Remove All.""

TEST_66: When a product is added to the cart, the CartRoute should consist of an HTML unordered list to display the cart items.

TEST_67: When a product is added to the cart, the page should consist of an HTML image element with the alt attribute value as the ""title"" of the product added to the cart and the src attribute value as the ""imageUrl"" for the product added.

TEST_68: When a product is added to the cart, the page should consist of an HTML element with the text content as the ""title"" of the product added.

TEST_69: When a product is added to the cart, the page should consist of an HTML element with the text content as the ""brand"" of the product added.

TEST_70: The JSX code implementation for Cart Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package.

TEST_71: When a product is added to the cart, the page should consist of an HTML button element with data-testid ""plus.""

TEST_72: When a product is added to the cart, the page should consist of an HTML button element with data-testid ""minus.""

TEST_73: When a product is added to the cart, the page should consist of an HTML paragraph element with the text content as the quantity of the product added.

TEST_74: When a product is added to the cart, the page should consist of an HTML paragraph element with the text content as the price of the product added.

TEST_75: The JSX code implementation for Cart Item Details should use ""AiFillCloseCircle"" from the react-icons package.

TEST_76: When a product is added to the cart, the page should consist of an HTML button element with data-testid ""remove.""

TEST_77: When a product is added to the cart, the page should consist of an HTML main heading element with the text content ""Order Total.""

TEST_78: When a product is added to the cart, the page should consist of an HTML main heading element with the text content as the total amount of the items in the cart.

TEST_79: When a product is added to the cart, the page should consist of an HTML paragraph element with the cart items count as ""1"" and ending with ""Items in cart.""

TEST_80: When multiple products are added to the cart, the page should consist of an HTML paragraph element with the text content as the number of items in the cart.

TEST_81: When a product is added to the cart, the page should consist of an HTML button element with the text content ""Checkout.""

TEST_82: When the HTML button element with data-testid ""plus"" is clicked, the incrementCartItemQuantity function in CartContext should be called.

TEST_83: When the HTML button element with data-testid ""minus"" is clicked, the decrementCartItemQuantity function in CartContext should be called.

TEST_84: When the HTML button element with data-testid ""plus"" is clicked, the quantity should be incremented by one.

TEST_85: When the HTML button element with data-testid ""minus"" is clicked, the quantity should be decremented by one.

TEST_86: When the HTML button element with data-testid ""minus"" is clicked, if the quantity is one, the item should be removed from the cart list, and the page should display the main heading ""Your Cart Is Empty.""

TEST_87: When the HTML button element with data-testid ""plus"" is clicked, the price of the cart item should be updated accordingly.

TEST_88: When the HTML button element with data-testid ""minus"" is clicked, the price of the cart item should be updated accordingly.

TEST_89: When the HTML button element with data-testid ""plus"" is clicked, the order total amount should be updated accordingly.

TEST_90: When the HTML button element with data-testid ""minus"" is clicked, the order total amount should be updated accordingly.

TEST_91: When a product is added multiple times to the cart, the quantity of the respective item should be incremented accordingly.

TEST_92: When a product is added multiple times to the cart, the count of the cart items displayed in the header should not be incremented.

TEST_93: When multiple products are added to the cart, the count of the cart items should be updated in the header after the cart link.

TEST_94: When the remove icon is clicked, the removeCartItem function in CartContext should be called.

TEST_95: When the remove icon is clicked, the respective cart item should be removed from the cart items list, and the page should display the main heading ""Your Cart Is Empty.""

TEST_96: When the ""Remove All"" button is clicked, the removeAllCartItems function in CartContext should be called.

TEST_97: When the ""Remove All"" button is clicked, all the items should be removed from the cart list, and the page should display the main heading ""Your Cart Is Empty.""

TEST_98: When the URL path is invalid (e.g., ""/bad-path""), the page should navigate to the NotFoundRoute, displaying an HTML image element with the specified ""not found"" image URL as the src and the alt text as ""not found.""

"
9ea2af4f8eac48f393b74b2f7fea93c6,nxtTrendzProductsFiltersGroup,RJSCPHSVU2,/home/workspace/reactjs/coding-practices/nxtTrendzProductsFilterGroup,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzProductsFilterGroup/src,"In this project, let's build a **Nxt Trendz - Products Filters Group** app by applying the concepts we have learned till now.

### Refer to the images below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-output-v0.gif"" alt=""products filters group output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

**Failure View**

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-failure-view-output.gif"" alt=""products filters group failure output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Products](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-sm-output-v2.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - No Products](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-sm-no-products-output-v0.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Failure View](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-sm-failure-view-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Products](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-lg-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No Products](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-lg-no-products-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Failure View](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-lg-failure-view.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an authenticated user opens the Products Route,

  - An HTTP GET request should be made to **productsApiUrl** with `jwt_token` in the Cookies and query parameters `title_search`, `category`, and `rating` with initial values as **empty strings**
    - **_loader_** should be displayed while fetching the data
    - After the data is fetched successfully, display the products list received in the response
    - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-lg-failure-view.png) should be displayed
  - When a non-empty value is provided in the Search Input and the **Enter** button is clicked
    - Make an HTTP GET request to the **productsApiUrl** with `jwt_token` in the Cookies and query parameter `title_search` with value as the text provided in the Search Input
    - **_loader_** should be displayed while fetching the data
    - After the data is fetched successfully, display the products list received in the response
  - When a **Category** is clicked
    - Make an HTTP GET request to the URL **productsApiUrl** with `jwt_token` in the Cookies and query parameter `category` with value as the id of the category clicked
    - **_loader_** should be displayed while fetching the data
    - After the data is fetched successfully, display the products list received in the response
  - When a **Rating** is clicked
    - Make an HTTP GET request to the URL **productsApiUrl** with `jwt_token` in the Cookies and query parameter `rating` with value as the id of the rating clicked
    - **_loader_** should be displayed while fetching the data
    - After the data is fetched successfully, display the products list received in the response
  - When the **Clear Filters** button is clicked
    - All the filters applied should be reset to initial values
    - Make an HTTP GET request to the URL **productsApiUrl** with`jwt_token` in the Cookies and without any filters
    - **_loader_** should be displayed while fetching the data
    - After the data is fetched successfully, display the products list received in the response
  - When multiple filters are applied, then the HTTP GET request should be made with all the filters that are applied

  - For example: When the **Electronics** Category is clicked and rating **4 and above** is clicked the **productsApiUrl** will be as follows

  ```js
  const apiUrl = 'https://apis.ccbp.in/products?sort_by=PRICE_HIGH&category=2&title_search=&rating=4'
  ```

  - If the HTTP GET request returns empty products list, then [No Products View](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-lg-no-products-output.png) should be displayed.
  - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-lg-failure-view.png) should be displayed

  - The `AllProductsSection` component will consist `categoryOptions`. It consists of a list of category option objects with the following properties in each category option object

  |    Key     | Data Type |
  | :--------: | :-------: |
  | categoryId |  String   |
  |    name    |  String   |

  - The `AllProductsSection` component will consist `ratingOption`. It consists of a list of category rating option objects with the following properties in each rating option object

  |   Key    | Data Type |
  | :------: | :-------: |
  | ratingId |  String   |
  | imageUrl |  String   |

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**productsApiUrl**

#### API: `https://apis.ccbp.in/products`

#### Example: `https://apis.ccbp.in/products?sort_by=PRICE_HIGH&category=4&title_search=machine&rating=4`

#### Method: `GET`

#### Description:

Returns a response containing the list of Products

#### Success Response

```json
{
  ""products"": [
    {
      ""title"": ""Front Load Machine"",
      ""brand"": ""Samsung"",
      ""price"": 22490,
      ""id"": 24,
      ""image_url"": ""https://assets.ccbp.in/frontend/react-js/ecommerce/appliances-washing-machine.png"",
      ""rating"": 4.5,
    },
      ....
  ]
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-products-filter-group-component-structure-breakdown.png"" alt=""component-breakdown-structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/AllProductsSection/index.js`
- `src/components/AllProductsSection/index.css`
- `src/components/FiltersGroup/index.js`
- `src/components/FiltersGroup/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` Route should consist of `/` in the URL path
- `Login` Route should consist of `/login` in the URL path
- `Products` Route should consist of `/products` in the URL path
- `Cart` Route should consist of `/cart` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`

- User credentials

  ```text
   username: raja
   password: raja@2021
  ```

- The rating stars images in the route should have the alt attribute value as **rating {ratingId}**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/nxt-trendz/nxt-trendz-no-products-view.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz/nxt-trendz-no-products-view.png) alt should be **no products**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz/nxt-trendz-products-error-view.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz/nxt-trendz-products-error-view.png) alt should be **products failure**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #12022f; width: 150px; padding: 10px; color: white"">Hex: #12022f</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #0967d2; width: 150px; padding: 10px; color: white"">Hex: #0967d2</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_17: When ""/"" is provided in the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url,
TEST_18: When ""/"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image URL,
TEST_19: When the Products link is clicked then the page should be navigated to Products Route and consist of an HTML main heading element with text content as ""Category"",
TEST_20: When the Cart link is clicked, then the page should be navigated to Cart Route and consist of an HTML image element with alt as ""cart"" and src as given cart image URL,
TEST_21: When the logout button is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"",
TEST_22: When the logout button is clicked then the history.replace() method should be called with the argument ""/login"",
TEST_23: When the logout button is clicked then the page should be navigated to LoginRoute and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url,
TEST_1: When ""/products"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url,
TEST_2: Products Route should consist of an HTML input element with type attribute value as ""search"",
TEST_3: Products Route should consist of an HTML main heading element with text content as ""Category"",
TEST_4: Products Route should consist of HTML paragraph elements with text content as the values of the key ""name"" in each item from the categoryOptions provided,
TEST_5: Products Route should consist of HTML image elements with alt attribute value as ""rating {ratingId}"" and src as the value of key ""imageUrl"" of each item in ratingsList provided,
TEST_6: Products Route should consist of HTML button element with text content as ""Clear Filters"",
TEST_7: When Products Route is opened, an HTTP GET request should be made to productsApiUrl with query parameters ""title_search"", ""category"", and ""rating"" with initial values as empty strings,
TEST_8: When the HTTP GET request in the Products Route is successful, then the page should consist of the HTML main heading elements with text content as the value of the key ""title"" in each item from the productsResponse,
TEST_9: When a non-empty value is provided in an HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value to query parameter ""title_search"",
TEST_10: When a category is clicked, an HTTP GET request should be made with the id of the category as the value to query parameter ""category"",
TEST_11: When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value to query parameter ""rating"",
TEST_12: When all the filters in Products Route are applied and the ""Clear Filters"" button is clicked, then an HTTP GET request should be made to productsApiUrl with initial values of the query parameters,
TEST_13: When the HTTP GET request made in Products Route is unsuccessful, then the page should consist of the HTML image element with alt attribute value as ""products failure"" and src as the given Failure view image URL,
TEST_14: When the HTTP GET request made to productsApiUrl returns products list as empty, then no products view should be displayed,
TEST_15: When ""/login"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image url,
TEST_16: When the Login is successful, then the history.replace() method should be called with the argument ""/"",
TEST_24: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt text as ""not found"" and src as the given not found image URL
```"
9416dedf1a354f5f9210ca433cd68780,nxtTrendzSpecificProductDetails,RJSCP809S4,/home/workspace/reactjs/coding-practices/nxtTrendzSpecificProductDetails,/home/workspace/.tmp/reactjs/coding-practices/nxtTrendzSpecificProductDetails/src,"In this project, let's build a **Nxt Trendz - Specific Product Details** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-product-details-output-v0.gif"" alt=""product details output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Success](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-product-details-success-sm-output-v0.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Failure](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-product-details-error-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Success](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-product-details-success-lg-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Failure](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-product-details-error-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When an unauthenticated user, tries to access the Product Item Details Route, then the page should be navigated to Login Route
- When an authenticated user clicks on a product in the Products Route, then the page should be navigated to Product Item Details route
- When an authenticated user opens the Product Item Details Route,
  - An HTTP GET request should be made to **productDetailsApiUrl** with `jwt_token` in the Cookies and product `id` as path parameter
  - **_loader_** should be displayed while fetching the data
  - After the data is fetched successfully, display the product details and similar products received in the response
  - Initially, the quantity of the product should be `1`
  - The quantity of the product should be incremented by one when the plus icon is clicked
  - The quantity of the product should be decremented by one when the minus icon is clicked
  - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-product-details-error-lg-output.png) should be displayed
    - When the **Continue Shopping** button in the [Failure view](https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-product-details-error-lg-output.png) is clicked, then the page should be navigated to Products Route

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**productDetailsApiUrl**

#### API: `https://apis.ccbp.in/products/:id`

#### Example: `http://localhost:3000/products/16`

#### Method: `GET`

#### Description:

Returns a response containing the Product details

#### Sample Success Response

```json
{
  ""id"":16,
  ""image_url"":""https://assets.ccbp.in/frontend/react-js/ecommerce/cloths-long-fork.png"",
  ""title"":""Embroidered Net Gown"",""price"":62990,""description"":""An Embroidered Net Gown is the clothing worn by a bride during a wedding ceremony. It enhances your beauty wearing this vibrant, gorgeous, and beautiful Wedding Gown. Find your dream wedding dress today. It features foldable, one hoop steel, two layers of tulles, and is elastic in the waist part. "",
  ""brand"":""Manyavar"",
  ""total_reviews"":879,
  ""rating"":3,
  ""availability"":""In Stock"",
  ""similar_products"":[
    {
      ""id"":1,
      ""image_url"":""https://assets.ccbp.in/frontend/react-js/ecommerce/clothes-cap.png"",
      ""title"":""Wide Bowknot Hat"",
      ""style"":""Wide Bowknot Hat for Women and Girls (Multicolor)"",
      ""price"":288,
      ""description"":""This Summer's perfect White Wide Brim Straw Beach hat is perfect for a hot day. It has the Floppy Style which gives you good coverage from the sun's hot rays and is sure to make the right style statement. It is made of high-quality & skin-friendly paper straw material and lightweight. "",
      ""brand"":""MAJIK"",
      ""total_reviews"":245,
      ""rating"":3.6,
      ""availability"":""In Stock""
    },
      ...
  ]
}
```

#### Sample Failure Response

```json
{
  ""status_code"": 404,
  ""error_msg"": ""Product Not Found""
}
```

</details>

<details>
<summary>Components Structure</summary>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-specific-product-details-component-breakdown-structure.png"" alt=""component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/ProductCard/index.js`
- `src/components/ProductCard/index.css`
- `src/components/ProductItemDetails/index.js`
- `src/components/ProductItemDetails/index.css`
- `src/components/SimilarProductItem/index.js`
- `src/components/SimilarProductItem/index.css`

</details>

### Quick Tips

<details close>
<summary>Click to view</summary>
<br>

- The `line-height` CSS property sets the height of a line box. It's commonly used to set the distance between lines of text.

  ```
  line-height: 1.5;
  ```

    <br/>
    <img src=""https://assets.ccbp.in/frontend/react-js/line-height-img.png"" alt=""cursor pointer"" style=""width:90%; max-width: 600px;""/>

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` Route should consist of `/` in the URL path
- `Login` Route should consist of `/login` in the URL path
- `Products` Route should consist of `/products` in the URL path
- `Product Item Details` Route should consist of `/products/:id` in the URL path
- `Cart` Route should consist of `/cart` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`

- Prime User credentials

  ```
   username: rahul
   password: rahul@2021
  ```

- Non-Prime User credentials

  ```
   username: raja
   password: raja@2021
  ```

- Wrap the Loader component with an HTML container element and add the `data-testid` attribute value as `loader` to it

  ```jsx
  <div data-testid=""loader"">
    <Loader type=""ThreeDots"" color=""#0b69ff"" height={80} width={80} />
  </div>
  ```

- The product image in Product Item Details Route should have the alt as **product**
- The similar product image in Product Item Details Route should have the alt as **similar product {product title}**

  ```example
  similar product Wide Bowknot Hat
  ```

- `BsPlusSquare`, `BsDashSquare` icons from react-icons should be used for **plus** and **minus** buttons in ProductItemDetails Route
- The Product Item Details Route should consist of two HTML button elements with `data-testid` attribute values as **plus** and **minus** respectively

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/star-img.png](https://assets.ccbp.in/frontend/react-js/star-img.png) alt should be **star**
- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-error-view-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-error-view-img.png) alt should be **error view**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #12022f; width: 150px; padding: 10px; color: white"">Hex: #12022f</div>
<div style=""background-color: #616e7c; width: 150px; padding: 10px; color: white"">Hex: #616e7c</div>
<div style=""background-color: #171f46; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>
<div style=""background-color: #cbced2; width: 150px; padding: 10px; color: black"">Hex: #cbced2</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #3b82f6; width: 150px; padding: 10px; color: white"">Hex: #3b82f6</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: When ""/product-details/:id"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url.
TEST_2: When the HTTP GET request made in Product Item Details Route is unsuccessful, then the page should consist of the HTML image element with alt attribute value as ""failure view"" and src as the given Failure view image URL.
TEST_3: When the HTTP GET request made in Product Item Details Route is unsuccessful, the page should consist of the HTML main heading element with text content as ""Product Not Found"".
TEST_4: When the HTTP GET request made in Product Item Details Route is unsuccessful, the page should consist of the HTML button element with text content as ""Continue Shopping"".
TEST_5: When the HTTP GET request made in Product Item Details Route is unsuccessful and the ""Continue Shopping"" button is clicked, then the page should be navigated to Products Route.
TEST_6: Page should consist of at least two HTML list items and the similarProductsList received from the response should be rendered using a unique key as a prop for each similar product item respectively.
TEST_7: When the Product Item Details Route is opened, an HTTP GET request should be made to productDetailsApiUrl with the product ""id"" as path parameter.
TEST_8: When the Product Item Details Route is opened, an HTML container element with data-testid attribute value as ""loader"" should be displayed while the HTTP GET request is in progress.
TEST_9: When the HTTP GET request in the Product Item Details Route is successful, then the page should consist of the HTML image elements with alt attribute value as ""product"" and src as the value of key ""image_url"" from the productDetailsResponse received.
TEST_10: When the HTTP GET request in the Product Item Details Route is successful, then the page should consist of the HTML main heading elements with text content as the value of the key ""title"" from the productDetailsResponse received.
TEST_11: When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""price"" from the productDetailsResponse received.
TEST_12: When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""rating"" from the productDetailsResponse received.
TEST_13: When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""total_reviews"" from the productDetailsResponse received.
TEST_14: When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""description"" from the productDetailsResponse received.
TEST_15: When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""availability"" from the productDetailsResponse received.
TEST_16: When the HTTP GET request in the Product Item Details route is successful, then the page should consist of an HTML paragraph element with text content as the value of the key ""brand"" from the productDetailsResponse received.
TEST_17: JS code implementation for Product Item Details should use ""BsPlusSquare"" and ""BsDashSquare"" from the react-icons package.
TEST_18: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid attribute value as ""plus"".
TEST_19: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with data-testid attribute value as ""minus"".
TEST_20: When the HTTP GET request in the Product Item Details route is successful, an HTML paragraph element with text content as ""1"" for quantity should be displayed.
TEST_21: When the HTTP GET request in the Product Item Details route is successful, an HTML button element with text content as ""ADD TO CART"" should be displayed.
TEST_22: When the HTML button with data-testid ""plus"" is clicked, the quantity should be incremented by one.
TEST_23: When the HTML button with data-testid ""minus"" is clicked, the quantity should be decremented by one.
TEST_24: When the HTML button with data-testid ""minus"" is clicked, the quantity should not be decremented below one.
TEST_25: Page should consist of at least two HTML unordered list elements to display the links in the Header and the list of similar products.
TEST_26: Page should consist of at least six HTML list items to display the links in Header and the list of similar products.
TEST_27: Page should consist of HTML image elements with alt text starting with ""similar product"" and src as the value of the key ""image_url"" received in the ""similar_products"" list received in the response.
TEST_28: Page should consist of HTML paragraph element with text content as the value of the key ""title"" received in the ""similar_products"" list received in the response.
TEST_29: Page should consist of HTML paragraph element with text content as the value of the key ""brand"" received in the ""similar_products"" list received in the response.
TEST_30: Page should consist of HTML paragraph element with text content as the value of the key ""rating"" received in the ""similar_products"" list received in the response.
TEST_31: Page should consist of HTML paragraph element with text content as the value of the key ""price"" received in the ""similar_products"" list received in the response.
TEST_32: When ""/login"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image url.
TEST_33: When the Login is successful, then the history.replace() method should be called with the argument ""/"".
TEST_34: When ""/"" is provided in the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url.
TEST_35: When ""/"" is provided in the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt as ""clothes that get you noticed"" and src as given home image URL.
TEST_36: When the Products link is clicked then the page should be navigated to Products Route and consist of an HTML main heading element with text content as ""Category"".
TEST_37: When the Cart link is clicked, then the page should be navigated to Cart Route and consist of an HTML image element with alt as ""cart"" and src as given cart image URL.
TEST_38: When the logout button is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"".
TEST_39: When the logout button is clicked then the history.replace() method should be called with the argument ""/login"".
TEST_40: When the logout button is clicked then the page should be navigated to LoginRoute and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url.
TEST_41: When ""/products"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image url.
TEST_42: Products Route should consist of an HTML input element with type attribute value as ""search"".
TEST_43: Products Route should consist of an HTML paragraph elements with text content as the value of the key ""name"" in each item from the categoryOptions provided.
TEST_44: Products Route should consist of HTML image elements with alt attribute value as ""rating {ratingId}"" and src as the value of key ""imageUrl"" of each item in ratingsList provided.
TEST_45: Products Route should consist of HTML button element with text content as ""Clear Filters"".
TEST_46: When Products Route is opened, an HTTP GET request should be made to productsApiUrl with query parameters ""title_search"", ""category"", and ""rating"" with initial values as empty strings.
TEST_47: When the HTTP GET request in the Products Route is successful, then the page should consist of the HTML main heading elements with text content as the value of the key ""title"" in each item from the productsResponse.
TEST_48: When a non-empty value is provided in an HTML input element for search and the Enter key is pressed, an HTTP GET request should be made with the value provided in the HTML input element as the value to query parameter ""title_search"".
TEST_49: When a category is clicked, an HTTP GET request should be made with the id of the category as the value to query parameter ""category"".
TEST_50: When a rating is clicked, an HTTP GET request should be made with the id of the rating as the value to query parameter ""rating"".
TEST_51: When all the filters in Products Route are applied and the ""Clear Filters"" button is clicked, then an HTTP GET request should be made to productsApiUrl with initial values of the query parameters.
TEST_52: Each product card should be wrapped with the ""Link"" from react-router-dom.
TEST_53: When the HTTP GET request made in Products Route is unsuccessful, then the page should consist of the HTML image element with alt attribute value as ""products failure"" and src as the given Failure view image URL.
TEST_54: When the HTTP GET request made to productsApiUrl returns products list as empty, then no products view should be displayed.
TEST_55: When a Product card is clicked in Products Route, then the page should be navigated to the Product Item Details route with ""/product-details/:id"" in the URL path.
TEST_56: When the ""/bad-path"" is provided as the URL in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML image element with alt text as ""not found"" and src as the given not found image URL.
```"
d3d58b27a7b94facabc9be5787acc77f,passwordManager,RJSCPKS537,/home/workspace/reactjs/coding-practices/passwordManager,/home/workspace/.tmp/reactjs/coding-practices/passwordManager/src,"In this project, let's build a **Password Manager** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/passowrd-manager-output-v0.gif"" alt=""password manager"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - No Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-no-passwords-sm-output-v2.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Masked Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-masked-passwords-sm-output-v2.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Show Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-no-passwords-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Masked Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-masked-passwords-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Show Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the website input, username input, and password input should be empty and [No Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-no-passwords-lg-output.png) should be displayed
- When non-empty values are provided for the website, username, and password and the **Add** button is clicked,
  - A new password item should be added to the list of passwords
  - The passwords count should be incremented by one
  - The **stars image** should be displayed in the password items instead of the passwords
  - The value of the input fields for website, username, and password should be updated to their initial values
  - When the **Show Password** is checked, then the password should be displayed instead of the **stars image**
- When a non-empty value is provided in the search input field, then password items whose website is matched with the search input value irrespective of the case should be displayed
- When a non-empty value is provided in the search input field, and if the website of any password item does not match the value given in the search input, then [No Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-no-passwords-lg-output.png) should be displayed
- When the delete button of a password item is clicked,
  - The respective password item should be deleted from the list of passwords
  - The passwords count should be decremented by one
- When all password items are deleted, then [No Passwords View](https://assets.ccbp.in/frontend/content/react-js/password-manager-no-passwords-lg-output.png) should be displayed
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- HTML input element for website should have the placeholder as **Enter Website**
- HTML input element for username should have the placeholder as **Enter Username**
- HTML input element for password should have the placeholder as **Enter Password**
- The delete button for each password item should have the data-testid as **delete**
</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/password-manager-logo-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-logo-img.png) alt should be **app logo**
- [https://assets.ccbp.in/frontend/react-js/password-manager-sm-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-sm-img.png) alt should be **password manager**
- [https://assets.ccbp.in/frontend/react-js/password-manager-lg-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-lg-img.png) alt should be **password manager**
- [https://assets.ccbp.in/frontend/react-js/password-manager-website-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-website-img.png) alt should be **website**
- [https://assets.ccbp.in/frontend/react-js/password-manager-username-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-username-img.png) alt should be **username**
- [https://assets.ccbp.in/frontend/react-js/password-manager-password-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-password-img.png) alt should be **password**
- [https://assets.ccbp.in/frontend/react-js/password-manager-search-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-search-img.png) alt should be **search**
- [https://assets.ccbp.in/frontend/react-js/no-passwords-img.png](https://assets.ccbp.in/frontend/react-js/no-passwords-img.png) alt should be **no passwords**
- [https://assets.ccbp.in/frontend/react-js/password-manager-stars-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-stars-img.png) alt should be **stars**
- [https://assets.ccbp.in/frontend/react-js/password-manager-delete-img.png](https://assets.ccbp.in/frontend/react-js/password-manager-delete-img.png) alt should be **delete**
</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #9ba9eb; width: 150px; padding: 10px; color: black"">Hex: #9ba9eb</div>
<div style=""background-color: #c3caea; width: 150px; padding: 10px; color: black"">Hex: #c3caea</div>
<div style=""background-color: #5763a5; width: 150px; padding: 10px; color: black"">Hex: #5763a5</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #454f84; width: 150px; padding: 10px; color: white"">Hex: #454f84</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: black"">Hex: #0b69ff</div>
<div style=""background-color: #94a3b8; width: 150px; padding: 10px; color: black"">Hex: #94a3b8</div>
<div style=""background-color: #b6c3ca; width: 150px; padding: 10px; color: black"">Hex: #b6c3ca</div>
<div style=""background-color: #7683cb; width: 150px; padding: 10px; color: black"">Hex: #7683cb</div>
<div style=""background-color: #f59e0b; width: 150px; padding: 10px; color: black"">Hex: #f59e0b</div>
<div style=""background-color: #10b981; width: 150px; padding: 10px; color: black"">Hex: #10b981</div>
<div style=""background-color: #f97316; width: 150px; padding: 10px; color: black"">Hex: #f97316</div>
<div style=""background-color: #14b8a6; width: 150px; padding: 10px; color: black"">Hex: #14b8a6</div>
<div style=""background-color: #b91c1c; width: 150px; padding: 10px; color: black"">Hex: #b91c1c</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #0ea5e9; width: 150px; padding: 10px; color: black"">Hex: #0ea5e9</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: When two passwords are added, then the page should consist of at least two HTML list items and the passwords list should be rendered using a unique key as a prop for each password item.
TEST_2: Page should consist of an HTML image element with alt attribute value as ""app logo"" and src as the given logo URL.
TEST_3: Page should consist of an HTML main heading element with text content as ""Add New Password"".
TEST_4: Page should consist of an HTML form element.
TEST_5: Page should consist of an HTML image element with alt attribute value as ""website"" and src as the given website image URL.
TEST_6: Page should consist of an HTML input element with the placeholder as ""Enter Website"" and type as ""text"".
TEST_7: Page should consist of an HTML image element with alt attribute value as ""username"" and src as the given username image URL.
TEST_8: Page should consist of an HTML input element with the placeholder as ""Enter Username"" and type as ""text"".
TEST_9: Page should consist of an HTML image element with alt attribute value as ""password"" and src as the given password image URL.
TEST_10: Page should consist of an HTML input element with the placeholder as ""Enter Password"" and type as ""password"".
TEST_11: Page should consist of an HTML button element with ""Add"" as text content and type as ""submit"".
TEST_12: Page should consist of an HTML image element with alt attribute value as ""password manager"" and src as the given password manager URL.
TEST_13: Page should consist of an HTML main heading element with text content as ""Your Passwords"".
TEST_14: Page should initially consist of an HTML paragraph element to display the count of the passwords with text content as ""0"".
TEST_15: Page should consist of an HTML image element with alt attribute value as ""search"" and src as the given search image URL.
TEST_16: Page should consist of an HTML input element with type attribute value as ""search"".
TEST_17: Page should consist of an HTML input element with type attribute value as ""checkbox"" and label text as ""Show passwords"".
TEST_18: Page should initially consist of an HTML image element with alt attribute value as ""no passwords"" and src as the given no passwords image URL.
TEST_19: Page should initially consist of an HTML paragraph element with text content as ""No Passwords"".
TEST_20: When a non-empty value is provided in an HTML input element with the placeholder as ""Enter Website"", then that text should be displayed in the HTML input element.
TEST_21: When a non-empty value is provided in an HTML input element with the placeholder as ""Enter UserName"", then that text should be displayed in the HTML input element.
TEST_22: When a non-empty value is provided in an HTML input element with the placeholder as ""Enter Password"", then that text should be displayed in the HTML input element.
TEST_23: When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of at least one HTML unordered list element to display the list of password items.
TEST_24: When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of at least one HTML list item to display the list of password items.
TEST_25: When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML paragraph element with text content as website provided.
TEST_26: When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML paragraph element with text content as username provided.
TEST_27: When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML image element with alt attribute value as ""stars"" and src as the given stars image URL.
TEST_28: When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML button element with data-testid as ""delete"".
TEST_29: When values are provided for a website, username, and password and the Add button is clicked, then the page should consist of an HTML image element with alt attribute value as ""delete"" and src as the given delete URL.
TEST_30: When a new password is added, then the count of the passwords should be incremented by one.
TEST_31: When a new password is added and ""Show passwords"" is checked, then the page should consist of an HTML paragraph element with text content as password provided.
TEST_32: When a non-empty value is provided in the search input element, then that text should be displayed in the search input element.
TEST_33: When new passwords are added and a non-empty value is provided in the search input element, the password items should be filtered irrespective of the case.
TEST_34: When new passwords are added and a non-empty value is provided in the search input element, and no password item includes the value given in the search input, then the page should consist of an HTML image element with alt attribute value as ""no passwords"" and src as the given no passwords image URL.
TEST_35: When a new password is added and a non-empty value is provided in the search input element, and no password item includes the value given in the search input, then the page should consist of an HTML paragraph element with text content as ""No Passwords"".
TEST_36: When a new password is added and the delete button of a password item is clicked, then the respective password item should be deleted.
TEST_37: When a new password is added and the delete button of a password item is clicked, then the page should consist of an HTML image element with alt attribute value as ""no passwords"" and src as the given no passwords image URL.
TEST_38: When a new password is added and the delete button of a password item is clicked, then the page should consist of an HTML paragraph element with text content as ""No Passwords"".
```"
d6b6c6c3bb8d407bb0c21f4578bbe529,planetsApp,RJSCP4DA5Y,/home/workspace/reactjs/coding-practices/planetsApp,/home/workspace/.tmp/reactjs/coding-practices/planetsApp/src,"In this project, let's build a **Planets App** by applying the concepts we have learned till now.

### Refer to the video below:

<br/>
<div style=""text-align: center;"">
  <video style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/planets-app-output.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/planets-app-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- `planetsList` should be displayed using **React Slick**
- The `PlanetsSlider` component receives the `planetsList` as a prop. It consists of a list of planet objects with the following properties in each planet object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |     id      |  String   |
  |    name     |  String   |
  |  imageUrl   |  String   |
  | description |  String   |

- When the next button is clicked on the page, the next planet details in the `planetsList` should be displayed
- When the previous button is clicked on the page, the previous planet details in the `planetsList` should be displayed

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/planets-app-keys-breakdown.png"" alt=""planets keys breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/planets-app-component-structure-breakdown.png"" alt=""component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/PlanetsSlider/index.js`
- `src/components/PlanetsSlider/index.css`
- `src/components/PlanetItem/index.js`
- `src/components/PlanetItem/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

- To build this project, take a look at the <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=c1dc8b6e-864b-4417-9767-471b9e745405&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Slick</a> reading material

**The following instructions are required for the tests to pass**

- The planets should have the alt as the value of the key `name` from planet objects in the `planetsList`
- The app should consist of an HTML container element with `data-testid` as `planets`

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/planets-app/planets-bg-img.png](https://assets.ccbp.in/frontend/react-js/planets-app/planets-bg-img.png) planets background image

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #05acff; width: 150px; padding: 10px; color: black"">Hex: #05acff</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.",
6b1f50ce43b94d8797fec1df1f5b1d04,primeVideo,RJSCPDXAGS,/home/workspace/reactjs/coding-practices/primeVideo,/home/workspace/.tmp/reactjs/coding-practices/primeVideo/src,"In this project, let's build a **Prime Video** by applying the concepts we have learned till now.

### Refer to the video below:

<br/>
<div style=""text-align: center;"">
  <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/prime-video-output.mp4"" type=""video/mp4"">
    
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/prime-video-lg-output-img.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- **Action Movies List** and **Comedy Movies List** should be displayed using **React Slick**
- The `App` is provided with `moviesList`. It consists of a list of movieItem objects with the following properties in each movieItem object

  |     Key      | Data Type |
  | :----------: | :-------: |
  |      id      |  String   |
  | thumbnailUrl |  String   |
  |   videoUrl   |  String   |
  |  categoryId  |  String   |

- When the **next button** is clicked in any of the sliders, the next movie items thumbnail in the corresponding moviesList should be displayed
- When the **previous button** is clicked in any of the sliders, the previous movie items thumbnail in the corresponding moviesList should be displayed <br/>

  <div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/prime-video-next-previous-buttons-img.png"" alt=""movie slider buttons"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
  </div>
<br/>

- When you click on the **thumbnail**, then the popup should be opened,

  - And corresponding video should be displayed using **React player** component from `react-player`
    <div style=""text-align: center;"">
      <img src=""https://assets.ccbp.in/frontend/content/react-js/prime-video-popup-img.png"" alt=""popup"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
  </div>
  <br/>
  - When the close button is clicked, then the popup should be closed

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/prime-video-compoment-structure-breakdown.png"" alt=""component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/PrimeVideo/index.js`
- `src/components/PrimeVideo/index.css`
- `src/components/MoviesSlider/index.js`
- `src/components/MovieItem/index.js`
- `src/components/MovieItem/index.css`

</details>

### Quick Tips

<details close>
<summary>Click to view</summary>

- To build this project, take a look at the <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=c1dc8b6e-864b-4417-9767-471b9e745405&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Slick</a>, <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=b01fca1c-aa5c-4d79-b81e-0220e7649bd0&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Popup</a> and <a href='https://learning.ccbp.in/frontend-development/course?c_id=2f4192f7-7495-49ca-a6ce-6b74005e25f1&s_id=b6392b63-25f6-4215-be09-9f23ad91d789&t_id=416f0cab-8425-413b-9157-c7b4d4ae4467' target=""_blank"">React Video Player</a> reading materials

- To style popup content use `.popup-content` class

```jsx
<Popup
  modal
  trigger={
    //write code here
  }
  className=""popup-content""
>
  //write code here
</Popup>
```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- One frame of the slider should have 4 thumbnails
- The thumbnail images in the app should have alt as **thumbnail**
- The close button in the popup should have the `data-testid` as **closeButton**
- `IoMdClose` from react-icons should be used for **Close Icon** in the Popup

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/prime-video-img.png](https://assets.ccbp.in/frontend/react-js/prime-video-img.png) alt should be **prime video**

</details>

<details>
<summary>Colors</summary>

<br/>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #231f20; width: 150px; padding: 10px; color: white"">Hex: #231f20</div>
<br/>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: Page should consist of an HTML image element with alt attribute value as ""prime video"",
TEST_2: Page should consist of an HTML main heading element with text content as ""Action Movies"",
TEST_3: Page should consist of an HTML image element with src as given prime video image URL,
TEST_4: Page should consist of at least four HTML image elements with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided,
TEST_5: Page should consist of an HTML main heading element with text content as ""Comedy Movies"",
TEST_6: When the next arrow button is clicked in Action Movies Slider, the page should consist of the next HTML image element with alt attribute value as ""thumbnail"",
TEST_7: Page should consist of at least four HTML image elements with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""COMEDY"" in the ""moviesList"" provided,
TEST_8: Page should consist of at least two Slider components from react-slick,
TEST_9: When the next arrow button is clicked in Action Movies Slider, the page should consist of the next HTML image element with src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided,
TEST_10: When the previous arrow button is clicked in Action Movies Slider, the page should consist of the previous HTML image element with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided,
TEST_11: When the next arrow button is clicked in Comedy Movies Slider, the page should consist of the next HTML image element with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided,
TEST_12: When the previous arrow button is clicked in Comedy Movies Slider, the page should consist of the next HTML image element with alt attribute value as ""thumbnail"" and src as the value of the key ""thumbnailUrl"" of the movie item with categoryId as ""ACTION"" in the ""moviesList"" provided,
TEST_13: When a thumbnail is clicked from Action Movies List, then the page should consist of Popup from reactjs-popup,
TEST_14: When a thumbnail is clicked from Action Movies List, then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"",
TEST_15: JS code implementation for MovieItem Component should use ""IoMdClose"" from the react-icons package,
TEST_16: When a thumbnail is clicked from Comedy Movies List, then the page should consist of Popup from reactjs-popup,
TEST_17: When a thumbnail is clicked from Comedy Movies List, then the page should consist of the HTML button element with data-testid attribute value as ""closeButton"",
TEST_18: When the close button is clicked inside the popup, then the page should not consist of Popup from reactjs-popup,
TEST_19: When any thumbnail in the moviesList is clicked, then the page should consist of ReactPlayer component from react-player
```"
1370492dd0dd4dbcb0003de7133ec5a4,randomNumberGenerator,RJSCPWGO67,/home/workspace/reactjs/coding-practices/randomNumberGenerator,/home/workspace/.tmp/reactjs/coding-practices/randomNumberGenerator/src,"In this project, let's build a **Random Number Generator** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/random-number-generator-output-v2.gif"" alt=""random-no-generator"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/random-number-generator-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/random-number-generator-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the number displayed should be **0**
- When **Generate** button is clicked, a random number should be generated in the range of 0 to 100 and displayed
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/RandomNumberGenerator/index.js`
- `src/components/RandomNumberGenerator/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use `Math.random()` function to get a random number (float value) in range 0 to less than 1 (`0 <= randomNumber < 1`)

  ```
   Math.random()
  ```

- You can use `Math.ceil()` function to round a **number up to the next largest integer**

  ```js
  console.log(Math.ceil(95.906698007537561)); // 96
  ```

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/random-no-generator-bg.png](https://assets.ccbp.in/frontend/react-js/random-no-generator-bg.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #e4ebf3; width: 150px; padding: 10px; color: black"">Hex: #e4ebf3</div>
<div style=""background-color: #eaebed; width: 150px; padding: 10px; color: black"">Hex: #eaebed</div>
<div style=""background-color: #0b69ff; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #333333; width: 150px; padding: 10px; color: white"">Hex: #333333</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of an HTML main heading element with text content as ""Random Number"",
TEST_2: Page should consist of an HTML paragraph element with text content as ""Generate a random number in the range of 0 to 100"",
TEST_3: Page should consist of an HTML button element with text content as ""Generate"",
TEST_4: Page should initially consist of an HTML paragraph element with text content as ""0"",
TEST_5: When the ""Generate"" button is clicked, Math.random() should be used to generate a random number,
TEST_6: When the ""Generate"" button is clicked, a random number between 0 and 100 should be generated and displayed
```"
5be72c85a9bf448eb7532b3e9107a5c7,registrationForm,RJSCPYGCFL,/home/workspace/reactjs/coding-practices/registrationForm,/home/workspace/.tmp/reactjs/coding-practices/registrationForm/src,"In this project, let's build a **Registration Form** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/registration-form-output-v2.gif"" alt=""registration form desktop output"" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/registration-form-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Registration](https://assets.ccbp.in/frontend/content/react-js/registration-form-lg-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Registration Error](https://assets.ccbp.in/frontend/content/react-js/registration-form-lg-error-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Registration Success](https://assets.ccbp.in/frontend/content/react-js/registration-form-lg-success-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Display an error message with the text **Required** for an empty field on blur
- When the **Submit** button is clicked, display an error message with the text **Required**,
  - if only the first name is provided
  - if only the last name is provided
  - if both first name and last name are not provided
- Display the [Registration Success View](https://assets.ccbp.in/frontend/content/react-js/registration-form-lg-success-output-v2.png) on successful submit
- When **Submit Another Response** button is clicked, then the form should be displayed

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/RegistrationForm/index.js`
- `src/components/RegistrationForm/index.css`

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- The `blur` event happens when an HTML element has lost focus

  ```jsx
  <input onBlur={eventHandler} />
  ```

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/success-icon-img.png](https://assets.ccbp.in/frontend/react-js/success-icon-img.png) alt should be **success**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ea580c; width: 150px; padding: 10px; color: black"">Hex: #ea580c</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #cbd2d9; width: 150px; padding: 10px; color: black"">Hex: #cbd2d9</div>
<div style=""background-color: #9aa5b1; width: 150px; padding: 10px; color: black"">Hex: #9aa5b1</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #fef2f4; width: 150px; padding: 10px; color: black"">Hex: #fef2f4</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","```
Here are the test cases to verify:
TEST_1: Page should consist of an HTML heading element with ""Registration"" as text content,
TEST_2: Page should consist of an HTML input element with label text as ""FIRST NAME"",
TEST_3: Page should consist of an HTML input element with label text as ""LAST NAME"",
TEST_4: When a non-empty first name is provided and the submit button is clicked with an empty last name, the page should consist of an HTML paragraph element with ""Required"" as text content,
TEST_5: When the submit button is clicked with empty fields, the error message ""Required"" should be displayed for both input fields,
TEST_6: When a non-empty last name is provided and the submit button is clicked with an empty first name, the error message ""Required"" should be displayed,
TEST_7: On successful submission, an HTML paragraph element with ""Submitted Successfully"" as text content should be displayed,
TEST_8: On successful submission, an HTML image element with the given image URL and alt text as ""success"" should be displayed,
TEST_9: When the ""Submit Another Response"" button is clicked, the registration form should be displayed,
TEST_10: When the empty first name field is blurred, the error message ""Required"" should be displayed,
TEST_11: When the empty last name field is blurred, the error message ""Required"" should be displayed,
TEST_12: When both the first and last name fields are empty and blurred, the error message ""Required"" should be displayed for both fields,
TEST_13: When a non-empty first name is provided and blurred, the error message should not be displayed,
TEST_14: When both the first and last names are provided and blurred, the error message should not be displayed for both fields
```"
f9c59d4d05ad49ebb951a8fdb5e422a7,reviewsApp,RJSCPUPPE1,/home/workspace/reactjs/coding-practices/reviewsApp,/home/workspace/.tmp/reactjs/coding-practices/reviewsApp/src,"In this project, let's build a **Reviews App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/reviews-app-output-v2.gif"" alt=""reviews app output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/reviews-app-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/reviews-app-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the left arrow is clicked, then the previous review details should be displayed
- When the right arrow is clicked, then the next review details should be displayed
- If the review that is being displayed is the first in the list of reviews
  - There should not be any state change when the left arrow is clicked
- If the review that is being displayed is the last in the list of reviews
  - There should not be any state change when the right arrow is clicked
- The `ReviewsCarousel` component receives the `reviewsList` as a prop. It consists of a list of review objects with the following properties in each review object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |   imgUrl    |  String   |
  |  username   |  String   |
  | companyName |  String   |
  | description |  String   |

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/ReviewsCarousel/index.js`
- `src/components/ReviewsCarousel/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The button to check the previous review should have the data-testid attribute with value as **leftArrow**
- The button to check the next review should have the data-testid attribute with value as **rightArrow**
- The profile images should have the alt as the value of the key `username` from each review object provided
</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/reviews-bg.png](https://assets.ccbp.in/frontend/react-js/reviews-bg.png)
- [https://assets.ccbp.in/frontend/react-js/left-arrow-img.png](https://assets.ccbp.in/frontend/react-js/left-arrow-img.png) alt should be **left arrow**
- [https://assets.ccbp.in/frontend/react-js/right-arrow-img.png](https://assets.ccbp.in/frontend/react-js/right-arrow-img.png) alt should be **right arrow**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #171f46 ; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: Page should consist of HTML heading element with text content as ""Reviews"",
TEST_2: Page should consist of HTML button element with data-testid attribute value as ""leftArrow"",
TEST_3: Page should consist of HTML button element with data-testid attribute value as ""rightArrow"",
TEST_4: Page should consist of HTML image element with alt as ""left arrow"" and src attribute value as URL for left arrow image,
TEST_5: Page should consist of HTML image element with alt as ""right arrow"" and src attribute value as URL for right arrow image,
TEST_6: Page should initially display the first review, and consist of HTML image element with alt value equal to the ""username"" value in reviewsList provided,
TEST_7: Page should initially display the first review, and consist of HTML image element with alt value equal to the ""username"" and src attribute value equal to the ""imgUrl"" value in reviewsList provided,
TEST_8: Page should initially display the first review, and consist of HTML paragraph element with text content equal to the ""username"" value in reviewsList provided,
TEST_9: Page should initially display the first review, and consist of HTML paragraph element with text content equal to the ""companyName"" value in reviewsList provided,
TEST_10: Page should initially display the first review, and consist of HTML paragraph element with text content equal to the ""description"" value in reviewsList provided,
TEST_11: When the right arrow is clicked, the page should consist of an HTML image element with alt value equal to the ""username"" and src attribute value equal to the ""imgUrl"" value of the next review in reviewsList provided,
TEST_12: When the right arrow is clicked, the page should consist of HTML paragraph elements with ""username"", ""companyName"", and ""description"" of the next review in reviewsList provided,
TEST_13: When the left arrow is clicked, the page should consist of an HTML image element with alt attribute value equal to the ""imgUrl"" value of the previous review in reviewsList provided,
TEST_14: When the left arrow is clicked, the page should consist of HTML paragraph elements with ""username"", ""companyName"", and ""description"" of the previous review in reviewsList provided,
TEST_15: When viewing the first review, there should not be any state change when the HTML button element with data-testid attribute value as ""leftArrow"" is clicked,
TEST_16: When viewing the last review, there should not be any state change when the HTML button element with data-testid attribute value as ""rightArrow"" is clicked
```"
e82de0be74f34f0fb53d9e369e282b6f,rockPaperScissors,RJSCPYF1D1,/home/workspace/reactjs/coding-practices/rockPaperScissors,/home/workspace/.tmp/reactjs/coding-practices/rockPaperScissors/src,"In this project, let's build a **Rock Paper Scissors** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/rock-paper-scissors-output.gif"" alt=""rock paper scissors output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/rock-paper-scissors-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Playing View](https://assets.ccbp.in/frontend/content/react-js/rock-paper-scissors-lg-playing-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Game Results View](https://assets.ccbp.in/frontend/content/react-js/rock-paper-scissors-lg-game-results-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Game Rules View](https://assets.ccbp.in/frontend/content/react-js/rock-paper-scissors-lg-rules-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When you click on the **Rules** button, it should trigger a popup, and rules image should be displayed
- Initially, the score displayed should be `0`
- The App is provided with `choicesList`. It consists of a list of choice objects with the following properties in each choice object

  |   Key    | Data Type |
  | :------: | :-------: |
  |    id    |  String   |
  | imageUrl |  String   |

- When any of the three buttons (i.e Rock, Paper, Scissors) is clicked, then the [Game Results View](https://assets.ccbp.in/frontend/content/react-js/rock-paper-scissors-lg-game-results-output.png) should be displayed
- In the Game Results View, the opponent choice should be generated randomly among these three buttons (i.e Rock, Paper, Scissors)
- When the **Rock** button is clicked, then the rock image should be displayed as your choice in the Game Results View
- When the **Paper** button is clicked, then the paper image should be displayed as your choice in the Game Results View
- When the **Scissors** button is clicked, then the scissors image should be displayed as your choice in the Game Results View

  #### Game Rules

    <details>
    <summary>Click to view the Game Rules</summary>
    <br/>
    <img src=""https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rules-image.png"" alt=""rules image"" style=""width:500px"" />
    <br/>

  - Game result based on choices

    - When your choice is **paper** and the opponent choice is **rock**, then the result will be `YOU WON`
    - When your choice is **scissors** and the opponent choice is **rock**, then the result will be `YOU LOSE`
    - When your choice is **rock** and the opponent choice is **paper**, then the result will be `YOU LOSE`
    - When your choice is **scissors** and the opponent choice is **paper**, then the result will be `YOU WON`
    - When your choice is **rock** and the opponent choice is **scissors**, then the result will be `YOU WON`
    - When your choice is **paper** and the opponent choice is **scissors**, then the result will be `YOU LOSE`
    - When your choice and the opponent choice match, then the result will be `IT IS DRAW`

    </details>

- When the result is `YOU WON`, then the score should be incremented by one
- When the result is `IT IS DRAW`, then there shouldn't be any change in the score
- When the result is `YOU LOSE`, then the score should be decremented by one
- When the **PLAY AGAIN** button is clicked, then the [Playing View](https://assets.ccbp.in/frontend/content/react-js/rock-paper-scissors-lg-playing-output.png) should be displayed

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use `Math.random()` function to get a random number (float value) in range 0 to less than 1 (`0 <= randomNumber < 1`)

  ```
  Math.random()
  ```

- You can use `Math.floor()` function that returns the **largest integer less than or equal to a given number**

  ```js
  console.log(Math.floor(5.95)); // output: 5
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

- You can use **reactjs-popup** for displaying the modal
- `RiCloseLine` icon from `react icons` can be used for the **close** button at `React Popup`

**The following instructions are required for the tests to pass**

- **Styled Components** should be used for styling purposes
- The Page should consist of three HTML button elements with `data-testid` attribute values as **rockButton**, **scissorsButton** and **paperButton** respectively
- In Game Results View, the page should consist of an HTML image element with alt as **your choice** and src as URL for your choice image
- In Game Results View, the page should consist of an HTML image element with alt as **opponent choice** and src as URL for opponent choice image
- **Roboto** should be applied as `font-family` for **Score** value

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rules-image.png](https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rules-image.png) alt should be **rules**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #223a5f; width: 150px; padding: 10px; color: white"">Hex: #223a5f</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto
- Bree Serif

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of HTML main heading element with text content as ""Rock Paper Scissors"",
TEST_2: Page should consist of HTML paragraph element with text content as ""Score"",
TEST_3: Page should initially consist of an HTML paragraph element with ""0"" as text content,
TEST_4: Page should initially consist of HTML button elements with data-testid attribute values as ""rockButton"", ""paperButton"" and ""scissorsButton"",
TEST_5: Page should initially consist of HTML image elements with alt attribute value as the values of the key ""id"" and src attribute value as the values of the key ""imageUrl"" in choicesList provided,
TEST_6: Page should initially consist of HTML button element with text content as ""Rules"",
TEST_7: When the HTML button element with text content as ""Rules"" is clicked, it should trigger a popup using react-popup,
TEST_8: When the HTML button with text content ""Rules"" is clicked, then the page should consist of HTML image element with alt attribute value as ""rules"" and src attribute value as URL for rules image,
TEST_9: When the HTML button with data-testid ""rockButton"" is clicked, then the page should consist of an HTML main heading element with text content as ""Rock Paper Scissors"",
TEST_10: When the HTML button with data-testid ""rockButton"" is clicked, then the page should consist of an HTML paragraph element with text content as ""Score"",
TEST_11: When the HTML button with data-testid ""rockButton"" is clicked, then the page should consist of an HTML button element with text content as ""PLAY AGAIN"",
TEST_12: Page should initially consist of an HTML paragraph element with ""0"" as text content with ""font-family"" value as ""Roboto"",
TEST_13: In the ""GameResultView"", the page should consist of HTML image element with alt attribute value as ""your choice"" and src attribute value as URL for your choice image,
TEST_14: In the ""GameResultView"", the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for opponent choice image,
TEST_15: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML paragraph element with text content as ""IT IS DRAW"",
TEST_16: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for rock image,
TEST_17: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is rock, then the score value will be the same,
TEST_18: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of an HTML paragraph element with text content as ""YOU WON"",
TEST_19: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for scissors image,
TEST_20: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is a scissors, then the score value will be incremented by one,
TEST_21: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is paper, then the page should consist of an HTML paragraph element with text content as ""YOU LOSE"",
TEST_22: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for paper image,
TEST_23: When the HTML button with data-testid ""rockButton"" is clicked, and if the opponent choice is paper, then the score will be decremented by one,
TEST_24: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML paragraph element with text content as ""YOU WON"",
TEST_25: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is rock, then the page should consist of an HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for rock image,
TEST_26: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is rock, then the score will be incremented by one,
TEST_27: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML paragraph element with text content as ""YOU LOSE"",
TEST_28: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for scissors image,
TEST_29: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is a scissors, then the score will be decremented by one,
TEST_30: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is paper, then the page should consist of an HTML paragraph element with text content as ""IT IS DRAW"",
TEST_31: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for paper image,
TEST_32: When the HTML button with data-testid ""paperButton"" is clicked, and if the opponent choice is paper, then the score will be the same,
TEST_33: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is rock, then the page should consist of HTML paragraph element with text content as ""YOU LOSE"",
TEST_34: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is rock, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for rock image,
TEST_35: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is rock, then the score will be decremented by one,
TEST_36: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML paragraph element with text content as ""IT IS DRAW"",
TEST_37: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is a scissors, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for scissors image,
TEST_38: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is a scissors, then the score will be the same,
TEST_39: When the HTML button with testid ""scissorsButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML paragraph element with text content as ""YOU WON"",
TEST_40: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is paper, then the page should consist of HTML image element with alt attribute value as ""opponent choice"" and src attribute value as URL for paper image,
TEST_41: When the HTML button with data-testid ""scissorsButton"" is clicked, and if the opponent choice is paper, then the score will be incremented by one,
TEST_42: When the HTML button element with text content as ""PLAY AGAIN"" is clicked then it should get back to playing state,
TEST_43: When the HTML button element with text content as ""PLAY AGAIN"" is clicked then the updated score should be displayed
```"
4bdcfe2c3ad84dd695eedf01005052b8,routingPractice,RJSCP4WYNC,/home/workspace/reactjs/coding-practices/routingPractice,/home/workspace/.tmp/reactjs/coding-practices/routingPractice/src,"In this project, let's build a **Routing Practice** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/routing-practice-output.gif"" alt=""routing-practice-desktop-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px), Medium (Size >= 768px)](https://assets.ccbp.in/frontend/content/react-js/routing-practice-sm-output.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/routing-practice-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the **About** link in the header is clicked, then the page should navigate to the `AboutRoute`
- When the **Contact** link in the header is clicked, then the page should navigate to the `ContactRoute`
- When the **Home** link in the header is clicked, then the page should navigate back to the `HomeRoute`
- When an undefined path is provided in the URL, then the page should navigate to the `NotFoundRoute`

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/routing-practice-home-about-component-breakdown-structure.png"" alt="""" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/routing-practice-contact-not-found-component-breakdown-structure.png"" alt="""" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/App.js`
- `src/components/App.css`
- `src/components/Header/index.js`
- `src/components/Header/index.css`
- `src/components/Home/index.js`
- `src/components/Home/index.css`
- `src/components/About/index.js`
- `src/components/About/index.css`
- `src/components/Contact/index.js`
- `src/components/Contact/index.css`
- `src/components/NotFound/index.js`
- `src/components/NotFound/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `HomeRoute` should consist of ""/"" in the URL path
- `AboutRoute` should consist of ""/about"" in the URL path
- `ContactRoute` should consist of ""/contact"" in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js` file

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/wave-logo-img.png](https://assets.ccbp.in/frontend/react-js/wave-logo-img.png) alt should be **wave**
- [https://assets.ccbp.in/frontend/react-js/home-blog-img.png](https://assets.ccbp.in/frontend/react-js/home-blog-img.png) alt should be **home**
- [https://assets.ccbp.in/frontend/react-js/about-blog-img.png](https://assets.ccbp.in/frontend/react-js/about-blog-img.png) alt should be **about**
- [https://assets.ccbp.in/frontend/react-js/contact-blog-img.png](https://assets.ccbp.in/frontend/react-js/contact-blog-img.png) alt should be **contact**
- [https://assets.ccbp.in/frontend/react-js/not-found-blog-img.png](https://assets.ccbp.in/frontend/react-js/not-found-blog-img.png) alt should be **not found**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #6d396b; width: 150px; padding: 10px; color: white"">Hex: #6d396b</div>
<div style=""background-color: #555555; width: 150px; padding: 10px; color: white"">Hex: #555555</div>
<div style=""background-color: #551e53; width: 150px; padding: 10px; color: white"">Hex: #551e53</div>
<div style=""background-color: #12022f; width: 150px; padding: 10px; color: white"">Hex: #12022f</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: Page should consist of an HTML image element in the header with the given logo URL as src and alt text as ""wave"".

TEST_2: Page should consist of a Link from react-router-dom in the header with ""Home"" as text content.

TEST_3: Page should consist of a Link from react-router-dom in the header with ""About"" as text content.

TEST_4: Page should consist of a Link from react-router-dom in the header with ""Contact"" as text content.

TEST_5: Page should consist of an HTML heading element with ""Home"" as text content when rendering HomeRoute initially.

TEST_6: Page should consist of an HTML image element in the HomeRoute with the given home image URL as src, alt text as ""home"" when rendering HomeRoute initially.

TEST_7: When the ""/about"" is provided in the browser tab, the page should navigate to AboutRoute and consist of an HTML heading element with ""About"" as text content.

TEST_8: When the ""/contact"" is provided in the browser tab, the page should navigate to ContactRoute and consist of an HTML heading element with ""Contact"" as text content.

TEST_9: When the ""/bad-path"" is provided in the browser tab, the page should navigate to NotFoundRoute and consist of an HTML heading element with ""Not Found"" as text content.

TEST_10: When the About link in the header is clicked, the page should navigate to AboutRoute with ""/about"" in the URL path.

TEST_11: When the Contact link in the header is clicked, the page should navigate to ContactRoute with ""/contact"" in the URL path.

TEST_12: When the Home link in the header is clicked, the page should navigate to HomeRoute with ""/"" in the URL path.

"
2d3c0cf5ff96410f8f1199364256a2f5,show/HideApp,RJSCP8DO88,/home/workspace/reactjs/coding-practices/showHideApp,/home/workspace/.tmp/reactjs/coding-practices/showHideApp/src,"In this project, let's build a **Show/Hide App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/show-hide-output.gif"" alt=""reviews-app-output"" style=""max-width:85%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/show-hide-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/show-hide-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- The **Firstname** and **Lastname** should be hidden initially
- When the **Show/Hide Firstname** button is clicked,
  - If the Firstname is hidden, then it should be displayed
  - If the Firstname is displayed, then it should be hidden
- When the **Show/Hide Lastname** button is clicked,
  - If the Lastname is hidden, then it should be displayed
  - If the Lastname is displayed, then it should be hidden

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/ShowHide/index.js`
- `src/components/ShowHide/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #fa7257 ; width: 150px; padding: 10px; color: white"">Hex: #fa7257</div>
<div style=""background-color: #fc63a7 ; width: 150px; padding: 10px; color: white"">Hex: #fc63a7</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #dd1264 ; width: 150px; padding: 10px; color: white"">Hex: #dd1264</div>
<div style=""background-color: #fddddb ; width: 150px; padding: 10px; color: black"">Hex: #fddddb</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should initially consist of an HTML button element with text content as ""Show/Hide Firstname"",
TEST_2: Page should initially consist of an HTML button element with text content as ""Show/Hide Lastname"",
TEST_3: CSS code implementation should not contain the ""display"" property with value ""none"",
TEST_4: When the ""Show/Hide Firstname"" button is clicked, an HTML paragraph element with text content ""Joe"" should be displayed,
TEST_5: When the text content ""Joe"" is displayed and the ""Show/Hide Firstname"" button is clicked again, the HTML paragraph element with text content ""Joe"" should be hidden,
TEST_6: When the ""Show/Hide Lastname"" button is clicked, an HTML paragraph element with text content ""Jonas"" should be displayed,
TEST_7: When the text content ""Jonas"" is displayed and the ""Show/Hide Lastname"" button is clicked again, the HTML paragraph element with text content ""Jonas"" should be hidden
```"
b2a98dfdcc4044b3978cd66cb75f49c3,simpleTodos,RJSCP1Q3F3,/home/workspace/reactjs/coding-practices/deleteTodo,/home/workspace/.tmp/reactjs/coding-practices/deleteTodo/src,"In this project, let's build a **Simple Todos** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/simple-todos-output.gif"" alt=""simple todos output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/simple-todos-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/simple-todos-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of given todos should be displayed with a delete button for each todo
- When **Delete** button of a todo is clicked, then the respective todo should be deleted
- The `SimpleTodos` will consist of the `initialTodosList`. It consists of a list of todo objects with the following properties in each todo object

  |  Key  | Data Type |
  | :---: | :-------: |
  |  id   |  Number   |
  | title |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/simple-todos-component-structure.png"" alt=""simple todos component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/SimpleTodo/index.js`
- `src/components/SimpleTodo/index.css`
- `src/components/TodoItem/index.js`
- `src/components/TodoItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffc2a0; width: 150px; padding: 10px; color: black"">Hex: #ffc2a0</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #ff8542; width: 150px; padding: 10px; color: white"">Hex: #ff8542</div>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop for each todo item from the initialTodosList,
TEST_2: Page should consist of an HTML main heading element with text content as ""Simple Todos"",
TEST_3: Page should initially consist of HTML paragraph elements with text content equal to the values of the key ""title"" from the initialTodosList provided,
TEST_4: Page should initially consist of at least eight HTML button elements with text content as ""Delete"",
TEST_5: When the ""Delete"" button of a todo item is clicked, the respective todo item should be removed from the list
```"
b2a98dfdcc4044b3978cd66cb75f49c3,simpleTodos,RJSCP1Q3F3,/home/workspace/reactjs/coding-practices/simpleTodos,/home/workspace/.tmp/reactjs/coding-practices/simpleTodos/src,"In this project, let's build a **Simple Todos** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/simple-todos-output.gif"" alt=""simple todos output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/simple-todos-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/simple-todos-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of given todos should be displayed with a delete button for each todo
- When **Delete** button of a todo is clicked, then the respective todo should be deleted
- The `SimpleTodos` will consist of the `initialTodosList`. It consists of a list of todo objects with the following properties in each todo object

  |  Key  | Data Type |
  | :---: | :-------: |
  |  id   |  Number   |
  | title |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/simple-todos-component-structure.png"" alt=""simple todos component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/SimpleTodo/index.js`
- `src/components/SimpleTodo/index.css`
- `src/components/TodoItem/index.js`
- `src/components/TodoItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffc2a0; width: 150px; padding: 10px; color: black"">Hex: #ffc2a0</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #ff8542; width: 150px; padding: 10px; color: white"">Hex: #ff8542</div>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop for each todo item from the initialTodosList,
TEST_2: Page should consist of an HTML main heading element with text content as ""Simple Todos"",
TEST_3: Page should initially consist of HTML paragraph elements with text content equal to the values of the key ""title"" from the initialTodosList provided,
TEST_4: Page should initially consist of at least eight HTML button elements with text content as ""Delete"",
TEST_5: When the ""Delete"" button of a todo item is clicked, the respective todo item should be removed from the list
```"
e27694fd256d4c87823b18b60079353b,socialButtons,RJSCPJK1TN,/home/workspace/reactjs/coding-practices/socialButtonsApp,/home/workspace/.tmp/reactjs/coding-practices/socialButtonsApp/src,"In this project, let's build a **Social Buttons** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/social-buttons-lg-output.png"" alt=""social-buttons-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/social-buttons-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/social-buttons-lg-output.png)
</details>

### Completion Instructions

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `index.js`
- `index.css`
</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/social-buttons-bg.png](https://assets.ccbp.in/frontend/react-js/social-buttons-bg.png)
</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #eab308; width: 150px; padding: 10px; color: white"">Hex: #eab308</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #1d4ed8; width: 150px; padding: 10px; color: white"">Hex: #1d4ed8</div>
<div style=""background-color: #323f4b; width: 150px; padding: 10px; color: white"">Hex: #323f4b</div>
</details>

<details>
<summary>Font-families</summary>

- Roboto
- Bree Serif
</details>

> ### _Things to Keep in Mind_
>
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: JSX code implementation should consist of JSX syntax for an HTML main heading element at least once,
TEST_2: JSX code implementation should consist of JSX syntax using <Button /> to render buttons at least three times
```"
1fd38a6eb5be440d8d6141e31d79e1e3,speedometer,RJSCPZS9RB,/home/workspace/reactjs/coding-practices/speedometer,/home/workspace/.tmp/reactjs/coding-practices/speedometer/src,"In this project, let's build a **Speedometer** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/speedometer-ouput.gif"" alt=""speedometer output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/speedometer-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/speedometer-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- The speed should initially be 0mph

  > Here mph means Miles per hour

- When Accelerate button is clicked,
  - If the speed is less than 200mph, the speed should be increased by 10mph
  - If the speed is equal to 200mph, the speed should not be increased
- When Apply Brake button is clicked
  - If the speed is greater than 0mph, then the speed should be decreased by 10mph
  - If the speed is equal to 0mph, the speed should not be decreased

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Speedometer/index.js`
- `src/components/Speedometer/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the below cursor CSS property for buttons to set the type of mouse cursor, to show when the mouse pointer is over an element,

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below outline CSS property for buttons and input elements to remove the highlighting when the elements are clicked,

  ```
    outline: none;
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/speedometer-img.png](https://assets.ccbp.in/frontend/react-js/speedometer-img.png) alt should be **speedometer**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #07080c ; width: 150px; padding: 10px; color: white"">Hex: #07080c</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #cbd5e1 ; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
<div style=""background-color: #0b69ff ; width: 150px; padding: 10px; color: white"">Hex: #0b69ff</div>
<div style=""background-color: #94a3b8 ; width: 150px; padding: 10px; color: white"">Hex: #94a3b8</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of an HTML heading element with text content as ""SPEEDOMETER"",
TEST_2: Page should consist of an HTML image element with alt attribute value as ""speedometer"",
TEST_3: Page should initially consist of an HTML main heading element with text content as ""Speed is 0mph"",
TEST_4: Page should consist of an HTML paragraph element with text content as ""Min Limit is 0mph, Max Limit is 200mph"",
TEST_5: Page should consist of an HTML button element with text content as ""Accelerate"",
TEST_6: Page should consist of an HTML button element with text content as ""Apply Brake"",
TEST_7: When the ""Accelerate"" button is clicked, the speed should be increased by ten,
TEST_8: When the ""Apply Brake"" button is clicked, the speed should be decreased by ten,
TEST_9: When the ""Apply Brake"" button is clicked, the speed should not be decreased below zero
```"
2df12c1bcb4247beaad67987d70ca595,stopwatch,RJSCP7SC0R,/home/workspace/reactjs/coding-practices/stopwatch,/home/workspace/.tmp/reactjs/coding-practices/stopwatch/src,"In this project, let's build a **Stopwatch** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/stopwatch-output-v2.gif"" alt=""stopwatch output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/stopwatch-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/stopwatch-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the **Start** button is clicked, then the Stopwatch should start running
- When the **Stop** button is clicked, then the Stopwatch should stop running
- When the **Reset** button is clicked, then the Stopwatch should be reset to zero
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Stopwatch/index.js`
- `src/components/Stopwatch/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `box-shadow` CSS property to apply the box-shadow effect to containers

  ```
    box-shadow: 0px 4px 16px 0px #bfbfbf;
  ```

  <br/>
  <img src=""https://assets.ccbp.in/frontend/content/react-js/box-shadow-img.png"" alt=""box shadow"" style=""width:200px"" />

- You can use `Math.floor()` function that returns the **largest integer less than or equal to a given number**

  ```js
  console.log(Math.floor(5.95)); // output: 5
  ```
</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/stopwatch-timer.png](https://assets.ccbp.in/frontend/react-js/stopwatch-timer.png) alt should be **stopwatch** 
- [https://assets.ccbp.in/frontend/react-js/stopwatch-sm-bg.png](https://assets.ccbp.in/frontend/react-js/stopwatch-sm-bg.png)
- [https://assets.ccbp.in/frontend/react-js/stopwatch-lg-bg.png](https://assets.ccbp.in/frontend/react-js/stopwatch-lg-bg.png)
</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #333333 ; width: 150px; padding: 10px; color: white"">Hex: #333333</div>
<div style=""background-color: #1db05f ; width: 150px; padding: 10px; color: white"">Hex: #1db05f</div>
<div style=""background-color: #ef0d36 ; width: 150px; padding: 10px; color: white"">Hex: #ef0d36</div>
<div style=""background-color: #eaa800 ; width: 150px; padding: 10px; color: white"">Hex: #eaa800</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of an HTML heading element with text content as ""Stopwatch"",
TEST_2: Page should consist of an HTML button element with text content as ""Start"",
TEST_3: Page should consist of two HTML button elements with text content as ""Stop"" and ""Reset"",
TEST_4: Page should initially consist of an HTML heading element with text content as ""00:00"",
TEST_5: Page should consist of an HTML image element with alt attribute value as ""stopwatch"" and src attribute value as the given stopwatch image URL,
TEST_6: When the ""Start"" button is clicked, the timer should start,
TEST_7: When the ""Stop"" button is clicked, the timer should stop,
TEST_8: When the ""Reset"" button is clicked, the timer should reset to zero,
TEST_9: When the ""Start"" button is clicked after stopping the timer, the timer should resume from where it was stopped
```"
b8312245c9914f0a928852d4706f9539,superOverLeague,RJSCPTQ3N6,/home/workspace/reactjs/coding-practices/superOverLeagueApp,/home/workspace/.tmp/reactjs/coding-practices/superOverLeagueApp/src,"In this project, let's build a **Super Over League** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/super-over-league-lg-output.png"" alt=""supe-over-league-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/super-over-league-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/super-over-league-lg-output.png)

</details>

### Completion Instructions

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `index.js`
- `index.css`
</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/rcb-img.png](https://assets.ccbp.in/frontend/react-js/rcb-img.png)
- [https://assets.ccbp.in/frontend/react-js/csk-img.png](https://assets.ccbp.in/frontend/react-js/csk-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: JSX code implementation should consist of JSX syntax for an HTML main heading element at least once,
TEST_2: JSX code implementation should consist of JSX syntax for an HTML image element at least once
```"
3b4aefef908b446ca1beb15d1252b831,welcomeApp,RJSCPRQUI5,/home/workspace/reactjs/coding-practices/welcomeApp,/home/workspace/.tmp/reactjs/coding-practices/welcomeApp/src,"In this project, let's build a **Welcome App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/welcome-app-output-v2.gif"" alt=""welcome app output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/welcome-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/welcome-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the page is opened, a button should be displayed with text content as **Subscribe**
- When the **Subscribe** button is clicked
  - The text content in the **Subscribe** button should be changed to **Subscribed**
- When the **Subscribed** button is clicked
  - The text content in the **Subscribed** button should be changed to **Subscribe**

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Welcome/index.js`
- `src/components/Welcome/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #1e293b ; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #f0bb03 ; width: 150px; padding: 10px; color: white"">Hex: #f0bb03</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>

</details>

<details>
<summary>Font-families</summary>

- Bree Serif

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of an HTML main heading element with text content as ""Welcome"",
TEST_2: Page should initially consist of an HTML button element with text content as ""Subscribe"",
TEST_3: CSS code implementation should not contain the ""display"" property with value ""none"",
TEST_4: When the ""Subscribe"" button is clicked, its text content should change to ""Subscribed"",
TEST_5: When the ""Subscribed"" button is clicked, its text content should change back to ""Subscribe""
```"
fd703f949ecf4fc3a1eb578ba8c08a80,alertNotifications,RJSCP4QWZN,/home/workspace/reactjs/coding-practices/alertNotifications,/home/workspace/.tmp/reactjs/coding-practices/alertNotifications/src,"In this project, let's build an **Alert Notifications** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/alert-notifications-lg-output.png"" alt=""Alert Notifications"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/alert-notifications-sm-output-v0.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/alert-notifications-lg-output-v0.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- For each notification, the Notification component should receive the below elements as children
  - Icon
  - Heading
  - Description

</details>

<details>
<summary>Components Structure</summary>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/alert-notifications-component-breakdown-structure.png"" alt=""Alert-Notificaions-app-component-breakdown-structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Notification/index.js`
- `src/components/Notification/index.css`
- `src/components/AlertNotifications/index.js`
- `src/components/AlertNotifications/index.css`

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Access the elements passed to the `Notification` Component using the **children** prop.
- `AiFillCheckCircle` from react-icons should be used for **Success** notification.
- `RiErrorWarningFill` from react-icons should be used for **Error** notification.
- `MdWarning` from react-icons should be used for **Warning** notification.
- `MdInfo` from react-icons should be used for **Info** notification.
- `GrFormClose` from react-icons should be used as **Close** icon in each notification.

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #64748b; width: 150px; padding: 10px; color: black"">Hex: #64748b</div>
<div style=""background-color: #2dca73; width: 150px; padding: 10px; color: black"">Hex: #2dca73</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: black"">Hex: #ff0b37</div>
<div style=""background-color: #ffb800; width: 150px; padding: 10px; color: black"">Hex: #ffb800</div>
<div style=""background-color: #0f81e0; width: 150px; padding: 10px; color: black"">Hex: #0f81e0</div>
<div style=""background-color: #e5e5e5; width: 150px; padding: 10px; color: black"">Hex: #e5e5e5</div>
<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of HTML main heading element with text content as ""Alert Notifications"",
TEST_2: In AlertNotifications component JS code implementation should use ""AiFillCheckCircle"" for the Success notification from the react-icons package,
TEST_3: Page should consist of HTML main heading element with text content as ""Success"",
TEST_4: Page should consist of HTML paragraph element with text content as ""You can access all the files in the folder"",
TEST_5: In AlertNotifications component JS code implementation should use ""RiErrorWarningFill"" for the Error notification from the react-icons package,
TEST_6: Page should consist of HTML main heading element with text content as ""Error"",
TEST_7: Page should consist of HTML paragraph element with text content as ""Sorry, you are not authorized to have access to delete the file"",
TEST_8: In AlertNotifications component JS code implementation should use ""MdWarning"" for the Warning notification from the react-icons package,
TEST_9: Page should consist of HTML main heading element with text content as ""Warning"",
TEST_10: Page should consist of HTML paragraph element with text content as ""Viewers of this file can see comments and suggestions"",
TEST_11: In AlertNotifications component JS code implementation should use ""MdInfo"" for the Info notification from the react-icons package,
TEST_12: Page should consist of HTML main heading element with text content as ""Info"",
TEST_13: Page should consist of HTML paragraph element with text content as ""Anyone on the internet can view these files"",
TEST_14: In Notification component JS code implementation should use ""GrFormClose"" for each notification from the react-icons package,
TEST_15: Notification component should render the children props that have been passed from the AlertNotifications component
```"
7fb9a5428b7e4075bd5f78787914760b,appStore,RJSCPA6SPQ,/home/workspace/reactjs/coding-practices/appStore,/home/workspace/.tmp/reactjs/coding-practices/appStore/src,"In this project, let's build an **App Store** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/app-store-output.gif"" alt=""app store output"" style=""max-width:90%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/app-store-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/app-store-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the **Social** tab should be active and the apps with **Social** as their category should be displayed
- When a value is provided in the search input
  - The apps in the active category, that include search input value in their name should be displayed
  - When another tab is clicked, the apps in the corresponding category, that include search input value in their name should be displayed
  - The search should be case insensitive
- When the search input is empty,
  - All the apps in the active category should be displayed
  - When another tab is clicked, the apps in the corresponding category should be displayed
- The `AppStore` component is provided with `tabsList`. It consists of a list of tabItem objects with the following properties in each tabItem object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |    tabId    |  String   |
  | displayText |  String   |

- The `AppStore` component is provided with `appsList`. It consists of a list of app objects with the following properties in each app object

  |   Key    | Data Type |
  | :------: | :-------: |
  |  appId   |  Number   |
  | appName  |  String   |
  | imageUrl |  String   |
  | category |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/app-store-component-structure-breakdown.png"" alt=""app store component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/AppStore/index.js`
- `src/components/AppStore/index.css`
- `src/components/TabItem/index.js`
- `src/components/TabItem/index.css`
- `src/components/AppItem/index.js`
- `src/components/AppItem/index.css`

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The apps should have the alt attribute equal to `appName` of each app object

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/app-store/app-store-search-img.png](https://assets.ccbp.in/frontend/react-js/app-store/app-store-search-img.png) alt should be **search icon**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #fff1eb; width: 150px; padding: 10px; color: black"">Hex: #fff1eb</div>
<div style=""background-color: #ace0f9; width: 150px; padding: 10px; color: black"">Hex: #ace0f9</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #7b8794; width: 150px; padding: 10px; color: white"">Hex: #7b8794</div>
<div style=""background-color: #dfe2e5; width: 150px; padding: 10px; color: black"">Hex: #dfe2e5</div>
<div style=""background-color: #2563eb; width: 150px; padding: 10px; color: white"">Hex: #2563eb</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>

</details>

<details>
<summary>Font-families</summary>

- Bree Serif

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the tabsList, appsList should be rendered using a unique key as a prop for each tab item and app item respectively.
TEST_2: Page should consist of HTML main heading element with text content as ""App Store"".
TEST_3: Page should consist of HTML input element with type attribute value as ""search"".
TEST_4: Page should consist of HTML image element with alt attribute value as ""search icon"" and src attribute value as URL for the search icon.
TEST_5: Page should consist of at least two HTML unordered list elements to display the tabsList and appsList respectively.
TEST_6: Page should initially consist of at least fourteen HTML list items.
TEST_7: Page should consist of at least four HTML button elements each inside a HTML list item.
TEST_8: Page should consist of at least four HTML button elements with text content equal to the ""displayText"" value of each item in tabsList provided.
TEST_9: Page should initially consist of at least ten HTML image elements inside HTML list items.
TEST_10: Page should initially consist of at least ten HTML paragraph elements inside HTML list items.
TEST_11: Page should initially display the apps from the ""Social"" category.
TEST_12: Page should initially consist of HTML image elements with alt value equal to ""appName"" value and src value equal to ""imageUrl"" value of each item with ""category"" equal to ""Social"" in appsList provided.
TEST_13: Page should initially consist of HTML paragraph elements with text content equal to the ""appName"" value of each item with ""category"" equal to ""Social"" in appsList provided.
TEST_14: When a non-empty value is provided in search input, the list of apps displayed should consist of the search input provided in the app name irrespective of the case.
TEST_15: When a tab is clicked, the filtered apps list should be displayed according to the active tab.
TEST_16: When a non-empty search text ""m"" is provided in search input, and a tab is clicked the filtered search results should be displayed.
TEST_17: When a non-empty random search text is provided in search input, and a tab is clicked the filtered search results should be displayed.
```"
e9112781e43140f48d0ad4bb4fa35403,appointmentsApp,RJSCPW369F,/home/workspace/reactjs/coding-practices/appointmentsApp,/home/workspace/.tmp/reactjs/coding-practices/appointmentsApp/src,"In this project, let's build an **Appointments App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/appointments-app-output.gif"" alt=""appointments app output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/appointments-app-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/appointments-app-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of appointments should be empty and the title input and date input should be empty
- When non-empty values are provided for title and date and the **Add** button is clicked,
  - A new appointment should be added to the list of appointments
  - The value inside the input elements for title and date should be updated to their initial values
- When the **Star** on an appointment is clicked, the appointment should be starred
- The status of the **Starred** filter is updated by clicking on it
- When the **Starred** filter is active, all the starred appointments should be filtered and displayed
- When the **Starred** filter is inactive, the list of all appointments should be displayed
</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/appointments-app-component-breakdown-structure.png"" alt=""component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Appointments/index.js`
- `src/components/Appointments/index.css`
- `src/components/AppointmentItem/index.js`
- `src/components/AppointmentItem/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- The HTML input element with the type `date` is designed for the user to select the date from a date picker

  ```jsx
  <input type=""date"" />
  ```

- The `format` function in the date-fns package can be used to get the formatted date string in the given format

  ```jsx
  import {format} from 'date-fns'

  console.log(format(new Date(2021, 19, 07), 'dd MMMM yyyy, EEEE')) // 19 July 2021, Monday
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- For the `format` function, pass the format string `dd MMMM yyyy, EEEE` as the second argument
- The star button in each appointment should have the data-testid as **star**
- The star image in each appointment should have alt as **star**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/appointments-app/appointments-img.png](https://assets.ccbp.in/frontend/react-js/appointments-app/appointments-img.png) alt should be **appointments**
- [https://assets.ccbp.in/frontend/react-js/appointments-app/star-img.png](https://assets.ccbp.in/frontend/react-js/appointments-app/star-img.png)
- [https://assets.ccbp.in/frontend/react-js/appointments-app/filled-star-img.png](https://assets.ccbp.in/frontend/react-js/appointments-app/filled-star-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #9796f0; width: 150px; padding: 10px; color: black"">Hex: #9796f0</div>
<div style=""background-color: #fbc7d4; width: 150px; padding: 10px; color: black"">Hex: #fbc7d4</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #171f46; width: 150px; padding: 10px; color: white"">Hex: #171f46</div>
<div style=""background-color: #8b5cf6; width: 150px; padding: 10px; color: black"">Hex: #8b5cf6</div>
<div style=""background-color: #b5b7c4; width: 150px; padding: 10px; color: black"">Hex: #b5b7c4</div>
<div style=""background-color: #9897f0; width: 150px; padding: 10px; color: black"">Hex: #9897f0</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: When a new appointment is added, the page should consist of at least one HTML list item and the appointments list should be rendered using a unique key as a prop for each appointment item.
TEST_2: Page should consist of HTML main heading element with text content as ""Add Appointment"".
TEST_3: Page should consist of HTML input element with label text as ""Title"".
TEST_4: Page should consist of HTML input element with label text as ""Date"" and type attribute value as ""date"".
TEST_5: Page should consist of HTML button element with text content as ""Add"".
TEST_6: Page should consist of HTML image element with alt as ""appointments"" and src attribute value as the URL for appointments image.
TEST_7: Page should consist of HTML main heading element with text content as ""Appointments"".
TEST_8: Page should consist of HTML button element with text content as ""Starred"".
TEST_9: Page should consist of HTML unordered list element to display the list of appointments.
TEST_10: When a non-empty value is provided in the HTML input element with the label text ""Title"", the value inside the input element should be updated.
TEST_11: When a non-empty value is provided in the HTML input element with the label text ""Date"", the value inside the input element should be updated.
TEST_12: When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, the values inside the HTML input elements should be updated to their initial values.
TEST_13: When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, the page should consist of an HTML list item to display the appointment.
TEST_14: When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, an HTML paragraph element with text content as the title provided should be displayed.
TEST_15: When non-empty values are provided in the HTML input elements for title and date, and the Add button is clicked, an HTML paragraph element with text content as the formatted date should be displayed.
TEST_16: When a new appointment is added, the appointment should consist of an HTML button element with data-testid as ""star"".
TEST_17: When a new appointment is added, the appointment should consist of an HTML image element with alt as ""star"" and src value as URL for the star image.
TEST_18: When a new appointment is added and the HTML button with data-testid as ""star"" is clicked, the appointment should consist of an HTML image with alt as ""star"" and src value as URL for the filled star image.
TEST_19: When the HTML button with text content as ""Starred"" is active, only the list of starred appointments should be displayed.
TEST_20: When the HTML button with text content as ""Starred"" is inactive, all the list of appointments should be displayed.
```"
3b4b3726747546fb90df6ec57c8fee81,emojiGame,RJSCPU31DB,/home/workspace/reactjs/coding-practices/emojiGame,/home/workspace/.tmp/reactjs/coding-practices/emojiGame/src,"In this project, let's build an **Emoji Game** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/emoji-game-output-v2.gif"" alt=""emoji-game-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/emoji-game-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Game View](https://assets.ccbp.in/frontend/content/react-js/emoji-game-lg-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Won Game](https://assets.ccbp.in/frontend/content/react-js/emoji-game-won-game-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Lose Game](https://assets.ccbp.in/frontend/content/react-js/emoji-game-lose-game-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the _Score_ and _Total Score_ for the current game should be **0**
- When an **Emoji** is clicked,

  - If it is not the same as any of the previously clicked emojis, then the _Score_ should be incremented by one
  - If all the emojis are clicked exactly once

    - [Won Game](https://assets.ccbp.in/frontend/content/react-js/emoji-game-won-game-lg-output.png) view should be displayed

  - If it is the same as any of the previously clicked emojis
    - [Lose Game](https://assets.ccbp.in/frontend/content/react-js/emoji-game-lose-game-lg-output.png) view should be displayed
  - If the score achieved in the current game is higher than the previous scores then the _Top Score_ should be updated accordingly

- When the _Play Again_ button is clicked, then we should be able to play the game again
  - The _Score_ value should be reset but not the _Top Score_ value
- The `EmojiGame` component receives the `emojisList` as a prop. It consists of a list of emoji objects with the following properties in each emoji object

  |    Key    | Data Type |
  | :-------: | :-------: |
  |    id     |  Number   |
  | emojiName |  String   |
  | emojiUrl  |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/emoji-game-game-view-component-breakdown-structure.png"" alt=""emoji game view component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/emoji-game-win-lose-component-breakdown-structure.png"" alt=""emoji game win or lose component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/EmojiGame/index.js`
- `src/components/EmojiGame/index.css`
- `src/components/NavBar/index.js`
- `src/components/NavBar/index.css`
- `src/components/EmojiCard/index.js`
- `src/components/EmojiCard/index.css`
- `src/components/WinOrLoseCard/index.js`
- `src/components/WinOrLoseCard/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- You can use the `cursor` CSS property to specify the mouse cursor to be displayed when pointing over an element

  ```
    cursor: pointer;
  ```

  <br/>
   <img src=""https://assets.ccbp.in/frontend/content/react-js/cursor-pointer-img.png"" alt=""cursor pointer"" style=""width:100px"" />

- You can use the below `outline` CSS property for buttons and input elements to remove the highlighting when the elements are clicked

  ```
    outline: none;
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The emojis should have the alt as the value of the key `emojiName` from each emoji object

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/game-logo-img.png](https://assets.ccbp.in/frontend/react-js/game-logo-img.png) alt should be **emoji logo**
- [https://assets.ccbp.in/frontend/react-js/won-game-img.png](https://assets.ccbp.in/frontend/react-js/won-game-img.png)
- [https://assets.ccbp.in/frontend/react-js/lose-game-img.png](https://assets.ccbp.in/frontend/react-js/lose-game-img.png)

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #6a59ff ; width: 150px; padding: 10px; color: white"">Hex: #6a59ff</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #3d3d3d ; width: 150px; padding: 10px; color: white"">Hex: #3d3d3d</div>

#### Background Colors

<div style=""background-color: #9796f0 ; width: 150px; padding: 10px; color: white"">Hex: #9796f0</div>
<div style=""background-color: #fbc7d4 ; width: 150px; padding: 10px; color: black"">Hex: #fbc7d4</div>
<div style=""background-color: #ffffff33 ; width: 150px; padding: 10px; color: black"">Hex: #ffffff33</div>
<div style=""background-color: #ffce27 ; width: 150px; padding: 10px; color: black"">Hex: #ffce27</div>

#### Border Colors

<div style=""background-color: #ffffff30 ; width: 150px; padding: 10px; color: black"">Hex: #ffffff30</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the emojisList should be rendered using a unique key as a prop for each emoji card.
TEST_2: When the user clicks the HTML button element with the text ""Play Again"" then the Top Score of the game should change if the user score is greater than the Top Score.
TEST_3: Page should consist of an HTML main heading element with ""Emoji Game"" as text content.
TEST_4: Page should consist of an HTML image element with alt as ""emoji logo"" and src attribute value as the URL for emoji game logo.
TEST_5: Page should consist of an HTML paragraph element with text content as ""Score: 0"" initially.
TEST_6: Page should consist of an HTML paragraph element with text content as ""Top Score: 0"" initially.
TEST_7: Page should consist of at least twelve HTML button elements each inside a HTML list item.
TEST_8: Page should consist of at least twelve HTML image elements each inside a HTML button element with alt equal to the ""emojiName"" value and src equal to the ""emojiUrl"" value in emojisList provided.
TEST_9: When the user has won the game then the page should consist of an HTML main heading element with ""You Won"" as text content.
TEST_10: When the user has won the game then the page should consist of an HTML paragraph element with ""Best Score"" as text content.
TEST_11: When the user has won the game then the page should consist of an HTML paragraph element with ""12/12"" as text content.
TEST_12: When the user has won the game then the page should consist of an HTML button element with ""Play Again"" as text content.
TEST_13: When the user has won the game then the page should consist of an HTML image element with alt as ""win or lose"" and src attribute value as the URL for the won game image.
TEST_14: When the user has won the game then the page should not contain HTML paragraph elements with text content as ""Score"" and ""Top Score"".
TEST_15: When the user clicks an HTML button element with the text ""Play Again"" after completing the game then the game should be started - with at least twelve emojis displayed.
TEST_16: When the user clicks any emoji twice then the page should consist of an HTML main heading element with ""You Lose"" as text content.
TEST_17: When the user clicks an emoji twice then the page should consist of an HTML paragraph element with ""Score"" as text content.
TEST_18: When the user clicks an emoji twice then the page should consist of an HTML button element with ""Play Again"" as text content.
TEST_19: When the user clicks an emoji twice then the page should consist of an HTML image element with alt as ""win or lose"" and src attribute value as the URL for the lose game image.
TEST_20: When the user has lost the game and clicks an HTML button element with the text ""Play Again"" after completing the game then the game should be started - with at least twelve emojis displayed.
```"
6d2fdd10285e4198836c0029fe74c431,evenOddApp,RJSCPM3DAE,/home/workspace/reactjs/coding-practices/evenOddApp,/home/workspace/.tmp/reactjs/coding-practices/evenOddApp/src,"In this project, let's build an **Even Odd App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
<img src=""https://assets.ccbp.in/frontend/content/react-js/even-odd-app-output.gif"" alt=""even-odd-app-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px), Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/even-odd-sm-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/even-odd-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the count should be **0** and **Count is Even** text should be displayed
- When the **Increment** button is clicked,
  - The count should be increased by a random value between 0 to 100
  - If the incremented count is an even number, then the **Count is Even** text should be displayed
  - If the incremented count is an odd number, then the **Count is Odd** text should be displayed

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/EvenOddApp/index.js`
- `src/components/EvenOddApp/index.css`
</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ff6e7f ; width: 150px; padding: 10px; color: white"">Hex: #ff6e7f</div>
<div style=""background-color: #bfe9ff ; width: 150px; padding: 10px; color: black"">Hex: #bfe9ff</div>
<div style=""background-color: #0f172a ; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #334155 ; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #ffffff ; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #1e293b ; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should initially consist of an HTML heading element with text content as ""Count 0"",
TEST_2: Page should initially consist of an HTML paragraph element with text content as ""Count is Even"",
TEST_3: Page should consist of an HTML button element with text content as ""Increment"",
TEST_4: Page should consist of an HTML paragraph element with text content as ""Increase By Random Number Between 0 to 100"",
TEST_5: When the Increment button is clicked, the count should be increased by a random number between zero to hundred,
TEST_6: CSS code implementation should not contain ""display"" property with value ""none"",
TEST_7: When the Increment button is clicked, and the incremented count is even, then the HTML paragraph element text content should be changed to ""Count is Even"",
TEST_8: When the Increment button is clicked, and the incremented count is odd, then the HTML paragraph element text content should be changed to ""Count is Odd""
```"
b7b9cdb95102411fbf5a508b23629103,events,RJSCPVRPWT,/home/workspace/reactjs/coding-practices/events,/home/workspace/.tmp/reactjs/coding-practices/events/src,"In this project, let's build an **Events** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/events-output.gif"" alt=""events output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Large (Size >= 992px) and Extra Large (Size >= 1200px) - No Active Event](https://assets.ccbp.in/frontend/content/react-js/events-no-active-event-view-output.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px) - Yet To Register](https://assets.ccbp.in/frontend/content/react-js/events-yet-to-register-view-output.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px) - Registered](https://assets.ccbp.in/frontend/content/react-js/events-registered-view-output.png)
- [Large (Size >= 992px) and Extra Large (Size >= 1200px) - Registrations Closed](https://assets.ccbp.in/frontend/content/react-js/events-registrations-closed-view-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the page should have the [No Active Event View](https://assets.ccbp.in/frontend/content/react-js/events-no-active-event-view-output.png)
- When the image of an event item with `registrationStatus` as `YET_TO_REGISTER` is clicked, then the [Yet To Register View](https://assets.ccbp.in/frontend/content/react-js/events-yet-to-register-view-output.png) should be displayed
- When the image of an event item with `registrationStatus` as `REGISTERED` is clicked, then the [Registered View](https://assets.ccbp.in/frontend/content/react-js/events-registered-view-output.png) should be displayed
- When the image of an event item with `registrationStatus` as `REGISTRATIONS_CLOSED` is clicked, then the [Registrations Closed View](https://assets.ccbp.in/frontend/content/react-js/events-registrations-closed-view-output.png) should be displayed

- The `Events` component is provided with `eventsList`. It consists of a list of event objects with the following properties in each event object

  |        Key         | Data Type |
  | :----------------: | :-------: |
  |         id         |  String   |
  |      imageUrl      |  String   |
  |        name        |  String   |
  |      location      |  String   |
  | registrationStatus |  String   |

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/events-compoment-structure-breakdown.png"" alt=""component structure breakdown"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/components/Events/index.js`
- `src/components/Events/index.css`
- `src/components/EventItem/index.js`
- `src/components/EventItem/index.css`
- `src/components/ActiveEventRegistrationDetails/index.js`
- `src/components/ActiveEventRegistrationDetails/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The image for each event item should have alt attribute value as **event**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/events-register-img.png](https://assets.ccbp.in/frontend/react-js/events-register-img.png) alt should be **yet to register**
- [https://assets.ccbp.in/frontend/react-js/events-regestered-img.png](https://assets.ccbp.in/frontend/react-js/events-regestered-img.png) alt should be **registered**
- [https://assets.ccbp.in/frontend/react-js/events-registrations-closed-img.png](https://assets.ccbp.in/frontend/react-js/events-registrations-closed-img.png) alt should be **registrations closed**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color: #0967d2; width: 150px; padding: 10px; color: white"">Hex: #0967d2</div>
<div style=""background-color: #323f4b; width: 150px; padding: 10px; color: white"">Hex: #323f4b</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #2dd4bf; width: 150px; padding: 10px; color: black"">Hex: #2dd4bf</div>
<div style=""background-color: #3a4b63; width: 150px; padding: 10px; color: white"">Hex: #3a4b63</div>
<br/>
</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","```
Here are the test cases to verify:
TEST_1: Page should consist of at least two HTML list items and the eventsList should be rendered using a unique key as a prop for each event item,
TEST_2: Page should consist of HTML main heading element with text content as ""Events"",
TEST_3: Page should consist of HTML unordered list element to display the list of events,
TEST_4: Page should consist of at least six HTML list items to display the list of events,
TEST_5: Page should consist of at least six HTML button elements to wrap the image of each inside an HTML list item,
TEST_6: Page should consist of HTML image elements with alt as ""event"" and src attribute value of the key ""imageUrl"" from each object in eventsList provided,
TEST_7: Page should consist of HTML paragraph elements with text content as the value of the key ""name"" from each object in eventsList provided,
TEST_8: Page should consist of HTML paragraph elements with text content as the value of the key ""location"" from each object in eventsList provided,
TEST_9: Page should initially consist of HTML paragraph element with text content as ""Click on an event, to view its registration details"",
TEST_10: When the image of an event item with ""registrationStatus"" as ""YET_TO_REGISTER"" is clicked, then the page should consist of an HTML image element with alt as ""yet to register"" and src attribute value as the given yet to register image URL,
TEST_11: When the image of an event item with ""registrationStatus"" as ""YET_TO_REGISTER"" is clicked, then the page should consist of an HTML paragraph element starting with ""A live performance brings so much to your relationship with dance"",
TEST_12: When the image of an event item with ""registrationStatus"" as ""YET_TO_REGISTER"" is clicked, then the page should consist of an HTML button element with text content as ""Register Here"",
TEST_13: When the image of an event item with ""registrationStatus"" as ""REGISTER"" is clicked, then the page should consist of an HTML image element with alt as ""registered"" and src attribute value as the given registered image URL,
TEST_14: When the image of an event item with ""registrationStatus"" as ""REGISTER"" is clicked, then the page should consist of an HTML main heading element with text content as ""You have already registered for the event"",
TEST_15: When the image of an event item with ""registrationStatus"" as ""REGISTRATIONS_CLOSED"" is clicked, then the page should consist of an HTML image element with alt as ""registrations closed"" and src attribute value as the given registrations closed image URL,
TEST_16: When the image of an event item with ""registrationStatus"" as ""REGISTRATIONS_CLOSED"" is clicked, then the page should consist of an HTML main heading element with text content as ""Registrations Are Closed Now!"",
TEST_17: When the image of an event item with ""registrationStatus"" as ""REGISTRATIONS_CLOSED"" is clicked then the page should consist of an HTML paragraph element starting with ""Stay tuned. We will reopen""
```"
08806910535347f6aef45a9475cb6075,iplDashboardApp,RJSCP9EFN6,/home/workspace/reactjs/coding-practices/iplDashboardApp,/home/workspace/.tmp/reactjs/coding-practices/iplDashboardApp/src,"In this project, let's build an **IPL Dashboard App** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-output-v2.gif"" alt=""ipl-dashboard-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-home-sm-output.png)
- [Extra Small (Size < 576px) and Small (Size >= 576px) - Team Matches](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-team-matches-sm-output-v2.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-home-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Team Matches](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-team-matches-lg-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the app is opened, Home Route should be displayed
- When the Home Route is opened,
  - Make HTTP GET request to the **teamsApiUrl**
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the list of teams should be displayed
- When a team card in Home Route is clicked,
  - Page should be navigated to the Team Matches Route with the URL `/team-matches/:id`
- When the Team Matches Route is opened,
  - Make HTTP GET request to the **teamMatchesApiUrl** with the team id to get the recent matches data of the team
    - Example: `https://apis.ccbp.in/ipl/KKR`
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the team banner, latest match, and list of recent matches should be displayed

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**teamsApiUrl**

#### API: `https://apis.ccbp.in/ipl`

#### Method: `GET`

#### Description:

Returns a response containing the list of all IPL teams

#### Response

```json
{
  ""teams"": [
    {
      ""name"": ""Royal Challengers Bangalore"",
      ""id"": ""RCB"",
      ""team_image_url"": ""https://assets.ccbp.in/frontend/react-js/rcb-logo-img.png"",
      // use value of the key 'name' for alt as `${name}`
    },
    ...
  ],
}
```

**teamMatchesApiUrl**

#### API: `https://apis.ccbp.in/ipl/:id`

#### Example: `https://apis.ccbp.in/ipl/KKR`

#### Method: `GET`

#### Description:

Returns a response containing details of all recent matches of a team

#### Response

```json
{
  ""team_banner_url"": ""https://assets.ccbp.in/frontend/react-js/kkr-team-img.png"",
  ""latest_match_details"": {
    ""umpires"": ""CB Gaffaney, VK Sharma"",
    ""result"": ""Kolkata Knight Riders Won by 7 wickets"",
    ""man_of_the_match"": ""Shubman Gill"",
    ""id"": ""1216545"",
    ""date"": ""2020-09-26"",
    ""venue"": ""At Sheikh Zayed Stadium, Abu Dhabi"",
    ""competing_team"": ""Sunrisers Hyderabad"",
    ""competing_team_logo"": ""https://upload.wikimedia.org/wikipedia/en/thumb/8/81/Sunrisers_Hyderabad.svg/1200px-Sunrisers_Hyderabad.svg.png"",
    // use value of the key 'competing_team' for alt as `latest match ${competing_team}`
    ""first_innings"": ""Sunrisers Hyderabad"",
    ""second_innings"": ""Kolkata Knight Riders"",
    ""match_status"": ""Won"",
  },
  ""recent_matches"": [
    {
      ""umpires"": ""RK Illingworth, K Srinivasan"",
      ""result"": ""Royal Challengers Bangalore Won by 82 runs"",
      ""man_of_the_match"": ""AB de Villiers"",
      ""id"": ""1216540"",
      ""date"": ""2020-10-12"",
      ""venue"": ""At Sharjah Cricket Stadium, Sharjah"",
      ""competing_team"": ""Royal Challengers Bangalore"",
      ""competing_team_logo"": ""https://upload.wikimedia.org/wikipedia/en/thumb/2/2a/Royal_Challengers_Bangalore_2020.svg/1200px-Royal_Challengers_Bangalore_2020.svg.png"",
      // use value of the key 'competing_team' for alt as `competing team ${competing_team}`
      ""first_innings"": ""Royal Challengers Bangalore"",
      ""second_innings"": ""Kolkata Knight Riders"",
      ""match_status"": ""Lost"",
    },
    ...
  ],
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/home-component-structure-img.png"" alt=""home component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/team-matches-component-structure-img.png"" alt=""team matches component structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/Home/index.js`
- `src/components/Home/index.css`
- `src/components/TeamCard/index.js`
- `src/components/TeamCard/index.css`
- `src/components/TeamMatches/index.js`
- `src/components/TeamMatches/index.css`
- `src/components/LatestMatch/index.js`
- `src/components/LatestMatch/index.css`
- `src/components/MatchCard/index.js`
- `src/components/MatchCard/index.css`
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- To display the animated loader, we need to import the Loader component using the below statement

  ```
  import Loader from 'react-loader-spinner'
  ```

- In order to display the given animated loader, pass the `type` and `color` props to the `Loader` component with values as **Oval** and **#ffffff** , respectively

  ```
  <Loader type=""Oval"" color=""#ffffff"" height={50} width={50} />
  ```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The banner image in the Team Matches Route should have the alt attribute value as `team banner`
- The alt attribute values for the images received from the response are given in the **Example response**
- The API responses received from the given api URLs should be converted to camel case
- Wrap the `Loader` component with an HTML container element and add the `testid` attribute value as `loader` to it as shown below
  ```
  <div testid=""loader"">
      <Loader type=""Oval"" color=""#ffffff"" height={50} width={50} />
  </div>
  ```
- Render HomeRoute component when path in URL matches `/`
- Render TeamMatchesRoute component when path in URL matches `/team-matches/:id`
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js` file
- Each TeamMatchesRoute should have different gradient colors as background based on the selected team

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/ipl-dashboard-sm-bg.png](https://assets.ccbp.in/frontend/react-js/ipl-dashboard-sm-bg.png)
- [https://assets.ccbp.in/frontend/react-js/ipl-dashboard-lg-bg.png](https://assets.ccbp.in/frontend/react-js/ipl-dashboard-lg-bg.png)
- [https://assets.ccbp.in/frontend/react-js/ipl-logo-img.png](https://assets.ccbp.in/frontend/react-js/ipl-logo-img.png) alt should be **ipl logo**

</details>

<details>
<summary>Colors</summary>

<br/>

**Background Colors**:

<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color: #a4261d; width: 150px; padding: 10px; color: white"">Hex: #a4261d</div>
<div style=""background-color: #5755a7; width: 150px; padding: 10px; color: white"">Hex: #5755a7</div>
<div style=""background-color: #d91c1f; width: 150px; padding: 10px; color: white"">Hex: #d91c1f</div>
<div style=""background-color: #f7db00; width: 150px; padding: 10px; color: white"">Hex: #f7db00</div>
<div style=""background-color: #ffffff33; width: 150px; padding: 10px; color: black"">Hex: #ffffff33</div>
<div style=""background-color: #da237b; width: 150px; padding: 10px; color: white"">Hex: #da237b</div>
<div style=""background-color: #13418b; width: 150px; padding: 10px; color: white"">Hex: #13418b</div>
<div style=""background-color: #f26d22; width: 150px; padding: 10px; color: white"">Hex: #f26d22</div>
<div style=""background-color: #4f5db0; width: 150px; padding: 10px; color: white"">Hex: #4f5db0</div>
<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<br/>

**Border Colors**

<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: black"">Hex: #475569</div>

<br />

**Text Colors**

<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #18ed66; width: 150px; padding: 10px; color: black"">Hex: #18ed66</div>
<div style=""background-color: #e31a1a; width: 150px; padding: 10px; color: black"">Hex: #e31a1a</div>

</details>

<details>
<summary>Font-families</summary>

- Bree Serif

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:
TEST_1: Page should consist of at least two HTML list items and the teams list received in the response should be rendered using a unique key as a prop for each team card item,
TEST_2: Home Route should consist of an HTML main heading element with text content as ""IPL Dashboard"",
TEST_3: Home Route should consist of an HTML image element with alt attribute value as ""ipl logo"" and src attribute value as the URL for IPL Logo image,
TEST_4: When the Home Route is opened, it should initially consist of an HTML container element with testid attribute value as ""loader"",
TEST_5: When the Home Route is opened, an HTTP GET request should be made to the given teamsApiUrl to get the list of IPL teams,
TEST_6: When the HTTP GET request made in Home Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""name"" in teams received in the response,
TEST_7: When the HTTP GET request made in Home Route is successful, then the page should consist of HTML image elements with alt and src values equal to the ""name"" and ""team_image_url"" in teams received in the response,
TEST_8: When a team card is clicked in Home Route, then the page should be navigated to the Team Matches Route with ""/team-matches/:id"" in the URL,
TEST_9: When a ""/bad-path"" is provided in the URL, then the page should be navigated to Not Found Route and consist of an HTML heading element with text content as ""Page Not Found"",
TEST_10: Page should consist of at least eight team cards wrapped with the Link from react-router-dom,
TEST_11: Page should consist of at least two HTML list items and the recent matches list received in the response should be rendered using a unique key as a prop for each recent match,
TEST_12: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""umpires"" in latest match details received in the response,
TEST_13: When the Team Matches Route is opened, it should initially contain an HTML container element with testid attribute value as ""loader"",
TEST_14: When the Team Matches Route is opened, an HTTP GET request should be made to the given teamMatchesApiUrl to get recent matches based on the team selected,
TEST_15: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML image element with alt as ""team banner"" and src value equal to the ""team_banner_url"" received in the response,
TEST_16: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""competing_team"" in latest match details received in the response,
TEST_17: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""date"" in latest match details received in the response,
TEST_18: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""venue"" in latest match details received in the response,
TEST_19: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""result"" in latest match details received in the response,
TEST_20: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image element with alt value as ""latest match {competing_team}"" and src value equal to the ""competing_team_logo"" in latest match details received in response,
TEST_21: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph element with text content equal to the ""first_innings"" in latest match details received in the response,
TEST_22: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""second_innings"" in latest match details received in the response,
TEST_23: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""man_of_the_match"" in latest match details received in the response,
TEST_24: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image elements with alt as ""competing team {competing_team}"" and src value equal to the ""competing_team_logo"" in recent matches received in response,
TEST_25: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""competing_team"" in recent matches received in the response,
TEST_26: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""result"" in recent matches received in the response,
TEST_27: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""match_status"" in recent matches received in the response,
TEST_28: When ""/team-matches/:id"" is provided in the URL, then the page should be navigated to the Team Matches Route and consists of the respective umpire names,
TEST_29: When the Team Matches Route is opened and back is clicked in the browser, then the page should be navigated to the Home Route
```"
fc63b16c3c9042a886b12c8c07b7f19a,debuggingCashWithdrawal,RJSCPZ1R1E,/home/workspace/reactjs/coding-practices/debuggingCashWithdrawal,/home/workspace/.tmp/reactjs/coding-practices/debuggingCashWithdrawal/src,"In this project, let's fix the **Cash Withdrawal** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/cash-withdrawal-output-v2.gif"" alt=""debugging cash withdrawal"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- Initially, the balance should be **2000** rupees
- When a denomination is clicked, then the respective value should be deducted from the balance available
- The `CashWithdrawal` component receives the `denominationsList` as a prop. It consists of a list of denomination objects with the following properties in each denomination object

  |  Key  | Data Type |
  | :---: | :-------: |
  |  id   |  Number   |
  | value |  Number   |

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `9` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop to display denomination items from the denominationsList,
TEST_2: Page should consist of an HTML paragraph element with text content as ""Your Balance"",
TEST_3: Page should initially consist of an HTML paragraph element with text content as ""2000"",
TEST_4: Page should consist of an HTML paragraph element with text content as ""Withdraw"",
TEST_5: Page should consist of an HTML paragraph element with text content as ""CHOOSE SUM (IN RUPEES)"",
TEST_6: Page should consist of an HTML unordered list element to display the list of denominations from denominationsList,
TEST_7: Page should consist of at least four HTML list items to display the given list of denominations in denominationsList,
TEST_8: Page should consist of HTML button elements with text content as the values of the key ""value"" from the provided denominationsList,
TEST_9: When a denomination button is clicked, the respective amount should be deducted from the available balance
```"
7ad0f249f4bf466ba1991bc34da312d2,debuggingCounter,RJSCPII2BU,/home/workspace/reactjs/coding-practices/debuggingCounter,/home/workspace/.tmp/reactjs/coding-practices/debuggingCounter/src,"In this project, let's fix the **Counter** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/counter-output.gif"" alt=""counter-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- Initially, the count should be `0`
- When the **Increase** button is clicked, then the count should be incremented by one
- When the **Decrease** button is clicked, then the count should be decremented by one
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `7` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","```
Here are the test cases to verify:
TEST_1: Page should initially consist of an HTML main heading element with text content as ""Count 0"",
TEST_2: Page should consist of an HTML button element with text content as ""Increase"",
TEST_3: Page should consist of an HTML button element with text content as ""Decrease"",
TEST_4: When the Increase button is clicked, then the count should be incremented by one,
TEST_5: When the Decrease button is clicked, then the count should be decremented by one
```"
e340eede02d44977a70a60511f5439c7,debuggingFetchAndRouting,RJSCPAYVCK,/home/workspace/reactjs/coding-practices/debuggingFetchAndRouting,/home/workspace/.tmp/reactjs/coding-practices/debuggingFetchAndRouting/src,"In this project, let's fix the **Fetch And Routing** practice app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/fetch-and-routing-practice-output.gif"" alt=""fetch and routing output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- When the app is opened, Home Route should be displayed
- When the Home Route is opened,
  - Make HTTP GET request to the **blogsApiUrl**
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the list of blogs should be displayed
- When a blog item in Home Route is clicked,
  - Page should be navigated to the Blog Item Details Route with the URL `/blogs/:id`
- When the Blog Item Details Route is opened,
  - Make HTTP GET request to the **blogItemDetailsApiUrl** with the blog id to get the details of the blog
    - Example: `https://apis.ccbp.in/blogs/2`
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the details of the blog should be displayed

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**blogsApiUrl**

#### API: `https://apis.ccbp.in/blogs`

#### Method: `GET`

#### Description:

Returns a response containing the list of all blogs

#### Response

```json
[
  {
    ""id"": 1,
    ""title"": ""React v16.9.0 and the Roadmap Update"",
    ""image_url"": ""https://miro.medium.com/max/1050/1*i3hzpSEiEEMTuWIYviYweQ.png"",
    ""avatar_url"": ""https://miro.medium.com/max/4096/1*wiOSfPd2sY0gXSNK9vv6bg.jpeg"",
    ""author"": ""Dan Abramov,"",
    ""topic"": ""React.js""
  },
  ...
]
```

**blogItemDetailsApiUrl**

#### API: `https://apis.ccbp.in/blogs/:id`

#### Example: `https://apis.ccbp.in/blogs/2`

#### Method: `GET`

#### Description:

Returns a response containing the details of the specific blog

#### Response

```json
{
  ""id"": 2,
  ""title"": ""React v16.7: No, This Is Not the One With Hooks"",
  ""image_url"": ""https://miro.medium.com/max/3158/1*kEPCQNY4dwVyaFuLEwJcNQ.png"",
  ""avatar_url"": ""https://avatars.githubusercontent.com/u/3624098?v=4"",
  ""author"": ""Andrew Clark"",
  ""content"": ""React follows semantic versioning. Typically, this means that we use patch versions for bugfixes, and minors for new (non-breaking) features. However, we reserve the option to release minor versions even if they do not include new features. The motivation is to reserve patches for changes that have a very low chance of breaking. Patches are the most important type of release because they sometimes contain critical bugfixes."",
  ""topic"": ""React.js""
}
```

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `18` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as `loader` to it as shown below

  ```jsx
  <div data-testid=""loader"">
    <Loader type=""TailSpin"" color=""#00bfff"" height={50} width={50} />
  </div>
  ```

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

TEST_1: Page should consist of an HTML image element in the header with the given logo URL as src and alt text as ""wave"".

TEST_2: Page should consist of Link from react-router-dom in the header with ""Home"" as text content.

TEST_3: Page should consist of Link from react-router-dom in the header with ""About"" as text content.

TEST_4: Page should consist of Link from react-router-dom in the header with ""Contact"" as text content.

TEST_5: When the Home Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"".

TEST_6: When the ""/about"" is provided in the browser tab, the page should navigate to About Route and consist of an HTML heading element with ""About"" as text content.

TEST_7: When the ""/contact"" is provided in the browser tab, the page should navigate to Contact Route and consist of an HTML heading element with ""Contact"" as text content.

TEST_8: When the ""/bad-path"" is provided in the browser tab, the page should navigate to Not Found Route and consist of an HTML heading element with ""Not Found"" as text content.

TEST_9: When the About link in the header is clicked, the page should navigate to About Route with ""/about"" in the URL path.

TEST_10: When the Contact link in the header is clicked, the page should navigate to Contact Route with ""/contact"" in URL path.

TEST_11: When the Home link in the header is clicked, the page should navigate to Home Route with ""/"" in URL path.

TEST_12: Page should consist of an HTML heading element with ""Wade Warren"" as text content when rendering Home Route initially.

TEST_13: Page should consist of an HTML image element with alt text as ""profile"".

TEST_14: Page should consist of an HTML paragraph element with ""Software Developer at UK"" as text content when rendering HomeRoute initially.

TEST_15: Home Route should consist of HTML heading elements with text content as the value of the ""title"" key received in the API response.

TEST_16: Home Route should consist of HTML paragraph elements with text content as the value of the ""author"" key received in response for each blog item.

TEST_17: When the Home Route is opened, an HTTP GET request should be made to the given blogsApiUrl to get the list of blogs.

TEST_18: Each blog item should be wrapped with Link from react-router-dom.

TEST_19: When a blog item is clicked in Home Route, the page should navigate to the Blog Item Details Route with ""/blogs/
"" in the URL.

TEST_20: When ""/blogs/
"" is provided in the URL, the page should navigate to the Blog Item Details Route and consist of an HTML heading element with text content as the value of the ""title"" key received in the API response.

TEST_21: When navigated to a blog post, the page should consist of an HTML image element with alt as the value of the ""title"" key and src as the value of the ""image_url"" key received in the API response.

TEST_22: When navigated to a blog post, the page should consist of an HTML image element with alt as the value of the ""author"" key and src as the value of the ""avatar_url"" key received in the API response.

TEST_23: When navigated to a blog post, the page should consist of an HTML paragraph element with text content as the value of the ""content"" key received in the API response.

"
de122a7977054a89b08770eb23ead16c,debuggingFruitsCounter,RJSCP431W5,/home/workspace/reactjs/coding-practices/debuggingFruitsCounter,/home/workspace/.tmp/reactjs/coding-practices/debuggingFruitsCounter/src,"In this project, let's fix the **Fruits Counter** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/debugging-fruits-counter-output.gif"" alt=""fruits-counter"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- Initially, the count of the eaten mangoes should be four and the count of the eaten bananas should be five
- When the **Eat Mango** button is clicked, then the count of the mangoes eaten should be incremented by one
- When the **Eat Banana** button is clicked, then the count of the bananas eaten should be incremented by one

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `8` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/mango-img.png](https://assets.ccbp.in/frontend/react-js/mango-img.png) alt should be **mango**
- [https://assets.ccbp.in/frontend/react-js/banana-img.png](https://assets.ccbp.in/frontend/react-js/banana-img.png) alt should be **banana**

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

TEST_1: Page should initially consist of an HTML main heading element with text content as ""Bob ate 4 mangoes 5 bananas"",
TEST_2: Page should consist of an HTML image element with alt attribute value as ""mango"",
TEST_3: Page should consist of an HTML image element with alt attribute value as ""banana"",
TEST_4: Page should consist of an HTML button element with text content as ""Eat Banana"",
TEST_5: Page should consist of an HTML button element with text content as ""Eat Mango"",
TEST_6: JSX Code implementation should consist of at least fourteen HTML elements with attribute ""className"",
TEST_7: When the Eat Mango button is clicked, then the count of the mangoes eaten should be incremented by one,
TEST_8: When the Eat Banana button is clicked, then the count of the bananas eaten should be incremented by one"
0ec61da3e50a4f6097095a36355780c9,debuggingGoogleSearchSuggestions,RJSCPH6MBO,/home/workspace/reactjs/coding-practices/debuggingGoogleSearchSuggestions,/home/workspace/.tmp/reactjs/coding-practices/debuggingGoogleSearchSuggestions/src,"In this project, let's fix the **Google Search Suggestions** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/google-search-suggestions-output.gif"" alt=""debugging google search suggestions"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- Initially, all suggestions in the `suggestionsList` should be displayed
- When a value is provided in the search input, then display the suggestions which include the search input irrespective of case
- When the arrow of a suggestion is clicked, then the value of the search input should be updated with the respective suggestion clicked
- The `GoogleSuggestions` component receives the `suggestionsList` as a prop. It consists of a list of suggestion objects with the following properties in each suggestion object

  |    Key     | Data Type |
  | :--------: | :-------: |
  |     id     |  Number   |
  | suggestion |  String   |

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `7` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop to display suggestion items from the suggestionsList,
TEST_2: Page should consist of an HTML image element with alt attribute value as ""google logo"" and src as the given Google logo URL,
TEST_3: Page should consist of an HTML image element with alt attribute value as ""search icon"" and src as the given search icon URL,
TEST_4: Page should consist of an HTML input element with type attribute value as ""search"",
TEST_5: Page should consist of an HTML unordered list element to display the list of suggestions received from suggestionsList,
TEST_6: Page should consist of at least six HTML list items to display the list of suggestions received from suggestionsList,
TEST_7: Page should initially consist of HTML paragraph elements with text content equal to the ""suggestion"" from the suggestionsList provided,
TEST_8: Page should consist of at least six HTML image elements with alt attribute value as ""arrow"" and src as the given arrow icon URL,
TEST_9: When a value is provided in the search input element, the suggestions should be filtered irrespective of the case,
TEST_10: When the arrow of a suggestion is clicked, the value inside the search input should be updated to the respective suggestion that has been clicked
```"
09b381b1acb04de3aad5e457d22c203f,debuggingIPLDashboard,RJSCPNE8JJ,/home/workspace/reactjs/coding-practices/debuggingIPLDashboard,/home/workspace/.tmp/reactjs/coding-practices/debuggingIPLDashboard/src,"In this project, let's fix the **IPL Dashboard** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-output-v2.gif"" alt=""ipl dashboard output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- When the app is opened, Home Route should be displayed
- When the Home Route is opened,
  - Make HTTP GET request to the **teamsApiUrl**
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the list of teams should be displayed
- When a team card in Home Route is clicked,
  - Page should be navigated to the Team Matches Route with the URL `/team-matches/:id`
- When the Team Matches Route is opened,
  - Make HTTP GET request to the **teamMatchesApiUrl** with the team id to get the recent matches data of the team
    - Example: `https://apis.ccbp.in/ipl/KKR`
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the team banner, latest match, and list of recent matches should be displayed

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**teamsApiUrl**

#### API: `https://apis.ccbp.in/ipl`

#### Method: `GET`

#### Description:

Returns a response containing the list of all IPL teams

#### Response

```json
{
  ""teams"": [
    {
      ""name"": ""Royal Challengers Bangalore"",
      ""id"": ""RCB"",
      ""team_image_url"": ""https://assets.ccbp.in/frontend/react-js/rcb-logo-img.png"",
      // use value of the key 'name' for alt as `${name}`
    },
    ...
  ],
}
```

**teamMatchesApiUrl**

#### API: `https://apis.ccbp.in/ipl/:id`

#### Example: `https://apis.ccbp.in/ipl/KKR`

#### Method: `GET`

#### Description:

Returns a response containing details of all recent matches of a team

#### Response

```json
{
  ""team_banner_url"": ""https://assets.ccbp.in/frontend/react-js/kkr-team-img.png"",
  ""latest_match_details"": {
    ""umpires"": ""CB Gaffaney, VK Sharma"",
    ""result"": ""Kolkata Knight Riders Won by 7 wickets"",
    ""man_of_the_match"": ""Shubman Gill"",
    ""id"": ""1216545"",
    ""date"": ""2020-09-26"",
    ""venue"": ""At Sheikh Zayed Stadium, Abu Dhabi"",
    ""competing_team"": ""Sunrisers Hyderabad"",
    ""competing_team_logo"": ""https://upload.wikimedia.org/wikipedia/en/thumb/8/81/Sunrisers_Hyderabad.svg/1200px-Sunrisers_Hyderabad.svg.png"",
    // use value of the key 'competing_team' for alt as `latest match ${competing_team}`
    ""first_innings"": ""Sunrisers Hyderabad"",
    ""second_innings"": ""Kolkata Knight Riders"",
    ""match_status"": ""Won"",
  },
  ""recent_matches"": [
    {
      ""umpires"": ""RK Illingworth, K Srinivasan"",
      ""result"": ""Royal Challengers Bangalore Won by 82 runs"",
      ""man_of_the_match"": ""AB de Villiers"",
      ""id"": ""1216540"",
      ""date"": ""2020-10-12"",
      ""venue"": ""At Sharjah Cricket Stadium, Sharjah"",
      ""competing_team"": ""Royal Challengers Bangalore"",
      ""competing_team_logo"": ""https://upload.wikimedia.org/wikipedia/en/thumb/2/2a/Royal_Challengers_Bangalore_2020.svg/1200px-Royal_Challengers_Bangalore_2020.svg.png"",
      // use value of the key 'competing_team' for alt as `competing team ${competing_team}`
      ""first_innings"": ""Royal Challengers Bangalore"",
      ""second_innings"": ""Kolkata Knight Riders"",
      ""match_status"": ""Lost"",
    },
    ...
  ],
}
```

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `13` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as `loader` to it as shown below

  ```jsx
  <div data-testid=""loader"">
    <Loader type=""Oval"" color=""#ffffff"" height={50} width={50} />
  </div>
  ```

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the teams list received in the response should be rendered using a unique key as a prop for each team card item,
TEST_2: Home Route should consist of an HTML main heading element with text content as ""IPL Dashboard"",
TEST_3: Home Route should consist of an HTML image element with alt attribute value as ""ipl logo"" and src attribute value as the URL for IPL Logo image,
TEST_4: When the Home Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"",
TEST_5: When the Home Route is opened, an HTTP GET request should be made to the given teamsApiUrl to get the list of IPL teams,
TEST_6: When the HTTP GET request made in Home Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""name"" in teams received in the response,
TEST_7: When the HTTP GET request made in Home Route is successful, then the page should consist of HTML image elements with alt and src values equal to the ""name"" and ""team_image_url"" in teams received in the response,
TEST_8: When a team card is clicked in Home Route, then the page should be navigated to the Team Matches Route with ""/team-matches/:id"" in the URL,
TEST_9: When a ""/bad-path"" is provided in the URL, then the page should be navigated to Not Found Route and consist of an HTML heading element with text content as ""Page Not Found"",
TEST_10: Page should consist of at least eight team cards wrapped with the Link from react-router-dom each inside a HTML list item,
TEST_11: Page should consist of at least two HTML list items and the recent matches list received in the response should be rendered using a unique key as a prop for each recent match,
TEST_12: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""umpires"" in latest match details received in the response,
TEST_13: When the Team Matches Route is opened, it should initially contain an HTML container element with data-testid attribute value as ""loader"",
TEST_14: When the Team Matches Route is opened, an HTTP GET request should be made to the given teamMatchesApiUrl to get recent matches based on the team selected,
TEST_15: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML image element with alt as ""team banner"" and src value equal to the ""team_banner_url"" received in the response,
TEST_16: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""competing_team"" in latest match details received in the response,
TEST_17: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""date"" in latest match details received in the response,
TEST_18: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""venue"" in latest match details received in the response,
TEST_19: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""result"" in latest match details received in the response,
TEST_20: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image element with alt value as ""latest match {competing_team}"" and src value equal to the ""competing_team_logo"" in latest match details received in response,
TEST_21: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph element with text content equal to the ""first_innings"" in latest match details received in the response,
TEST_22: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""second_innings"" in latest match details received in the response,
TEST_23: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the ""man_of_the_match"" in latest match details received in the response,
TEST_24: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image elements with alt as ""competing team {competing_team}"" and src value equal to the ""competing_team_logo"" in recent matches received in response,
TEST_25: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""competing_team"" in recent matches received in the response,
TEST_26: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""result"" in recent matches received in the response,
TEST_27: When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the ""match_status"" in recent matches received in the response,
TEST_28: When ""/team-matches/:id"" is provided in the URL, then the page should be navigated to the Team Matches Route and consists of the respective umpire names,
TEST_29: When the Team Matches Route is opened and back is clicked in the browser, then the page should be navigated to the Home Route
```"
71374a7b9c964b088ed78950585f4b72,debuggingNxtTrendzAuthentication2,RJSCPPV10E,/home/workspace/reactjs/coding-practices/debuggingNxtTrendzAuthentication2,/home/workspace/.tmp/reactjs/coding-practices/debuggingNxtTrendzAuthentication2/src,"In this project, let's fix the **Nxt Trendz Authentication** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-authorisation-output-v2.gif"" alt=""nxt trendz authentication output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- When an unauthenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be navigated to the Login Route
- When an authenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be navigated to the respective route
- When an authenticated user tries to access the Login Route, then the page should be navigated to the Home Route
- When the **Logout** button is clicked, then the page should be navigated to the Login Route
- When a random path is provided in the URL, then the page should be navigated to the Not Found Route

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `8` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- User credentials

  ```text
   username: rahul
   password: rahul@2021
  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/nxt-trendz-home-img.png](https://assets.ccbp.in/frontend/react-js/nxt-trendz-home-img.png) alt should be **clothes that get you noticed**

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: When a user successfully logs in, the Cookies.set() method should be called.
TEST_2: When a user successfully logs in, the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument.
TEST_3: When the ""/login"" is provided in the browser tab, the page should be navigated to LoginRoute and consist of an HTML input element with ""Username"" as a placeholder.
TEST_4: LoginRoute should consist of an HTML input element with ""Password"" as a placeholder.
TEST_5: LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_6: LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"".
TEST_7: LoginRoute should consist of the HTML input element with label text as ""USERNAME"".
TEST_8: LoginRoute should consist of the USERNAME input field with type as ""text"".
TEST_9: LoginRoute should consist of the HTML input element with label text as ""PASSWORD"".
TEST_10: LoginRoute should consist of the PASSWORD input field with type as ""password"".
TEST_11: LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"".
TEST_12: When an authenticated user tries to access the LoginRoute, the page should be redirected to HomeRoute.
TEST_13: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed using an HTML paragraph element.
TEST_14: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed and the page should not be navigated.
TEST_15: When a non-empty password is provided and the login button is clicked with an empty username, the respective error message should be displayed and the page should not be navigated.
TEST_16: When an invalid username and password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_17: When a valid username and invalid password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_18: When a valid username and password are provided and the login button is clicked, the page should be navigated to HomeRoute and consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content.
TEST_19: When a valid username and password are provided and the login button is clicked, the history.replace() method should be called.
TEST_20: When a valid username and password are provided and the login button is clicked, the history.replace() method should be called with the argument ""/"".
TEST_21: When the ""/"" is provided in the browser tab by an unauthenticated user, the page should be redirected to LoginRoute.
TEST_22: When the ""/"" is provided in the browser tab by an authenticated user, the HomeRoute should be loaded and consist of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"".
TEST_23: When the ""/products"" is provided in the browser tab by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML image element with the given login image URL as src and alt text as ""website login"".
TEST_24: When the ""/cart"" is provided in the browser tab by an unauthenticated user, the page should be redirected to LoginRoute.
TEST_25: When the logout button is clicked, the Cookies.remove() method should be called.
TEST_26: When the logout button is clicked, the Cookies.remove() method should be called with the ""jwt_token"" string as an argument.
TEST_27: When the logout button is clicked, the history.replace() method should be called.
TEST_28: When the logout button is clicked, the history.replace() method should be called with the argument ""/login"".
TEST_29: When the logout button is clicked, the page should be navigated to LoginRoute.
TEST_30: When the Products link is clicked, the page should be navigated to ProductsRoute.
TEST_31: ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"".
TEST_32: When the Cart link is clicked, the page should be navigated to CartRoute.
TEST_33: CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"".
TEST_34: HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"".
TEST_35: HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_36: HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content.
TEST_37: HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content.
TEST_38: HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content.
TEST_39: HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"".
TEST_40: HomeRoute should consist of an HTML button element with ""Shop Now"" as text content.
TEST_41: When the ""/bad-path"" is provided in the browser tab, the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt text as ""not found"".
```"
f7e8c4a801ac48ecb69d809db7b067f2,debuggingNxtTrendzProtectedRoute,RJSCPH1TQT,/home/workspace/reactjs/coding-practices/debuggingNxtTrendzProtectedRoute,/home/workspace/.tmp/reactjs/coding-practices/debuggingNxtTrendzProtectedRoute/src,"In this project, let's fix the **Nxt Trendz Protected Route** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/nxt-trendz-protected-route-output.gif"" alt=""nxt trendz protected route output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- When an unauthenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be navigated to the Login Route using the protected route
- When an authenticated user tries to access the Home Route, Products Route or Cart Route, then the page should be navigated to the respective route using the protected route
</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `8` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- User credentials

  ```text
   username: rahul
   password: rahul@2021
  ```

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: When a user successfully logs in, the Cookies.set() method should be called.
TEST_2: When a user successfully logs in, the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument.
TEST_3: LoginRoute should consist of an HTML input element with ""Username"" as a placeholder.
TEST_4: LoginRoute should consist of an HTML input element with ""Password"" as a placeholder.
TEST_5: LoginRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_6: LoginRoute should consist of an HTML image element with the given login URL as src and alt text as ""website login"".
TEST_7: LoginRoute should consist of an HTML label element with text content as ""USERNAME"".
TEST_8: LoginRoute should consist of the HTML input element with label text as ""USERNAME"".
TEST_9: LoginRoute should consist of the HTML input element with label text as ""PASSWORD"".
TEST_10: LoginRoute should consist of the USERNAME input field with type as ""text"".
TEST_11: LoginRoute should consist of the PASSWORD input field with type as ""password"".
TEST_12: LoginRoute should consist of an HTML button element with ""Login"" as text content and type as ""submit"".
TEST_13: When an authenticated user tries to access the LoginRoute, the page should be redirected to HomeRoute and consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"".
TEST_14: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed using an HTML paragraph element.
TEST_15: When a valid username is provided and the login button is clicked with an empty password, the respective error message should be displayed and the page should not be navigated.
TEST_16: When a non-empty password is provided and the login button is clicked with an empty username, the respective error message should be displayed and the page should not be navigated.
TEST_17: When an invalid username and password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_18: When a valid username and invalid password are provided and the login button is clicked, the respective error message should be displayed and the page should not be navigated.
TEST_19: When a valid username and password are provided and the login button is clicked, the page should be navigated to HomeRoute and consist of an HTML image element with alt text as ""clothes that get you noticed"".
TEST_20: When a valid username and password are provided, the login button is clicked, and the user has successfully logged in, the history.replace() method should be called.
TEST_21: When a valid username and password are provided, the login button is clicked, and the user has successfully logged in, the history.replace() method should be called with the argument ""/"".
TEST_22: When the ""/"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML input element with label text as ""USERNAME"".
TEST_23: When the ""/"" is provided in the URL by an authenticated user, the HomeRoute should be loaded and consist of an HTML image element with the given home image URL as src and alt text as ""clothes that get you noticed"".
TEST_24: HomeRoute should consist of an HTML image element with the given image URL as src and alt text as ""clothes that get you noticed"".
TEST_25: HomeRoute should consist of an HTML image element with the given logo URL as src and alt text as ""website logo"".
TEST_26: HomeRoute should consist of a Link from react-router-dom in the header with ""Home"" as text content.
TEST_27: HomeRoute should consist of a Link from react-router-dom in the header with ""Products"" as text content.
TEST_28: HomeRoute should consist of a Link from react-router-dom in the header with ""Cart"" as text content.
TEST_29: HomeRoute should consist of an HTML heading element with ""Clothes That Get YOU Noticed"" as text content.
TEST_30: HomeRoute should consist of an HTML paragraph element with text content starting with ""Fashion is part of the daily air"".
TEST_31: HomeRoute should consist of an HTML button element with ""Shop Now"" as text content.
TEST_32: When the Products link is clicked, the page should be navigated to ProductsRoute and consist of an HTML image element with the given image URL as src and alt text as ""products"".
TEST_33: When the Cart link is clicked, the page should be navigated to CartRoute and consist of an HTML image element with the given image URL as src and alt text as ""cart"".
TEST_34: When the logout button is clicked, the Cookies.remove() method should be called.
TEST_35: When the logout button is clicked, the Cookies.remove() method should be called with the argument as ""jwt_token"".
TEST_36: When the logout button is clicked, the history.replace() method should be called.
TEST_37: When the logout button is clicked, the history.replace() method should be called with the argument ""/login"".
TEST_38: When the logout button is clicked, the page should be navigated to LoginRoute and consist of an HTML button element with ""Login"" as text content.
TEST_39: When the ""/products"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML image element with the given login image URL as src and alt text as ""website login"".
TEST_40: ProductsRoute should consist of an HTML image element with the given image URL as src and alt text as ""products"".
TEST_41: When the ""/cart"" is provided in the URL by an unauthenticated user, the page should be redirected to LoginRoute and consist of an HTML input element with the label text as ""PASSWORD"".
TEST_42: CartRoute should consist of an HTML image element with the given image URL as src and alt text as ""cart"".
TEST_43: When the ""/bad-path"" is provided in the URL, the page should be navigated to NotFoundRoute and consist of an HTML image element with the given not found image URL as src and alt text as ""not found"".
```"
056fd844d6c747419122eae1cf79df92,debuggingSimpleTodos,RJSCP52YXK,/home/workspace/reactjs/coding-practices/debuggingSimpleTodos,/home/workspace/.tmp/reactjs/coding-practices/debuggingSimpleTodos/src,"In this project, let's fix the **Simple Todos** app by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/simple-todos-output.gif"" alt=""simple todos outputs"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- Initially, the list of given todos should be displayed with a delete button for each todo
- When the **Delete** button of a todo is clicked, then the respective todo should be deleted
- The `SimpleTodos` will consist of the `initialTodosList`. It consists of a list of todo objects with the following properties in each todo object

  |  Key  | Data Type |
  | :---: | :-------: |
  |  id   |  Number   |
  | title |  String   |

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `6` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the initialTodosList should be rendered using a unique key as a prop for each todo item,
TEST_2: Page should consist of HTML main heading element with text content as ""Simple Todos"",
TEST_3: Page should initially consist of HTML paragraph elements with text content equal to the ""title"" in initialTodosList provided,
TEST_4: Page should initially consist of at least eight HTML button elements with text content as ""Delete"",
TEST_5: When the Delete button of a todo item is clicked, then the respective todo should be deleted
```"
30c05de218854e8e839c8398ea94bbc8,debuggingStopwatch,RJSCP90ZT3,/home/workspace/reactjs/coding-practices/debuggingStopwatch,/home/workspace/.tmp/reactjs/coding-practices/debuggingStopwatch/src,"In this project, let's fix the **Stopwatch** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/stopwatch-output-v2.gif"" alt=""stopwatch output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be fixed</summary>
<br/>

Fix the given code to have the following functionality

- When the **Start** button is clicked, then the Stopwatch should start running
- When the **Stop** button is clicked, then the Stopwatch should stop running
- When the **Reset** button is clicked, then the Stopwatch should be reset to zero

</details>

### Quick Tips

<details>
<summary>Click to view</summary>
<br>

- There are `10` bugs to be fixed to achieve the functionality and the UI that is expected

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.
","Here are the test cases to verify:

```
TEST_1: Page should consist of HTML heading element with text content as ""Stopwatch"",
TEST_2: Page should consist of HTML button element with text content as ""Start"",
TEST_3: Page should consist of two HTML button elements with text content as ""Stop"" and ""Reset"",
TEST_4: Page should initially consist of HTML heading element with text content as ""00:00"",
TEST_5: Page should consist of HTML image element with alt as ""stopwatch"" and src attribute value as the URL for the stopwatch image,
TEST_6: When the Start button is clicked, then the timer should start,
TEST_7: When the Stop button is clicked, then the timer should stop,
TEST_8: When the Reset button is clicked, then the timer should be reset to zero,
TEST_9: When the Start button is clicked after stopping the timer, then the timer should run from where it was stopped,
TEST_10: When the Start button is clicked, then the ""setInterval"" method should be called,
TEST_11: When the Stop button is clicked after starting the timer, then the ""clearInterval"" method should be called,
TEST_12: When the Reset button is clicked after starting the timer, then the ""clearInterval"" method should be called
```"
0228b6e670ff419dad990957bbe04296,fetchAndRoutingPractice,RJSCP07F3V,/home/workspace/reactjs/coding-practices/fetchAndRoutingPractice,/home/workspace/.tmp/reactjs/coding-practices/fetchAndRoutingPractice/src,"In this project, let's perform **Fetch and Routing** by applying the concepts we have learned till now.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/fetch-and-routing-practice-output.gif"" alt=""fetch and routing practice desktop output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Extra Small (Size < 576px) and Small (Size >= 576px)](https://assets.ccbp.in/frontend/content/react-js/fetch-and-routing-practice-sm-outputs.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/fetch-and-routing-practice-lg-blog-list-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Blog Item Details](https://assets.ccbp.in/frontend/content/react-js/fetch-and-routing-practice-lg-blog-item-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- When the app is opened, Home Route should be displayed
- When the Home Route is opened,

  - Make HTTP GET request to the **blogsApiUrl**
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the list of blogs should be displayed

- When a blog item in Home Route is clicked,
  - Page should be navigated to the Blog Item Details Route with the URL `/blogs/:id`
- When the Blog Item Details Route is opened,
  - Make HTTP GET request to the **blogItemDetailsApiUrl** with the blog id to get the details of the blog
    - Example: `https://apis.ccbp.in/blogs/2`
  - **_loader_** should be displayed while fetching the data
  - After fetching the data, the details of the blog should be displayed

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**blogsApiUrl**

#### API: `https://apis.ccbp.in/blogs`

#### Method: `GET`

#### Description:

Returns a response containing the list of all blogs

#### Response

```json
[
  {
    ""id"": 1,
    ""title"": ""React v16.9.0 and the Roadmap Update"",
    ""image_url"": ""https://miro.medium.com/max/1050/1*i3hzpSEiEEMTuWIYviYweQ.png"",
    ""avatar_url"": ""https://miro.medium.com/max/4096/1*wiOSfPd2sY0gXSNK9vv6bg.jpeg"",
    ""author"": ""Dan Abramov,"",
    ""topic"": ""React.js""
  },
  ...
]
```

**blogItemDetailsApiUrl**

#### API: `https://apis.ccbp.in/blogs/:id`

#### Example: `https://apis.ccbp.in/blogs/2`

#### Method: `GET`

#### Description:

Returns a response containing the details of the specific blog

#### Response

```json
{
  ""id"": 2,
  ""title"": ""React v16.7: No, This Is Not the One With Hooks"",
  ""image_url"": ""https://miro.medium.com/max/3158/1*kEPCQNY4dwVyaFuLEwJcNQ.png"",
  ""avatar_url"": ""https://avatars.githubusercontent.com/u/3624098?v=4"",
  ""author"": ""Andrew Clark"",
  ""content"": ""React follows semantic versioning. Typically, this means that we use patch versions for bugfixes, and minors for new (non-breaking) features. However, we reserve the option to release minor versions even if they do not include new features. The motivation is to reserve patches for changes that have a very low chance of breaking. Patches are the most important type of release because they sometimes contain critical bugfixes."",
  ""topic"": ""React.js""
}
```

</details>

<details>
<summary>Components Structure</summary>

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/fetch-and-routing-practice-home-component-breakdown-structure.png"" alt=""fetch and routing practice home component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/fetch-and-routing-practice-blog-item-component-breakdown-structure.png"" alt=""fetch and routing practice blog item component breakdown structure"" style=""max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>
</details>

<details>
<summary>Implementation Files</summary>
<br/>

Use these files to complete the implementation:

- `src/App.js`
- `src/components/Home/index.js`
- `src/components/BlogList/index.js`
- `src/components/BlogList/index.css`
- `src/components/BlogItem/index.js`
- `src/components/BlogItem/index.css`
- `src/components/BlogItemDetails/index.js`
- `src/components/BlogItemDetails/index.css`
</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `Home` route should consist of `/` in the URL path
- `About` route should consist of `/about` in the URL path
- `Contact` route should consist of `/contact` in the URL path
- `BlogItemDetails` route should consist of `/blogs/:id` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js` file
- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as `loader` to it as shown below

  ```jsx
  <div data-testid=""loader"">
    <Loader type=""TailSpin"" color=""#00bfff"" height={50} width={50} />
  </div>
  ```

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #8e8e8e; width: 150px; padding: 10px; color: white"">Hex: #8e8e8e</div>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #d3d3d3; width: 150px; padding: 10px; color: white"">Hex: #d3d3d3</div>
<div style=""background-color: #2f4f4f; width: 150px; padding: 10px; color: white"">Hex: #2f4f4f</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the blogsList data should be rendered using a unique key as a prop for each blog item,
TEST_2: Page should consist of a Link from react-router-dom in the header with ""Home"" as text content,
TEST_3: Page should consist of a Link from react-router-dom in the header with ""About"" as text content,
TEST_4: Page should consist of a Link from react-router-dom in the header with ""Contact"" as text content,
TEST_5: When the Home Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"",
TEST_6: When the ""/about"" is provided in the browser tab, then the page should be navigated to About Route and consist of an HTML heading element with ""About"" as text content,
TEST_7: When the ""/contact"" is provided in the browser tab, then the page should be navigated to Contact Route and consist of an HTML heading element with ""Contact"" as text content,
TEST_8: When the ""/bad-path"" is provided in the browser tab, then the page should be navigated to NotFound Route and consist of an HTML heading element with ""Not Found"" as text content,
TEST_9: When the About link in the header is clicked, then the page should be navigated to About Route with ""/about"" in URL path,
TEST_10: When the Contact link in the header is clicked, then the page should be navigated to Contact Route with ""/contact"" in URL path,
TEST_11: When the Home link in the header is clicked, then the page should be navigated to Home Route with ""/"" in URL path,
TEST_12: Page should consist of an HTML heading element with ""Wade Warren"" as text content when rendering Home Route initially,
TEST_13: Page should consist of an HTML image element with alt text as ""profile"",
TEST_14: Page should consist of an HTML image element in the header with the given logo URL as src and alt text as ""wave"",
TEST_15: Home Route should consist of HTML heading elements with text content as the value of the ""title"" key received in the API response,
TEST_16: Home Route should consist of HTML paragraph elements with text content as the value of the ""author"" key received in response for each blog item,
TEST_17: When the page is loaded initially an HTTP GET request should be made to the given apiUrl,
TEST_18: Each blog item should be wrapped with Link from react-router-dom,
TEST_19: When a blog item is clicked in Home Route, then the page should be navigated to the Blog Item Details Route with ""/blogs/:id"" in the URL,
TEST_20: When ""/blogs/:id"" is provided in the URL, then the page should be navigated to the Blog Item Details Route and consist of an HTML heading element with text content as the value of the ""title"" key received in the API response,
TEST_21: When navigated to a blog post, then the page should consist of an HTML image element with alt as the value of the ""title"" key and src as the value of the ""image_url"" key received in the API response,
TEST_22: When navigated to a blog post, then the page should consist of an HTML paragraph element with text content as the value of the ""content"" key received in the API response
```"
bc08ce5be1f4446392a442e3140c0454,ebank,RJSCEM5CP5,/home/workspace/reactjs/coding-practices/ebank,/home/workspace/.tmp/reactjs/coding-practices/ebank/src,"The goal of this coding exam is to quickly get you off the ground with **Authentication**.

### Refer to the image below:

<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/ebank-output-v2.gif"" alt=""ebank-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>

### Design Files

<details>
<summary>Login Route</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login](https://assets.ccbp.in/frontend/react-js/ebank-login-route-img.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Login Failure](https://assets.ccbp.in/frontend/react-js/ebank-login-failure-route-img.png)

</details>

<details>
<summary>Home Route</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/react-js/ebank-home-route-img.png)

</details>

<details>
<summary>Not Found Route</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/react-js/ebank-not-found-route-img.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- **Login Route**

  - When invalid credentials are provided and the **Login** button is clicked, then the error message received from the response should be displayed
  - When valid credentials are provided and the **Login** button is clicked, then the page should be navigated to the Home Route
  - When an unauthenticated user tries to access the Home Route, then the page should be navigated to Login Route
  - When an authenticated user tries to access the Home Route, then the page should be navigated to the Home Route

- **Home Route**

  - When an _authenticated_ user tries to access the Login Route, then the page should be navigated to the Home Route
  - When the **Logout** button is clicked, then the page should be navigated to the Login Route

- **Not Found Route**
  - When a random path is provided in the URL, then the page should be navigated to the Not Found Route
- Use `styled-components` for styling elements

</details>

<details>

<summary>API Requests & Responses</summary>
<br/>

**loginApiUrl**

#### API: `https://apis.ccbp.in/ebank/login`

#### Method: `POST`

#### Request:

```json
{
  ""user_id"": 142420,
  ""pin"": 231225
}
```

#### Description:

Returns a response based on the credentials provided

#### Sample Success Response:

```json
{
  ""jwt_token"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjE0MjQyMCIsInJvbGUiOiJQUklNRV9VU0VSIiwiaWF0IjoxNjM0MDk4NzYyfQ.ZUCC2J2zBjRhLVa1EI_4EnkZ-M-7hoVZoZFAu8GTmEQ""
}
```

#### Sample Failure Response:

```json
{
  ""status_code"": 401,
  ""error_msg"": ""Invalid user ID""
}
```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Home Route should consist of `/` in the URL path
- Login Route should consist of `/ebank/login` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js`

- User credentials

  ```text
   User ID: 142420
   PIN: 231225

  ```

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/ebank-login-img.png](https://assets.ccbp.in/frontend/react-js/ebank-login-img.png) alt should be **website login**

- [https://assets.ccbp.in/frontend/react-js/ebank-logo-img.png](https://assets.ccbp.in/frontend/react-js/ebank-logo-img.png) alt should be **website logo**

- [https://assets.ccbp.in/frontend/react-js/ebank-digital-card-img.png](https://assets.ccbp.in/frontend/react-js/ebank-digital-card-img.png) alt should be **digital card**

- [https://assets.ccbp.in/frontend/react-js/ebank-not-found-img.png](https://assets.ccbp.in/frontend/react-js/ebank-not-found-img.png) alt should be **not found**

</details>
<br/>
<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #152850; width: 150px; padding: 10px; color: white"">Hex: #152850</div>
<div style=""background-color: #e0eefe; width: 150px; padding: 10px; color: black"">Hex: #e0eefe</div>
<div style=""background-color: #183b56; width: 150px; padding: 10px; color: white"">Hex: #183b56</div>
<div style=""background-color: #5a7184; width: 150px; padding: 10px; color: white"">Hex: #5a7184</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #c3cad9; width: 150px; padding: 10px; color: black"">Hex: #c3cad9</div>
<div style=""background-color: #1565d8; width: 150px; padding: 10px; color: white"">Hex: #1565d8</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: white"">Hex: #ff0b37</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>

</details>
<br/>
<details>

<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory
","Here are the test cases to verify:

```
TEST_14: Login Route should consist of an HTML image element with alt as ""website login"" and src as the given login image URL,
TEST_15: Login Route should consist of an HTML main heading element with the text content as ""Welcome Back"",
TEST_16: Login Route should consist of an HTML form element,
TEST_17: Login Route should consist of an HTML input element with label text as ""User ID"" and type as ""text"",
TEST_18: Login Route should consist of an HTML input element with label text as ""PIN"" and type as ""password"",
TEST_19: Login Route should consist of an HTML button element with text content as ""Login"" and type as ""submit"",
TEST_20: When ""/ebank/login"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image URL,
TEST_21: When ""/"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route and consists of an HTML image element with alt attribute value as ""website logo"" and src as given website logo image URL,
TEST_22: When a non-empty value is provided in the HTML input element with the label text as ""User ID"", then the value provided should be displayed in the HTML input element,
TEST_23: When a non-empty value is provided in the HTML input element with the label text as ""PIN"", then the value provided should be displayed in the HTML input element,
TEST_24: When the Login button is clicked with an empty user id and pin then the respective error message should be displayed using an HTML paragraph element,
TEST_25: When a valid user id is provided and the Login button is clicked with an empty pin then the respective error message should be displayed using an HTML paragraph element,
TEST_26: When a valid user id is provided and the Login button is clicked with an empty pin then the respective error message should be displayed and the page should not be navigated,
TEST_27: When a non-empty pin is provided and the Login button is clicked with an empty user id then the respective error message should be displayed,
TEST_28: When a non-empty pin is provided and the Login button is clicked with an empty user id then the page should not be navigated,
TEST_29: When an invalid user id and pin are provided and the Login button is clicked then the respective error message should be displayed and the page should not be navigated,
TEST_30: When a valid user id and invalid pin are provided and the Login button is clicked then the respective error message should be displayed and the page should not be navigated,
TEST_31: When the Login is successful, an HTTP GET request should be made to loginApiUrl,
TEST_32: When the Login is successful, then the Cookies.set() method should be called with three arguments - ""jwt_token"" string as the first argument, JWT token value as the second argument, and expiry days as the third argument,
TEST_33: When the Login is successful, then the history.replace() method should be called with the argument ""/"",
TEST_34: When a valid user id and pin are provided and the Login button is clicked then the page should be navigated to Home Route,
TEST_11: When the ""/bad-path"" is provided in the URL, then the page should be navigated to NotFound Route and consist of an HTML image element with alt as ""not found"" and src as the given not found image URL,
TEST_12: When the ""/bad-path"" is provided in the URL, then the page should be navigated to NotFound Route and consist of the HTML main heading element with text content as ""Page Not Found"",
TEST_13: When the ""/bad-path"" is provided in the URL, then the page should be navigated to NotFound Route and consist of the HTML paragraph element with text content as ""We are sorry, the page you requested could not be found"",
TEST_1: Home Route should consist of an HTML image element with alt attribute value as ""website logo"" and src as given website logo image URL,
TEST_2: Home Route should consist of an HTML button element with text content as ""Logout"",
TEST_3: Home Route should consist of an HTML main heading element with the text content as ""Your Flexibility, Our Excellence"",
TEST_4: Home Route should consist of an HTML image element with alt attribute value as ""digital card"" and src as given digital card image URL,
TEST_5: When ""/"" is provided as the URL by an unauthenticated user, then the page should be navigated to Login Route and consists of an HTML image element with alt attribute value as ""website login"" and src as given login image URL,
TEST_6: When ""/"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route,
TEST_7: When ""/ebank/login"" is provided as the URL by an authenticated user, then the page should be navigated to Home Route and consist of an HTML main heading element with the text content as ""Your Flexibility, Our Excellence"",
TEST_8: When the Logout button is clicked, then the Cookies.remove() method should be called with the argument as ""jwt_token"",
TEST_9: When the Logout button is clicked, the history.replace() method should be called with the argument as ""/ebank/login"",
TEST_10: When the Logout button is clicked, then the page should be navigated to Login Route
```"
546e39ef72ab4fbb816c3af3d86a164b,editableTextInput,RJSCPM1V9K,/home/workspace/reactjs/coding-practices/editableTextInput,/home/workspace/.tmp/reactjs/coding-practices/editableTextInput/src,"The goal of this coding exam is to quickly get you off the ground with **Conditional Rendering**.


### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/editable-text-input-output.gif"" alt=""editable-text-input"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>


### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Editing output](https://assets.ccbp.in/frontend/content/react-js/editable-text-input-lg-editing-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Saved text output](https://assets.ccbp.in/frontend/content/react-js/editable-text-input-lg-saved-text-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the user should see the input element and the`Save` button.
- When the text is provided in the input element and the `Save` button is clicked
  - The text should be displayed in the paragraph instead of the input element.
  - The `Edit` button should be displayed.
- When the text is saved and the `Edit` button is clicked
  - The input element should be displayed with the value as text content of the HTML paragraph element.
  - The `Save` button should be displayed.

</details>



### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Use `styledComponents` for styling the elements

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #323f4b; width: 150px; padding: 10px; color: white"">Hex: #323f4b</div>
<div style=""background-color: #f5d0fe; width: 150px; padding: 10px; color: black"">Hex: #f5d0fe</div>
<div style=""background-color: #d946ef; width: 150px; padding: 10px; color: black"">Hex: #d946ef</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #cbd2d9; width: 150px; padding: 10px; color: black"">Hex: #cbd2d9</div>


</details>

<details>
<summary>Font-families</summary>


- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.

","Here are the test cases to verify:

```
TEST_1: Page should consist of an HTML heading element with ""Editable Text Input"" as text content

TEST_2: Initially, the page should consist of one HTML input element

TEST_3: Initially, the page should consist of one HTML button element with ""Save"" as text content

TEST_4: When the user entered the text in the input element, then that text should be displayed in the input element

TEST_5: When the user entered the text in the input element and clicks on the ""Save"" button, then the page should consist of paragraph element with text content as the user entered in the input element

TEST_6: When the user entered text in the input element and clicks on the ""Save"" button, then the page should consist of the HTML button element with text content as ""Edit""

TEST_7: When the user clicks on the ""Edit"" button, then the page should consist of an HTML input element with the text content of the HTML paragraph element as a value

```"
4b77d4ac4dad46949e951aaaf30a0656,textEditor,RJSCE98XPC,/home/workspace/reactjs/coding-practices/textEditor,/home/workspace/.tmp/reactjs/coding-practices/textEditor/src,"The goal of this coding exam is to quickly get you off the ground with **Dynamic Styling Using Styled Components**.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/text-editor-output-v2.gif"" alt=""text-editor-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Text Editor](https://assets.ccbp.in/frontend/content/react-js/text-editor-md-output-v2.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, **#f1f5f9** color is applied to all the three **bold icon**, **italic icon**, **underline icon** buttons

- When the **bold icon** button is clicked,

  - It will change to an active state by applying the **#faff00** color
  - The **bold** font-weight is applied to the text in the HTML textarea element
  - If the **bold icon** button is already in the active state,
    - The respective button should be inactive by applying **#f1f5f9** color
    - The **normal** font-weight is applied to the text in the HTML textarea element

- When the **italic icon** button is clicked,

  - It will change to an active state by applying the **#faff00** color
  - The **italic** font-style is applied to the text in the HTML textarea element
  - If the **italic icon** button is already in the active state,
    - The respective button should be inactive by applying **#f1f5f9** color
    - The **normal** font-style is applied to the text in the HTML textarea element

- When the **underline icon** button is clicked,

  - It will change to an active state by applying the **#faff00** color
  - The **underline** text-decoration is applied to the text in the HTML textarea element
  - If the **underline icon** button is already in the active state,
    - The respective button should be inactive by applying **#f1f5f9** color
    - The **normal** text-decoration is applied to the text in the HTML textarea element

- More than one button can be active at a time and more than one style can be applied to the text in the HTML textarea element

  </details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- `VscBold`, `GoItalic` and `AiOutlineUnderline` icons from react-icons should be used for `bold`, `italic` and `underline` buttons respectively
- Wrap the `VscBold` component with an HTML button element and add the `data-testid` attribute value as `bold`
- Wrap the `GoItalic` component with an HTML button element and add the `data-testid` attribute value as `italic`
- Wrap the `AiOutlineUnderline` component with an HTML button element and add the `data-testid` attribute value as `underline`

**Example:**

```jsx
<Button data-testid=""bold"">
  <VscBold size={25} />
</Button>
```

- Use `styled-components` for styling elements

</details>

### Resources

<details>

<summary>Image URLs</summary>
<br/>

- [https://assets.ccbp.in/frontend/react-js/text-editor-img.png](https://assets.ccbp.in/frontend/react-js/text-editor-img.png) alt should be **text editor**

</details>

<br/>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #25262c; width: 150px; padding: 10px; color: white"">Hex: #25262c</div>
<div style=""background-color: #1b1c22; width: 150px; padding: 10px; color: white"">Hex: #1b1c22</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #faff00; width: 150px; padding: 10px; color: black"">Hex: #faff00</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
</details>

<br/>
<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
","Here are the test cases to verify:

```
TEST_1: Page should consist of an HTML main heading element with the text content as ""Text Editor""

TEST_2: Page should consist of an HTML image element with alt attribute value as ""text editor"" and src as the given image URL

TEST_3: Page should consist of an HTML unordered list element to display the list of buttons

TEST_4: Page should consist of at least three HTML list items to display the buttons

TEST_5: Page should consist of at least three HTML button elements each inside an HTML list item

TEST_6: Page should consist of an HTML button element with data-testid attribute value as ""bold""

TEST_7: Page should consist of an HTML button element with data-testid attribute value as ""italic""

TEST_8: Page should consist of an HTML button element with data-testid attribute value as ""underline""

TEST_9: Page should consist of an HTML textarea element

TEST_10: The HTML button element with data-testid attribute value as ""bold"" should have the color as ""#f1f5f9""

TEST_11: When the HTML button element with data-testid attribute value as ""bold"" is clicked, then the ""#faff00"" color is applied to the respective button

TEST_12: When the HTML button element with data-testid attribute value as ""bold"" is clicked, then the ""bold"" font-weight is applied to the text in the HTML textarea element

TEST_13: The HTML button element with data-testid attribute value as ""italic"" should have the color as ""#f1f5f9""

TEST_14: When the HTML button element with data-testid attribute value as ""italic"" is clicked, then the ""#faff00"" color is applied to the respective button

TEST_15: When the HTML button element with data-testid attribute value as ""italic"" is clicked, then the ""italic"" font-style is applied to the text in the HTML textarea element

TEST_16: The HTML button element with data-testid attribute value as ""underline"" should have the color as ""#f1f5f9""

TEST_17: When the HTML button element with data-testid attribute value as ""underline"" is clicked, then the ""#faff00"" color is applied to the respective button

TEST_18: When the HTML button element with data-testid attribute value as ""underline"" is clicked, then the ""underline"" text-decoration is applied to the text in the HTML textarea element

TEST_19: When the active ""bold icon"" button is clicked, then the ""#f1f5f9"" color is applied to the respective button

TEST_20: When the active ""bold icon"" button is clicked, then the ""normal"" font-weight is applied to the text in the HTML textarea element

TEST_21: When the active ""italic icon"" button is clicked, then the ""#f1f5f9"" color is applied to the respective button

TEST_22: When the active ""italic icon"" button is clicked, then the ""normal"" font-style is applied to the text in the HTML textarea element

TEST_23: When the active ""underline icon"" button is clicked, then the ""#f1f5f9"" color is applied to the respective button

TEST_24: When the active ""underline icon"" button is clicked, then the ""normal"" text-decoration is applied to the text in the HTML textarea element

TEST_25: When the HTML button elements with data-testid attributes values as ""bold"" and ""italic"" are clicked, then the ""#faff00"" color is applied to both buttons and ""bold"" font-weight, ""italic"" font-style is applied to the text in the HTML textarea element

TEST_26: When the HTML button elements with data-testid attributes values as ""italic"" and ""underline"" are clicked, then the ""#faff00"" color is applied to both buttons and ""italic"" font-style, ""underline"" text-decoration is applied to the text in the HTML textarea element

TEST_27: When the HTML button elements with data-testid attributes values as ""bold"" and ""underline"" are clicked, then the ""#faff00"" color is applied to both buttons and ""bold"" font-weight, ""underline"" text-decoration is applied to the text in the HTML textarea element

TEST_28: When the HTML button elements with data-testid attributes values as ""bold"", ""italic"" and ""underline"" are clicked, then the ""#faff00"" color is applied to all the buttons and ""bold"" font-weight, ""italic"" font-style and ""underline"" text-decoration is applied to the text in the HTML textarea element
```"
7449e44912c94dfe8f7ecd0ee9dfd19e,techEra,RJSCEMN6X9,/home/workspace/reactjs/coding-practices/techEra,/home/workspace/.tmp/reactjs/coding-practices/techEra/src,"The goal of this coding exam is to quickly get you off the ground with **Fetching and Routing**.

### Refer to the images below:

**Success View**

<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/tech-era-success-output.gif"" alt=""success view"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>

<br/>

**Failure View**

<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/tech-era-failure-output.gif"" alt=""failure view"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>

<br/>

### Design Files

<details>

<summary>Click to view</summary>

- Home Route

  - [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Courses Success](https://assets.ccbp.in/frontend/content/react-js/tech-era-home-success-lg-output.png)
  - [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Courses Failure](https://assets.ccbp.in/frontend/content/react-js/tech-era-home-failure-lg-output.png)

- Course Item Details Route

  - [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Course Details Success](https://assets.ccbp.in/frontend/content/react-js/tech-era-course-details-success-lg-output.png)
  - [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Course Details Failure](https://assets.ccbp.in/frontend/content/react-js/tech-era-course-details-failure-lg-output.png)

- Not Found Route

  - [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/tech-era-page-not-found-lg-output.png)

</details>

### Set Up Instructions

<details>

<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`

</details>

### Completion Instructions

<details>

<summary>Functionality to be added</summary>

<br/>

The app must have the following functionalities

- When the app is opened initially, Home Route should be displayed

- **Home Route**
  - When the Home Route is opened,
    - An HTTP GET request should be made to the **coursesApiUrl**
      - The _loader_ should be displayed while the HTTP request is fetching the data
      - If the HTTP GET request made is successful, then the list of courses received in response should be displayed
      - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/tech-era-home-failure-lg-output.png) should be displayed
        - When the **Retry** button is clicked, then an HTTP GET request should be made to **coursesApiUrl**
  - When a course is clicked, then the page should be navigated to the Course Item Details Route
- **Course Item Details Route**
  - When the Course Item Details Route is opened,
    - An HTTP GET request should be made to the **courseDetailsApiUrl** with the `id` as path parameter
      - The _loader_ should be displayed while the HTTP request is fetching the data
      - If the HTTP GET request made is successful, then the course details received in response should be displayed
      - If the HTTP GET request made is unsuccessful, then the [Failure view](https://assets.ccbp.in/frontend/content/react-js/tech-era-course-details-failure-lg-output.png) should be displayed
        - When the **Retry** button is clicked, then an HTTP GET request should be made to **courseDetailsApiUrl**
- **Not Found Route**
  - When a random path is provided in the URL, then the page should be navigated to the Not Found Route
- When the **website logo** image is clicked, then the page should be navigated to the Home Route

</details>

<details>

<summary>API Requests & Responses</summary>

<br/>

**coursesApiUrl**

#### API: `https://apis.ccbp.in/te/courses`

#### Method: `GET`

#### Description:

Returns a response containing the list of all courses

#### Response:

```json
{
  ""courses"": [
      {
        ""id"": ""736d1108-d98b-482f-bfd6-234498c3571f"",
        ""name"": ""HTML"",
        ""logo_url"": ""https://assets.ccbp.in/frontend/react-js/tech-era/html-logo-img.png""
      },
       ...
  ],
  ""total"": 16
}
```

**courseDetailsApiUrl**

#### API: `https://apis.ccbp.in/te/courses/:id`

#### Method: `GET`

#### Description:

Returns a response containing details of the course

#### Response:

```json
{
  ""course_details"": {
    ""id"": ""736d1108-d98b-482f-bfd6-234498c3571f"",
    ""name"": ""HTML"",
    ""image_url"": ""https://assets.ccbp.in/frontend/react-js/tech-era/html-img.png"",
    ""description"": ""The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or local storage and render the documents into multimedia web pages.""
  }
}
```

</details>

### Important Note

<details>

<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Home Route should consist of `/` in the URL path
- Course Item Details Route should consist of `/courses/:id` in the URL path
- No need to use the `BrowserRouter` in `App.js` as we have already included in the `index.js` file
- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as `loader` to it
- Each course logo image in the Home Route should have the alt as the value of the key ""name"" from each course object in the courses list
- Each course image in the Course Item Details Route should have the alt as the value of the key ""name"" in the course details object

</details>

### Resources

<details>

<summary>Image URLs</summary>

- https://assets.ccbp.in/frontend/react-js/tech-era/website-logo-img.png alt should be **website logo**
- https://assets.ccbp.in/frontend/react-js/tech-era/failure-img.png alt should be **failure view**
- https://assets.ccbp.in/frontend/react-js/tech-era/not-found-img.png alt should be **not found**

</details>

<details>

<summary>Colors</summary>

<br/>

<div style=""background-color:#f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color:#1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>
<div style=""background-color:#475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color:#ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color:#4656a1; width: 150px; padding: 10px; color: white"">Hex: #4656a1</div>
<div style=""background-color:#64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<div style=""background-color:#e8e8e8; width: 150px; padding: 10px; color: black"">Hex: #e8e8e8</div>

</details>

<details>

<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items, and the courses list received in the API response should be rendered using a unique key as a prop for each course item.

TEST_2: When the ""/"" is provided in the URL, the page should navigate to the Home Route.

TEST_3: Home Route should consist of an HTML image element with alt as ""website logo"" and src as the given website logo image URL.

TEST_4: Home Route should consist of an HTML image element with alt as ""website logo"" and src as the given website logo image URL, wrapped with Link from react-router-dom.

TEST_5: When the Home Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"".

TEST_6: When the Home Route is opened, an HTTP GET request should be made to the given coursesApiUrl to get the list of courses.

TEST_7: When the HTTP GET request in Home Route is successful, the page should consist of an HTML main heading element with text content as ""Courses"".

TEST_8: When the HTTP GET request in Home Route is successful, the page should consist of at least an HTML unordered list element to display the list of courses.

TEST_9: When the HTTP GET request in Home Route is successful, the page should consist of HTML list items to display the course items from the courses API response.

TEST_10: When the HTTP GET request in Home Route is successful, the course items should be wrapped with Link from react-router-dom.

TEST_11: When the HTTP GET request in Home Route is successful, the page should consist of HTML image elements with alt and src values as the values of the keys ""name"" and ""logo_url"" in the courses received in the courses API response.

TEST_12: When the HTTP GET request in Home Route is successful, the page should consist of HTML paragraph elements with text content as the value of the ""name"" in the courses received in the courses API response.

TEST_13: When the HTTP GET request in Home Route is successful, and a course item is clicked, the page should navigate to the CourseItemDetails Route with ""/courses/:id"" in the URL.

TEST_14: When the HTTP GET request in Home Route is unsuccessful, the page should consist of an HTML image element with alt as ""failure view"" and src as the given failure view image URL.

TEST_15: When the HTTP GET request in Home Route is unsuccessful, the page should consist of an HTML main heading element with text content as ""Oops! Something Went Wrong"".

TEST_16: When the HTTP GET request in Home Route is unsuccessful, the page should consist of an HTML paragraph element with text content as ""We cannot seem to find the page you are looking for"".

TEST_17: When the HTTP GET request in Home Route is unsuccessful, the page should consist of an HTML button element with text content as ""Retry"".

TEST_18: When the HTTP GET request in Home Route is unsuccessful, and the Retry button is clicked, an HTTP GET request should be made to coursesApiUrl.

TEST_19: When the ""/bad-path"" is provided in the URL, the page should navigate to NotFound Route and consist of an HTML image element with alt as ""website logo"" and src as the given website logo image URL.

TEST_20: When the ""/bad-path"" is provided in the URL, the page should navigate to NotFound Route, and the HTML image element with alt as ""website logo"" should be wrapped with Link from react-router-dom.

TEST_21: When the ""/bad-path"" is provided in the URL, the page should navigate to NotFound Route and consist of an HTML image element with alt as ""not found"" and src as the given not found image URL.

TEST_22: When the ""/bad-path"" is provided in the URL, the page should navigate to NotFound Route and consist of an HTML main heading element with text content as ""Page Not Found"".

TEST_23: When the ""/bad-path"" is provided in the URL, the page should navigate to NotFound Route and consist of an HTML paragraph element with text content as ""We are sorry, the page you requested could not be found"".

TEST_24: When the ""/courses/:id"" is provided in the URL, the page should navigate to CourseItemDetails Route.

TEST_25: CourseItemDetails Route should consist of an HTML image element with alt as ""website logo"" and src as the given website logo image URL.

TEST_26: CourseItemDetails Route should consist of an HTML image element with alt as ""website logo"" and src as the given website logo image URL, wrapped with Link from react-router-dom.

TEST_27: When the CourseItemDetails Route is opened, it should initially consist of an HTML container element with data-testid attribute value as ""loader"".

TEST_28: When the CourseItemDetails Route is opened, an HTTP GET request should be made to the given courseItemDetailsApiUrl to get the course item details.

TEST_29: When the HTTP GET request in CourseItemDetails Route is successful, the page should consist of an HTML image element with alt and src values equal to the ""name"" and ""logo_url"" in course_details received in the course details API response.

TEST_30: When the HTTP GET request in CourseItemDetails Route is successful, the page should consist of an HTML main heading element with text content as the value of the key ""name"" in course_details received in the course details API response.

TEST_31: When the HTTP GET request in CourseItemDetails Route is successful, the page should consist of an HTML paragraph element with text content as the value of the key ""description"" in course_details received in the course details API response.

TEST_32: When the HTTP GET request in CourseItemDetails Route is unsuccessful, the page should consist of an HTML main heading element with text content as ""Oops! Something Went Wrong"".

TEST_33: When the HTTP GET request in CourseItemDetails Route is unsuccessful, the page should consist of an HTML image element with alt as ""failure view"" and src as the given failure view image URL.

TEST_34: When the HTTP GET request in CourseItemDetails Route is unsuccessful, the page should consist of an HTML paragraph element with text content as ""We cannot seem to find the page you are looking for"".

TEST_35: When the HTTP GET request in CourseItemDetails Route is unsuccessful, the page should consist of an HTML button element with text content as ""Retry"".

TEST_36: When the website logo in the Header is clicked, the page should navigate to Home Route.

TEST_37: When the HTTP GET request in CourseItemDetails Route is unsuccessful, and the Retry button is clicked, an HTTP GET request should be made to courseDetailsApiUrl.

```"
2b5a476d1e5f4a15bd666d5ad3ce3084,musicPlaylist,RJSCE7HLQ1,/home/workspace/reactjs/coding-practices/musicPlaylist,/home/workspace/.tmp/reactjs/coding-practices/musicPlaylist/src,"The goal of this coding exam is to quickly get you off the ground with **Lists and Keys**

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
  <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/music-playlist-output.mp4"" type=""video/mp4"">
  </video>
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Music Playlist](https://assets.ccbp.in/frontend/content/react-js/music-playlist-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No Songs Found View](https://assets.ccbp.in/frontend/content/react-js/music-playlist-no-songs-found-lg-ouput.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of given track items should be displayed with a delete button for each track item
- When a non-empty value with key `name` from the `initialTracksList` provided in the search input then display the track items which includes the search input irrespective of case
- When the delete button of a track item is clicked, the respective track item should be deleted from the list of track items
- When a non-empty value is provided in the search input element, and no track item includes the value given in the search input, then [No Songs Found View](https://assets.ccbp.in/frontend/content/react-js/music-playlist-no-songs-found-lg-ouput.png) should be displayed
- When all track items are deleted, then [No Songs Found View](https://assets.ccbp.in/frontend/content/react-js/music-playlist-no-songs-found-lg-ouput.png) should be displayed

- The App is provided with `initialTracksList`. It consists of a list of trackItem objects with the following properties in each trackItem object

  |   Key    | Data Type |
  | :------: | :-------: |
  |    id    |  String   |
  | imageUrl |  String   |
  |   name   |  String   |
  |  genre   |  String   |
  | duration |  String   |

  </details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The `imageUrl` in each track item should have alt as **track**
- The delete button in the track item should have the `data-testid` as **delete**

</details>

### Resources

<details>
<summary>Image URLs</summary>

- [https://assets.ccbp.in/frontend/react-js/music-playlist/music-playlist-Edsheeran-bg.png](https://assets.ccbp.in/frontend/react-js/music-playlist/music-playlist-Edsheeran-bg.png) background-image URL

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #152850; width: 150px; padding: 10px; color: white"">Hex: #152850</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #3b82f6; width: 150px; padding: 10px; color: black"">Hex: #3b82f6</div>
<br/>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items rendered using a unique key as a prop to display trackItem from the initialTracksList,
TEST_2: Page should consist of an HTML main heading element with text content as ""Ed Sheeran"",
TEST_3: Page should consist of an HTML paragraph element with text content as ""Singer"",
TEST_4: Page should consist of an HTML main heading element with text content as ""Songs Playlist"",
TEST_5: Page should consist of an HTML input element with type attribute value as ""search"",
TEST_6: Page should consist of an HTML input element with placeholder text as ""Search"",
TEST_7: Page should consist of an HTML unordered list element to display the trackItems,
TEST_8: Page should consist of at least ten HTML list elements to display the list of trackItems,
TEST_9: Page should consist of an HTML image element with alt attribute value as ""track"" and src as the given image URL,
TEST_10: Page should consist of an HTML paragraph elements with text content as the values of the key ""name"" in each trackItem of given initialTracksList,
TEST_11: Page should consist of an HTML paragraph elements with text content as the values of the key ""genre"" in each trackItem of given initialTracksList,
TEST_12: Page should consist of an HTML paragraph elements with text content as the values of the key ""duration"" in each trackItem of given initialTracksList,
TEST_13: Page should consist of at least ten HTML button elements with data-testid as ""delete"",
TEST_14: When a non-empty value is provided in the search input element, then that text should be displayed in the search input element,
TEST_15: When a non-empty value is provided in the search input element, the trackItems should be filtered irrespective of the case,
TEST_16: When a non-empty value is provided in the search input element, and no track item includes the value given in the search input, then the page should consist of an HTML paragraph element with text content as ""No Songs Found"",
TEST_17: When an HTML button element with data-testid as ""delete"" of a track item is clicked, then the respective track item should be deleted,
TEST_18: When all track items are deleted, then the page should consist of an HTML paragraph element with text content as ""No Songs Found""
```"
660760fec9d24932b5f129b333ce0887,characterCounter,RJSCEGBK15,/home/workspace/reactjs/coding-practices/characterCounter,/home/workspace/.tmp/reactjs/coding-practices/characterCounter/src,"The goal of this coding exam is to quickly get you off the ground with **Lists and Keys** in React JS.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/character-counter-output.gif"" alt=""Character Counter"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No User Inputs View](https://assets.ccbp.in/frontend/content/react-js/character-counter-no-user-inputs-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/character-counter-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the value of the user input element should be empty and [No User Inputs View](https://assets.ccbp.in/frontend/content/react-js/character-counter-no-user-inputs-lg-output.png) should be displayed.
- When a non-empty value is provided in the user input element and the **Add** button is clicked,
  - A new user input item should be added to the list of user inputs.
  - The count of characters of the value provided in the user input element should be displayed.
  - The value inside the user input element should be updated to its initial value.

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Use `styled-components` for styling elements.
- Use the `uuid` package to generate the unique id.

</details>

### Resources

<details>
<summary>Image URLs</summary>

- https://assets.ccbp.in/frontend/react-js/no-user-inputs-img.png alt should be **no user inputs**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #ffc533; width: 150px; padding: 10px; color: black"">Hex: #ffc533</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #0f172a; width: 150px; padding: 10px; color: white"">Hex: #0f172a</div>
<div style=""background-color: #ffbf1f; width: 150px; padding: 10px; color: black"">Hex: #ffbf1f</div>
<div style=""background-color: #272c47; width: 150px; padding: 10px; color: white"">Hex: #272c47</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
","Here are the test cases to verify:

```
TEST_1: When two user input items are added, the page should consist of at least two HTML list items rendered using a unique key as a prop to display user input items.

TEST_2: Page should consist of an HTML main heading element with text content as ""Count the characters like a Boss"".

TEST_3: Page should consist of an HTML image element with alt as ""no user inputs"" and src attribute value as the URL for no user inputs image.

TEST_4: Page should consist of an HTML main heading element with text content as ""Character Counter"".

TEST_5: Page should consist of an HTML form element to provide the user input.

TEST_6: Page should consist of an HTML input element with the placeholder as ""Enter the Characters here"" and type as ""text"".

TEST_7: Page should consist of an HTML button element with text content as ""Add"".

TEST_8: When a non-empty value is provided in the HTML input element, the value inside the HTML input element should be updated.

TEST_9: When a non-empty value is provided in the HTML input element and Add button is clicked, the page should consist of an HTML unordered list element to display the list of user input items.

TEST_10: When a non-empty value is provided in the HTML input element and Add button is clicked, an HTML list item element should be added to display the newly added user input item.

TEST_11: When a non-empty value is provided in the HTML input element and Add button is clicked, an HTML list item element should be added to the user inputs list with a unique id imported from the uuid package.

TEST_12: When a new user input item is added, an HTML paragraph element with text content as the value provided in user input should be displayed.

TEST_13: When a new user input item is added, the characters count of the value provided in user input should be displayed.

TEST_14: When a new user input item is added, the value inside the HTML input element should be updated to the initial value.

```"
99198e515bf64189a5d9f25b8eedf52f,visitCountries,RJSCELYBMA,/home/workspace/reactjs/coding-practices/visitCountries,/home/workspace/.tmp/reactjs/coding-practices/visitCountries/src,"The goal of this coding exam is to quickly get you off the ground with **Lists and Keys** in React JS.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/visit-countries-output.gif"" alt=""visit countries"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/visit-countries-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No Visited Countries View](https://assets.ccbp.in/frontend/content/react-js/visit-countries-no-visited-countries-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`

</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of given countries should be displayed.
  - If the country is not visited, it should be displayed with the **Visit** button.
  - If the country is visited, it should be displayed with the text **Visited** and also should be displayed in the visited countries.
- When a **Visit** button of the country is clicked,
  - The country should be added in the visited countries.
  - The **Visit** button of a respective country should be replaced with the text **Visited**.
- When a **Remove** button in one of the visited countries is clicked,
  - The respective visited country should be removed from the visited countries.
  - The **Visited** text of a respective visited country should be replaced with a **Visit** button.
- When all the visited countries are removed, then [No Visited Countries View](https://assets.ccbp.in/frontend/content/react-js/visit-countries-no-visited-countries-lg-output.png) should be displayed.
- The `App` component consists of the `initialCountriesList`. It consists of a list of countries with the following properties in each country object.

  |    key    | DataType |
  | :-------: | :------: |
  |    id     |  String  |
  |   name    |  String  |
  | imageUrl  |  String  |
  | isVisited | Boolean  |

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The image of each visited country should have the `alt` attribute value as **thumbnail**.
- Use `styled-components` for styling elements.

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #161624; width: 150px; padding: 10px; color: white"">Hex: #161624</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #1f1f2f; width: 150px; padding: 10px; color: white"">Hex: #1f1f2f</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #3b82f6; width: 150px; padding: 10px; color: black"">Hex: #3b82f6</div>
<div style=""background-color: #94a3b8; width: 150px; padding: 10px; color: white"">Hex: #94a3b8</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
> - **Do not remove the pre-filled code**
","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items, and the initialCountriesList and visited countries list should be rendered using a unique key as a prop for each country item and visited country item respectively.

TEST_2: Page should consist of an HTML main heading element with text content as ""Countries"".

TEST_3: Page should initially consist of two HTML unordered list elements to display the list of countries and visited countries.

TEST_4: Page should initially consist of twelve HTML list items to display the country items and the visited country items.

TEST_5: Page should initially consist of HTML paragraph elements with text content as values of the key ""name"" from the initialCountriesList provided.

TEST_6: Page should initially consist of eight HTML button elements with text content as ""Visit"".

TEST_7: Page should initially consist of two HTML paragraph elements with text content as ""Visited"".

TEST_8: Page should consist of an HTML main heading element with text content as ""Visited Countries"".

TEST_9: Page should initially consist of two HTML image elements with alt as ""thumbnail"" and src as values of the key ""imageUrl"" of the respective visited country items from the initialCountriesList provided.

TEST_10: Page should initially consist of two HTML paragraph elements with text content as the value of the key ""name"" in both the countries list and visited countries list if the value of the key ""isVisited"" is true from the initialCountriesList provided.

TEST_11: Page should initially consist of two HTML button elements with text content as ""Remove"".

TEST_12: When the Visit button is clicked, the Visit button of a respective country item should be replaced with an HTML paragraph element with text content as ""Visited"".

TEST_13: When the Visit button is clicked, a new HTML list item should be added to display the visited country item in the visited countries list.

TEST_14: When the Visit button is clicked, an HTML image element with alt as ""thumbnail"" and src as the value of the key ""imageUrl"" of the respective country item should be displayed in the visited countries list.

TEST_15: When the Visit button is clicked, an HTML paragraph element with text content as the value of the key ""name"" of the respective country item should be displayed in the visited countries list.

TEST_16: When the Visit button is clicked, an HTML button element with text content as ""Remove"" should be displayed in the respective visited country item in the visited countries list.

TEST_17: When the Remove button is clicked, the respective country item should be removed from the visited countries list.

TEST_18: When the Remove button is clicked, the ""Visited"" text of the respective country item should be replaced with an HTML button element with text content as ""Visit"".

TEST_19: When all the visited countries are removed, an HTML paragraph element with text content as ""No Countries Visited Yet"" should be displayed.

```"
972df3a82de4427fbc6b760bbf2564c6,multilingualGreetings,RJSCP42KBV,/home/workspace/reactjs/coding-practices/multilingualGreetings,/home/workspace/.tmp/reactjs/coding-practices/multilingualGreetings/src,"The goal of this coding exam is to quickly get you off the ground with **Lists and Keys**.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/multilingual-greetings-output.gif"" alt=""multilingual-greetings"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>


### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/multilingual-greetings-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the **English** language button should be active and the **English** greeting image should be displayed.
- When the user clicks on a language button, then the corresponding greeting image should be displayed.
- The `App` component consists of the `languageGreetingsList`. It consists of a list of image details objects with the following properties in each object

    | Key        | Data Type |
    | ---------- | --------- |
    | id         | Number    |
    | imageUrl   | String    |
    | buttonText | String    |

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The image should have the alt attribute value as **greeting**
- Use `styledComponents` for styling the elements

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>


<div style=""background-color: #db1c48; width: 150px; padding: 10px; color: black"">Hex: #db1c48</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>

</details>


<details>
<summary>Font-families</summary>

- Roboto

</details>


> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
","Here are the test cases to verify:

```
TEST_1: The page should consist of at least one HTML list item, and the languageGreetingsList should be rendered using a unique key as a prop for each languageGreetingsItem.

TEST_2: The page should consist of an HTML main heading element with text content as ""Multilingual Greetings"".

TEST_3: The page should consist of an HTML unordered list element to display the languageGreetingsItems.

TEST_4: The page should consist of at least three HTML list items to display the given list of languageGreetingsItems.

TEST_5: The page should consist of at least three HTML button elements with the text content of the ""buttonText"" values provided in languageGreetingsList.

TEST_6: The page should consist of an HTML image element, which initially has alt text with the value of the key ""imageAltText"" from the first item provided in languageGreetingsList.

TEST_7: The page should consist of an HTML image element, which initially has src with the value of the key ""imageUrl"" from the first item provided in languageGreetingsList.

TEST_8: When a languageGreetingsItem is clicked, the corresponding greeting image should have alt text with the value of the key ""imageAltText"" provided in languageGreetingsList.

TEST_9: When a languageGreetingsItem is clicked, the corresponding greeting image should have src with the value of the key ""imageUrl"" provided in languageGreetingsList.

```"
972df3a82de4427fbc6b760bbf2564c6,multilingualGreetings,RJSCP42KBV,/home/workspace/reactjs/coding-practices/multilingualGreetings,/home/workspace/.tmp/reactjs/coding-practices/multilingualGreetings/src,"The goal of this coding exam is to quickly get you off the ground with **Lists and Keys**.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/multilingual-greetings-output.gif"" alt=""multilingual-greetings"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>


### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/multilingual-greetings-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the **English** language button should be active and the **English** greeting image should be displayed.
- When the user clicks on a language button, then the corresponding greeting image should be displayed.
- The `App` component consists of the `languageGreetingsList`. It consists of a list of image details objects with the following properties in each object

    | Key        | Data Type |
    | ---------- | --------- |
    | id         | Number    |
    | imageUrl   | String    |
    | buttonText | String    |

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The image should have the alt attribute value as **greeting**
- Use `styledComponents` for styling the elements

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>


<div style=""background-color: #db1c48; width: 150px; padding: 10px; color: black"">Hex: #db1c48</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #1e293b; width: 150px; padding: 10px; color: white"">Hex: #1e293b</div>

</details>


<details>
<summary>Font-families</summary>

- Roboto

</details>


> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.
","Here are the test cases to verify:

```
TEST_1: The page should consist of at least one HTML list item, and the languageGreetingsList should be rendered using a unique key as a prop for each languageGreetingsItem.

TEST_2: The page should consist of an HTML main heading element with text content as ""Multilingual Greetings"".

TEST_3: The page should consist of an HTML unordered list element to display the languageGreetingsItems.

TEST_4: The page should consist of at least three HTML list items to display the given list of languageGreetingsItems.

TEST_5: The page should consist of at least three HTML button elements with the text content of the ""buttonText"" values provided in languageGreetingsList.

TEST_6: The page should consist of an HTML image element, which initially has alt text with the value of the key ""imageAltText"" from the first item provided in languageGreetingsList.

TEST_7: The page should consist of an HTML image element, which initially has src with the value of the key ""imageUrl"" from the first item provided in languageGreetingsList.

TEST_8: When a languageGreetingsItem is clicked, the corresponding greeting image should have alt text with the value of the key ""imageAltText"" provided in languageGreetingsList.

TEST_9: When a languageGreetingsItem is clicked, the corresponding greeting image should have src with the value of the key ""imageUrl"" provided in languageGreetingsList.

```"
b99021bb23b24467a0c88e50e2123934,myTasks,RJSCEUU4M8,/home/workspace/reactjs/coding-practices/myTasks,/home/workspace/.tmp/reactjs/coding-practices/myTasks/src,"The goal of this coding exam is to quickly get you off the ground with **Lists and Keys**.

### Refer to the image below:

<br>
<div style=""text-align: center;"">
  <video style=""max-width:80%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/my-tasks-output.mp4"" type=""video/mp4"">
    
  </video>
</div>
<br/>


### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - No Tasks View](https://assets.ccbp.in/frontend/content/react-js/my-tasks-output-no-tasks-view.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/my-tasks-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Filter View](https://assets.ccbp.in/frontend/content/react-js/my-tasks-output-filter-view.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- Initially, the list of tasks and `Task` input should be empty and the active option in the `Tags` select element should be the first item of the given tagsList.
- When non-empty values are provided for Tasks, Tags and the **Add Task** button is clicked,
  - A new task should be added to the list of tasks.
  - The value inside the `Task` input and `Tag` select elements should be updated to their initial values.
- When a single tag is clicked it should be changed to an active state and filtered tasks should be displayed accordingly.
- When no tag in the list of tags is active, then all the tasks should be displayed.
- The `App` component consists of the `tagsList`. It consists of a list of tag details objects with the following properties in each object.

    | key      | DataType |
    | :-------:| :-----------: |
    | optionId      | String       |
    | displayText  | String        |


</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Use `styled-components` for styling elements.
- Use the `uuid` package to generate the unique id.


</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #131213; width: 150px; padding: 10px; color: white"">Hex: #131213</div>
<div style=""background-color: #f3aa4e; width: 150px; padding: 10px; color: black"">Hex: #f3aa4e</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: black"">Hex: #64748b</div>
<div style=""background-color: #f8f8f8; width: 150px; padding: 10px; color: black"">Hex: #f8f8f8</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: black"">Hex: #475569</div>
<div style=""background-color: #323f4b; width: 150px; padding: 10px; color: white"">Hex: #323f4b</div>
<div style=""background-color: #000000; width: 150px; padding: 10px; color: white"">Hex: #000000</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color: #1a171d; width: 150px; padding: 10px; color: white"">Hex: #1a171d</div>
<div style=""background-color: #f8fafc; width: 150px; padding: 10px; color: black"">Hex: #f8fafc</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.

","Here are the test cases to verify:

```
TEST_1: When a task is added, the page should consist of at least two HTML list items, and the tagsList should be rendered using a unique key as a prop for each tagItem.
TEST_2: Page should consist of an HTML main heading element with text content as ""Create a task"".
TEST_3: Page should consist of an HTML form element to display all the input elements and button element.
TEST_4: Page should consist of the HTML input element with the label as ""Task"" and type as ""text"" with ""Enter the task here"" as a placeholder.
TEST_5: Page should consist of an HTML select element with the label as ""Tags"" and the initial value should contain the value of key ""optionId"" from the first item provided in the tagsList.
TEST_6: Page should consist of HTML option elements with value equal to the value of the key ""optionId"" in the tagsList provided.
TEST_7: Page should consist of HTML option elements with text content equal to the value of the key ""displayText"" in the tagsList provided.
TEST_8: Page should consist of an HTML button element with text content as ""Add Task"".
TEST_9: Page should consist of an HTML main heading element with text content as ""Tags"".
TEST_10: Page should consist of HTML list items to display the given list of tags in the tagsList.
TEST_11: Page should consist of HTML Button elements with text content equal to the value of the key ""displayText"" in the tagsList provided.
TEST_12: Page should consist of an HTML main heading element with text content as ""Tasks"".
TEST_13: When the tasks list is empty, the page should consist of an HTML paragraph element with text content as ""No Tasks Added Yet"".
TEST_14: When a non-empty value is provided for the HTML input element with the label text ""Task"", the value provided should be updated in the value of the input element.
TEST_15: When a value is provided for the HTML select element with the label text ""Tags"", the value provided should be updated in the value of the select element.
TEST_16: When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, the values inside the HTML input and select elements should be updated to their initial values.
TEST_17: When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, an HTML list item should be added.
TEST_18: When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, the page should consist of at least 2 HTML unordered list elements to display the list of tags and tasks.
TEST_19: When non-empty values are provided in the HTML input and select elements with label text ""Task"" and ""Tags"", and the ""Add Task"" button is clicked, an HTML list item should be added to the tasks list with a unique id imported from the UUID package.
TEST_20: When a non-empty value is provided for the HTML input element with label text ""Task"" and the ""Add Task"" button is clicked, an HTML paragraph element with text content as ""Task"" provided should be displayed.
TEST_21: When a value is provided for the HTML select element with label text ""Tags"", and the ""Add Task"" button is clicked, an HTML paragraph element with text content ""Tag"" provided should be displayed.
TEST_22: When a tag in the list of tags is active, then the respective tasks should be filtered and displayed using HTML paragraph elements accordingly.
TEST_23: When a tag in the list of tags is active, then the tag name of the respective tasks should be displayed using HTML paragraph elements.
TEST_24: When no tag in the list of tags is inactive, then all the tasks should be displayed.
```"
8f6980fd0b04402e8dd70b9568cda014,travelGuide,RJSCET6A77,/home/workspace/reactjs/coding-practices/travelGuide,/home/workspace/.tmp/reactjs/coding-practices/travelGuide/src,"The goal of this coding exam is to quickly get you off the ground with **Making API call with Fetch**

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/travel-guide-output.gif"" alt=""travel-guide-desktop-output"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px)](https://assets.ccbp.in/frontend/content/react-js/travel-guide-lg-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>
The app must have the following functionalities

When the app is opened initially,

- An HTTP GET request should be made to **travelGuidePackagesApiUrl**
- **<i>loader</i>** should be displayed while fetching the data
- If the HTTP GET request made is successful, the list of packages should be displayed

</details>

<details>
<summary>API Requests & Responses</summary>
<br/>

**travelGuidePackagesApiUrl**

**API**: `https://apis.ccbp.in/tg/packages`

**Method**: `GET`

**Description**:

Returns a response containing the list of packages

**Response**

```json

{
    ""packages"":[
        {
        ""id"":1,
        ""name"":""Best of Paris in 7 days tour"",
        ""image_url"":""https://assets.ccbp.in/frontend/react-js/travel-guide/paris-img.png"",
        ""description"":""Paris, France capital, is a major European city and a global centre for art, fashion, gastronomy, and culture. Its 19th-century cityscape is crisscrossed by wide boulevards and the River Seine.""
        },
        ...
   ],
}

```

</details>

### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- The image in each package item should have the alt as the value of the key `name` from each package object in the packages list
- Wrap the Loader component with an HTML container element and add the `data-testid` attribute value as `loader` to it as shown below

```jsx
<div data-testid=""loader"">
  <Loader type=""TailSpin"" color=""#00BFFF"" height={50} width={50} />
</div>
```

</details>

### Resources

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #eef4f7; width: 150px; padding: 10px; color: black"">Hex: #eef4f7</div>
<div style=""background-color: #334155; width: 150px; padding: 10px; color: white"">Hex: #334155</div>
<div style=""background-color: #52bbf0; width: 150px; padding: 10px; color: black"">Hex: #52bbf0</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: white"">Hex: #64748b</div>
<br/>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the packages list received in the response should be rendered using a unique key as a prop for each package item

TEST_2: Page should consist of an HTML main heading element with the text content as ""Travel Guide""

TEST_3: When the page is loaded initially an HTTP GET request should be made to the given apiUrlPackages to get the list of packages

TEST_4: Page should initially consist of an HTML container element with data-testid attribute value as ""loader""

TEST_5: When the HTTP GET request is successful, then the page should consist of HTML unordered list element to display the list of packages

TEST_6: When the HTTP GET request is successful, then the page should consist of at least three HTML list items to display the list of packages

TEST_7: When the HTTP GET request is successful, then the page should consist of HTML image elements with alt as the value of the key ""name"" and src as the value of the key ""image_url"" in each package from the packages received from the response

TEST_8: When the HTTP GET request is successful, then the page should consist of HTML main heading elements with text content as the value of the key ""name"" in each package from the packages received from the response

TEST_9: When the HTTP GET request is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""description"" in each package from the packages received from the response

```"
468fccff02064451a079e162967b0aa9,meetup,RJSCEL8G9J,/home/workspace/reactjs/coding-practices/meetup,/home/workspace/.tmp/reactjs/coding-practices/meetup/src,"The goal of this coding exam is to quickly get you off the ground with **React Context**.

### Refer to the image below:

<br/>
<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/meetup-output-v0.gif"" alt=""meetup"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

### Design Files

<details>
<summary>Home Route</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/meetup-lg-home-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home Registered View](https://assets.ccbp.in/frontend/content/react-js/meetup-lg-home-registered-output.png)

</details>

<details>
<summary>Register Route</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Register](https://assets.ccbp.in/frontend/content/react-js/meetup-lg-register-output-.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Register Failure](https://assets.ccbp.in/frontend/content/react-js/meetup-lg-register-error-output.png)

</details>

<details>
<summary>Not Found Route</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Not Found](https://assets.ccbp.in/frontend/content/react-js/meetup-lg-not-found-output.png)

</details>

### Set Up Instructions

<details>
<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`
</details>

### Completion Instructions

<details>
<summary>Functionality to be added</summary>
<br/>

The app must have the following functionalities

- **Home Route**
  - Initially, when the **Register** button in the Home Route is clicked, then the page should be navigated to Register Route
  - When the **Register Now** button in the Register Route is clicked, then the input name and selected topic in the Register Route should be displayed in the Home Route

- **Register Route**

  - Initially, the value in the input element should be empty and the selected value in the select element should be the first item in the given **topicsList**
  - When the **Register Now** button is clicked with an empty input value, then the respective error message should be displayed and page should not be navigated to Home Route
  - When the values are provided for both the input and select elements and the **Register Now** button is clicked, then the page should be navigated to Home Route

- **Not Found Route**
  - When a random path is provided as the URL, then the page should be navigated to the Not Found Route
- Use `styled-components` for styling elements
- The `App` component is provided with **topicsList**. It consists of a list of topic objects with the following properties in each topic object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |     id      |  String   |
  | displayText |  String   |


</details>


### Important Note

<details>
<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

 - Home Route should consist of `/` in the URL path
 - Register Route should consist of `/register` in the URL path

</details>

### Resources

<details>
<summary>Image URLs</summary>

 - [https://assets.ccbp.in/frontend/react-js/meetup/website-logo-img.png](https://assets.ccbp.in/frontend/react-js/meetup/website-logo-img.png) alt should be **website logo**
 - [https://assets.ccbp.in/frontend/react-js/meetup/website-register-img.png](https://assets.ccbp.in/frontend/react-js/meetup/website-register-img.png) alt should be **website register**
 - [https://assets.ccbp.in/frontend/react-js/meetup/meetup-img.png](https://assets.ccbp.in/frontend/react-js/meetup/meetup-img.png) alt should be **meetup**
 - [https://assets.ccbp.in/frontend/react-js/meetup/not-found-img.png](https://assets.ccbp.in/frontend/react-js/meetup/not-found-img.png) alt should be **not found**

</details>

<details>
<summary>Colors</summary>

<br/>

<div style=""background-color: #334155; width: 150px; padding: 10px; color: black"">Hex: #334155</div>
<div style=""background-color: #475569; width: 150px; padding: 10px; color: black"">Hex: #475569</div>
<div style=""background-color: #ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color: #3b82f6; width: 150px; padding: 10px; color: black"">Hex: #3b82f6</div>
<div style=""background-color: #2563eb; width: 150px; padding: 10px; color: black"">Hex: #2563eb</div>
<div style=""background-color: #64748b; width: 150px; padding: 10px; color: black"">Hex: #64748b</div>
<div style=""background-color: #7b8794; width: 150px; padding: 10px; color: black"">Hex: #7b8794</div>
<div style=""background-color: #cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
<div style=""background-color: #ff0b37; width: 150px; padding: 10px; color: black"">Hex: #ff0b37</div>

</details>

<details>
<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
","Here are the test cases to verify:

```
TEST_11: When the ""/bad-path"" is provided as the URL, then the page should be navigated to NotFound Route and consist of an HTML image element with alt attribute as ""not found"" and src as the given not found image URL,
TEST_12: When the ""/bad-path"" is provided as the URL, then the page should be navigated to NotFound Route and consist of the HTML main heading element with text content as ""Page Not Found"",
TEST_13: When the ""/bad-path"" is provided as the URL, then the page should be navigated to NotFound Route and consist of the HTML paragraph element with text content as ""We are sorry, the page you requested could not be found"",
TEST_14: Register Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src as given website logo image URL,
TEST_15: Register Route should consist of an HTML image element with alt attribute value as ""website register"" and src as given website register image URL,
TEST_16: Register Route should consist of an HTML main heading element with the text content as ""Let us join"",
TEST_17: Register Route should consist of an HTML form element,
TEST_18: Register Route should consist of HTML input element with label text as ""NAME"" and type ""text"",
TEST_19: Register Route initially should consist of an HTML select element with label text as ""TOPICS"" and value attribute as ""ARTS_AND_CULTURE"",
TEST_20: Register Route should consist of HTML option elements with value attribute as the value of the key ""id"" from topicsList provided,
TEST_21: Register Route should consist of HTML option elements with text content as the value of the key ""displayText"" from topicsList provided,
TEST_22: Register Route should consist of an HTML button element with text content as ""Register Now"" and type as ""submit"",
TEST_23: When a non-empty value is provided in the HTML input element with the label text ""NAME"", then the value provided should be displayed in the HTML input element,
TEST_24: When a topic option is selected in the HTML select element, the selected option should be displayed in the HTML select element,
TEST_25: When the ""Register Now"" button is clicked with an empty name input, then the page should consist of an HTML paragraph element to display the error message with text content as ""Please enter your name"",
TEST_26: When the values are provided for both the input and select elements and the ""Register Now"" button is clicked, then the history.replace() method should be called with the argument ""/"" and page should navigate to Home Route,
TEST_27: When the values are provided for both the input and select elements and the ""Register Now"" button is clicked, then the page should navigate to Home Route and should consist of an HTML image element with alt attribute value as ""meetup"" and src attribute value as given meetup image URL,
TEST_1: Home Route should consist of an HTML image element in the Header with alt attribute value as ""website logo"" and src value as given website logo image URL,
TEST_2: Home Route should initially consist of an HTML main heading element with the text content as ""Welcome to Meetup"",
TEST_3: Home Route should initially consist of an HTML paragraph element with the text content as ""Please register for the topic"",
TEST_4: Home Route should initially consist of an HTML button element with text content as ""Register"",
TEST_5: Home Route should initially consist of an HTML button element with text content as ""Register"" and is wrapped with a ""Link"" from react-router-dom,
TEST_6: Home Route should consist of an HTML image element with alt attribute value as ""meetup"" and src attribute value as given meetup image URL,
TEST_7: When the ""Register"" button in the Home Route is clicked, then the page should be navigated to Register Route,
TEST_8: When the ""Register"" button in the Home Route is clicked, then the page should be navigated to Register Route and should consist of HTML main heading element with the text content as ""Let us join"",
TEST_9: When a value is provided in the HTML input element and the ""Register Now"" button in Register Route is clicked, then the value provided in the input element should be displayed in the Home Route as ""Hello {Name}"" and here the Name is the value of the HTML input element in the Register Route,
TEST_10: When a non-empty input name is provided and a topic is selected in the HTML select element and the ""Register Now"" button in Register Route is clicked, then the respective ""displayText"" for the value provided in the select element should be displayed in the Home Route
```"
7a44ad4dbab34e12bd239ab81096d4ce,projectsShowcase,RJSCEQHZ58,/home/workspace/reactjs/coding-practices/projectsShowcase,/home/workspace/.tmp/reactjs/coding-practices/projectsShowcase/src,"The goal of this coding exam is to quickly get you off the ground with **setState Callback Function**.

### Refer to the video and image below:

<div style=""text-align: center;"">
    <video style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12);outline:none;"" loop=""true"" autoplay=""autoplay"" controls=""controls"" muted>
    <source src=""https://assets.ccbp.in/frontend/content/react-js/projects-showcase-success-output.mp4"" type=""video/mp4"">
  </video>
</div>

<br/>

**Failure View**

<div style=""text-align: center;"">
    <img src=""https://assets.ccbp.in/frontend/content/react-js/projects-showcase-failure-output.gif"" alt=""failure view"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>

<br/>

### Design Files

<details>

<summary>Click to view</summary>

- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Success](https://assets.ccbp.in/frontend/content/react-js/projects-showcase-success-lg-output.png)
- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Failure](https://assets.ccbp.in/frontend/content/react-js/projects-showcase-failure-lg-output.png)

</details>

### Set Up Instructions

<details>

<summary>Click to view</summary>

- Download dependencies by running `npm install`
- Start up the app using `npm start`

</details>

### Completion Instructions

<details>

<summary>Functionality to be added</summary>

<br/>

The app must have the following functionalities

- When the app is opened initially,

  - An HTTP GET request should be made to **projectsApiUrl** with query parameter as `category` and its initial value as `ALL`
  - The **_loader_** should be displayed while fetching the data
  - After the data is fetched successfully, display the projects list received in the API response

- When a category option is selected,

  - An HTTP GET request should be made to the **projectsApiUrl** with the query parameter as `category` and its value as the `id` of the active category option
  - The **_loader_** should be displayed while fetching the data
  - After the data is fetched successfully, display the projects list received in the API response

- The `App` component is provided with `categoriesList`. It consists of a list of category objects with the following properties in each category object

  |     Key     | Data Type |
  | :---------: | :-------: |
  |     id      |  String   |
  | displayText |  String   |

</details>

<details>

<summary>API Requests & Responses</summary>

<br/>

**projectsApiUrl**

#### API: `https://apis.ccbp.in/ps/projects`

#### Example: `https://apis.ccbp.in/ps/projects?category=ALL`

#### Method: `GET`

#### Description:

Returns a response containing the list of all projects

#### Response:

```json
{
  ""projects"": [
      {
        ""id"": ""f680c5fb-a4d0-4f43-b356-785d920208df"",
        ""name"": ""Music Page"",
        ""image_url"": ""https://assets.ccbp.in/frontend/react-js/projects-showcase/music-page-img.png""
      },
       ...
  ],
  ""total"": 34
}
```

</details>

### Important Note

<details>

<summary>Click to view</summary>

<br/>

**The following instructions are required for the tests to pass**

- Each category option in the HTML `select` element should have the value attribute as the value of key `id` and text content as the value of the key `displayText` from the `categoriesList` provided
- Wrap the `Loader` component with an HTML container element and add the `data-testid` attribute value as **loader** to it
- The project image in each project item should have the alt as the value of the key `name` from each project object in the projects API response

</details>

### Resources

<details>

<summary>Image URLs</summary>

- https://assets.ccbp.in/frontend/react-js/projects-showcase/website-logo-img.png alt should be **website logo**
- https://assets.ccbp.in/frontend/react-js/projects-showcase/failure-img.png alt should be **failure view**

</details>

<details>

<summary>Colors</summary>

<br/>

<div style=""background-color:#f1f5f9; width: 150px; padding: 10px; color: black"">Hex: #f1f5f9</div>
<div style=""background-color:#cbd5e1; width: 150px; padding: 10px; color: black"">Hex: #cbd5e1</div>
<div style=""background-color:#475569; width: 150px; padding: 10px; color: white"">Hex: #475569</div>
<div style=""background-color:#ffffff; width: 150px; padding: 10px; color: black"">Hex: #ffffff</div>
<div style=""background-color:#328af2; width: 150px; padding: 10px; color: white"">Hex: #328af2</div>
<div style=""background-color:#e2e8f0; width: 150px; padding: 10px; color: black"">Hex: #e2e8f0</div>
<div style=""background-color:#e6e9ec; width: 150px; padding: 10px; color: black"">Hex: #e6e9ec</div>

</details>

<details>

<summary>Font-families</summary>

- Roboto

</details>

> ### _Things to Keep in Mind_
>
> - All components you implement should go in the `src/components` directory.
> - Don't change the component folder names as those are the files being imported into the tests.","Here are the test cases to verify:

```
TEST_1: Page should consist of at least two HTML list items and the categories list and the projects list received in the API response should be rendered using a unique key as a prop for each category option and project item respectively,
TEST_2: Page should consist of an HTML image element with alt as ""website logo"" and src as the given website logo image URL,
TEST_3: Page should initially consist of an HTML select element with a value attribute as ""ALL"",
TEST_4: Page should consist of HTML option elements with value attribute as the value of the key ""id"" from categoriesList provided,
TEST_5: Page should consist of the HTML option elements with text content as the value of the key ""displayText"" from categoriesList provided,
TEST_6: When the page is opened, then it should initially consist of an HTML container element with data-testid attribute value as ""loader"",
TEST_7: When the page is opened, then an HTTP GET request should be made to projectsApiUrl,
TEST_8: When the page is opened initially, then an HTTP GET request should be made to projectsApiUrl with query parameter as ""category"" and its value as ""ALL"",
TEST_9: When the HTTP GET request is successful, then the page should consist of at least an HTML unordered list element to display the list of projects,
TEST_10: When the HTTP GET request is successful, then the page should consist of the HTML list items to display the project item received in the projects API response,
TEST_11: When the HTTP GET request is successful, then the page should consist of HTML image elements with alt and src as the values of the keys ""name"" and ""image_url"" in projects received in the projects API response respectively,
TEST_12: When the HTTP GET request is successful, then the page should consist of HTML paragraph elements with text content as the value of the key ""name"" in projects received in the projects API response,
TEST_13: When a category option is selected in the HTML select element, then the selected option should be updated as the value of the HTML select element,
TEST_14: When a category option is selected in the HTML select element, then an HTTP GET request should be made to projectsApiUrl with query parameter as ""category"" and its value as the value of the key ""id"" of the active category option,
TEST_15: When the HTTP GET request is unsuccessful, then the page should consist of an HTML image element with alt as ""failure view"" and src as the given failure view image URL,
TEST_16: When the HTTP GET request is unsuccessful, then the page should consist of an HTML main heading element with text content as ""Oops! Something Went Wrong"",
TEST_17: When the HTTP GET request is unsuccessful, then the page should consist of an HTML paragraph element with text content as ""We cannot seem to find the page you are looking for"",
TEST_18: When the HTTP GET request is unsuccessful, then the page should consist of an HTML button element with text content as ""Retry"",
TEST_19: When the HTTP GET request is unsuccessful, and the Retry button is clicked, then an HTTP GET request should be made to projectsApiUrl
```"